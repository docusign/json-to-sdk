// Copyright DocuSign, Inc. â’¸ 2020. MIT License -- https://opensource.org/licenses/MIT
export function addBlocks(BlocklyObj) {
    const Blockly = BlocklyObj;
    

// createEnvelope
Blockly.Blocks['createEnvelope'] = {
  init: function() {
    this.jsonInit({
      "type": "createEnvelope",
      "message0": "Create Envelope %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "createEnvelopeAttribute"
        }
      ],
      "colour": 0,
      "tooltip": "",
      "helpUrl": "",
    });
  }
};
// recipientViewRequest
Blockly.Blocks['recipientViewRequest'] = {
  init: function() {
    this.jsonInit({
      "type": "recipientViewRequest",
      "message0": "Embedded Signing Ceremony %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientViewRequestAttribute"
        }
      ],
      "colour": 3,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
    });
  }
};

// The option scalar for the propertyMetadata_options array
Blockly.Blocks['propertyMetadata_options'] = {
  init: function() {
    this.jsonInit({
      "message0": "option: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "option",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "An option string supported by this setting.",
      "helpUrl": "",
      "previousStatement": "propertyMetadataAttribute",
      "nextStatement":     "propertyMetadataAttribute",    
    });
  }
};
// addressInformation
Blockly.Blocks['addressInformation'] = {
  init: function() {
    this.jsonInit({
      "message0": "address information %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "addressInformationAttribute"
        }
      ],
      "colour": 6,
      "tooltip": "Contains address information.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// addressInformationInput__addressInformation Attributes
Blockly.Blocks['addressInformation__address1'] = {
  init: function() {
    this.jsonInit({
      "message0": "address1: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "address1",
          "text": ""
        }
      ],
      "colour": 6,
      "tooltip": "The first line of the user's address.\nMaximum length: 100 characters.",
      "helpUrl": "",
      "previousStatement": "addressInformationAttribute",
      "nextStatement":     "addressInformationAttribute",    
    });
  }
};
Blockly.Blocks['addressInformation__address2'] = {
  init: function() {
    this.jsonInit({
      "message0": "address2: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "address2",
          "text": ""
        }
      ],
      "colour": 6,
      "tooltip": "The second line of the user's address.\nMaximum length: 100 characters.",
      "helpUrl": "",
      "previousStatement": "addressInformationAttribute",
      "nextStatement":     "addressInformationAttribute",    
    });
  }
};
Blockly.Blocks['addressInformation__city'] = {
  init: function() {
    this.jsonInit({
      "message0": "city: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "city",
          "text": ""
        }
      ],
      "colour": 6,
      "tooltip": "The user's city. Maximum length: 40 characters.",
      "helpUrl": "",
      "previousStatement": "addressInformationAttribute",
      "nextStatement":     "addressInformationAttribute",    
    });
  }
};
Blockly.Blocks['addressInformation__country'] = {
  init: function() {
    this.jsonInit({
      "message0": "country: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "country",
          "text": ""
        }
      ],
      "colour": 6,
      "tooltip": "The user's country. Maximum length: 50 characters.",
      "helpUrl": "",
      "previousStatement": "addressInformationAttribute",
      "nextStatement":     "addressInformationAttribute",    
    });
  }
};
Blockly.Blocks['addressInformation__fax'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fax",
          "text": ""
        }
      ],
      "colour": 6,
      "tooltip": "A fax number associated with the address, if one is available.",
      "helpUrl": "",
      "previousStatement": "addressInformationAttribute",
      "nextStatement":     "addressInformationAttribute",    
    });
  }
};
Blockly.Blocks['addressInformation__phone'] = {
  init: function() {
    this.jsonInit({
      "message0": "phone: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "phone",
          "text": ""
        }
      ],
      "colour": 6,
      "tooltip": "A phone number associated with the address.",
      "helpUrl": "",
      "previousStatement": "addressInformationAttribute",
      "nextStatement":     "addressInformationAttribute",    
    });
  }
};
Blockly.Blocks['addressInformation__postalCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "postal code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "postalCode",
          "text": ""
        }
      ],
      "colour": 6,
      "tooltip": "The user's postal code. Maximum length: 20 characters.",
      "helpUrl": "",
      "previousStatement": "addressInformationAttribute",
      "nextStatement":     "addressInformationAttribute",    
    });
  }
};
Blockly.Blocks['addressInformation__stateOrProvince'] = {
  init: function() {
    this.jsonInit({
      "message0": "state or province: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "stateOrProvince",
          "text": ""
        }
      ],
      "colour": 6,
      "tooltip": "The user's state or province. Maximum length: 40 characters.",
      "helpUrl": "",
      "previousStatement": "addressInformationAttribute",
      "nextStatement":     "addressInformationAttribute",    
    });
  }
};
Blockly.Blocks['addressInformation__zipPlus4'] = {
  init: function() {
    this.jsonInit({
      "message0": "zip plus4: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "zipPlus4",
          "text": ""
        }
      ],
      "colour": 6,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "addressInformationAttribute",
      "nextStatement":     "addressInformationAttribute",    
    });
  }
};

// addressInformationInput
Blockly.Blocks['addressInformationInput'] = {
  init: function() {
    this.jsonInit({
      "message0": "address information input %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "addressInformationInputAttribute"
        }
      ],
      "colour": 9,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// idCheckInformationInput__addressInformationInput Attributes
Blockly.Blocks['addressInformationInput__displayLevelCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "display level code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "displayLevelCode",
          "text": ""
        }
      ],
      "colour": 9,
      "tooltip": "Specifies the display level for the recipient. Valid values are:\n* `ReadOnly`\n* `Editable`\n* `DoNotDisplay`",
      "helpUrl": "",
      "previousStatement": "addressInformationInputAttribute",
      "nextStatement":     "addressInformationInputAttribute",    
    });
  }
};
Blockly.Blocks['addressInformationInput__receiveInResponse'] = {
  init: function() {
    this.jsonInit({
      "message0": "receive in response: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "receiveInResponse",
          "text": ""
        }
      ],
      "colour": 9,
      "tooltip": "A Boolean value that specifies whether the information must be returned in the response.",
      "helpUrl": "",
      "previousStatement": "addressInformationInputAttribute",
      "nextStatement":     "addressInformationInputAttribute",    
    });
  }
};

// agent
Blockly.Blocks['agent'] = {
  init: function() {
    this.jsonInit({
      "message0": "agent %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "agentAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipients__agent Attributes
Blockly.Blocks['agent__accessCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessCode",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. \n\nMaximum Length: 50 characters and it must conform to the account's access code format setting.\n\nIf blank, but the signer `accessCode` property is set in the envelope, then that value is used.\n\nIf blank and the signer `accessCode` property is not set, then the access code is not required.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__accessCodeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Metadata that indicates whether the `accessCode` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__addAccessCodeToEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "add access code to email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "addAccessCodeToEmail",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__additionalNotificationsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "additional notifications metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__allowSystemOverrideForLockedRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow system override for locked recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowSystemOverrideForLockedRecipient",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__clientUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "client user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "clientUserId",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "Specifies whether the recipient is embedded or remote. \n\nIf the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.\n\nNote: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. \n\nMaximum length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__completedCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "completed count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "completedCount",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['agent__customFields'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom fields %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "customField",
          "check": "agent_customFieldsAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['agent_customFields__customField'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom field: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customField",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "agent_customFieldsAttribute",
      "nextStatement":     "agent_customFieldsAttribute",    
    });
  }
};


Blockly.Blocks['agent__declinedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedDateTime",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The date and time the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__declinedReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedReason",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The reason the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__deliveredDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivered date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveredDateTime",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The date and time that the envelope was delivered to the recipient. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__deliveryMethod'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveryMethod",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__deliveryMethodMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__designatorId'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorId",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__designatorIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorIdGuid",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "email",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The email id of the agent. Notification of the document to sign is sent to this email id. \n\nMaximum length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__emailMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "email metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Metadata that indicates whether the `email` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__embeddedRecipientStartURL'] = {
  init: function() {
    this.jsonInit({
      "message0": "embedded recipient start url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "embeddedRecipientStartURL",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. \n\nIf set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.\n\nIt is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.\n\nIf the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` ",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['agent__excludedDocuments'] = {
  init: function() {
    this.jsonInit({
      "message0": "excluded documents %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "excludedDocument",
          "check": "agent_excludedDocumentsAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.\n\nWhen enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['agent_excludedDocuments__excludedDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "excluded document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "excludedDocument",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "agent_excludedDocumentsAttribute",
      "nextStatement":     "agent_excludedDocumentsAttribute",    
    });
  }
};


Blockly.Blocks['agent__faxNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "faxNumber",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__faxNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__firstName'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "firstName",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The recipient's first name. Maximum Length: 50 characters.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__firstNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Metadata that indicates whether the `firstame` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__fullName'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fullName",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__fullNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__idCheckConfigurationName'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "idCheckConfigurationName",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.\n- `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.\n- `ID Check $`: The  recipient must answer detailed security questions. \n\n**Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__idCheckConfigurationNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__inheritEmailNotificationConfiguration'] = {
  init: function() {
    this.jsonInit({
      "message0": "inherit email notification configuration: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "inheritEmailNotificationConfiguration",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. ",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__lastName'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lastName",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The recipient's last name.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__lastNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Metadata that indicates whether the `lastName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__lockedRecipientPhoneAuthEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient phone auth editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientPhoneAuthEditable",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__lockedRecipientSmsEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient sms editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientSmsEditable",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The full legal name of the recipient. Maximum Length: 100 characters.\n\n**Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__note'] = {
  init: function() {
    this.jsonInit({
      "message0": "note: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "note",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "A note sent to the recipient in the signing email.\nThis note is unique to this recipient.\nIn the user interface,\nit appears near the upper left corner\nof the document\non the signing screen.\n\nMaximum Length: 1000 characters.\n",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__noteMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "note metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Metadata that indicates whether the `note` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__recipientType'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientType",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The recipient type, as specified by the following values:\n- `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.\n- `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.\n- `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.\n- `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.\n- `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.\n- `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.\n- `seal`: Electronic seal recipients represent legal entities.\n- `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.\n- `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__recipientTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Metadata that indicates whether the `recipientType` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__requireIdLookup'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireIdLookup",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. ",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__requireIdLookupMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Metadata that indicates whether the `requireIdLookup` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__roleName'] = {
  init: function() {
    this.jsonInit({
      "message0": "role name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "roleName",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__routingOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "routingOrder",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "Specifies the routing order of the recipient in the envelope. ",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__routingOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Metadata that indicates whether the `routingOrder` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__sentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentDateTime",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The UTC DateTime when the envelope was sent. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__signedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "signed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signedDateTime",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__signingGroupId'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupId",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\n**Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. ",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__signingGroupIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 12,
      "tooltip": "Metadata that indicates whether the `signingGroupId` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__signingGroupName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupName",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "Optional. The name of the signing group. \n\nMaximum Length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The recipient's status. Read only. \n\nPossible values:\n\n- `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.\n- `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.\n- `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).\n- `declined`: The recipient declined to sign the document(s) in the envelope.\n- `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.\n- `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.\n- `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.\n- `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__statusCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "status code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "statusCode",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The code associated with the recipient's status. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__suppressEmails'] = {
  init: function() {
    this.jsonInit({
      "message0": "suppress emails: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "suppressEmails",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__totalTabCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "total tab count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "totalTabCount",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The total number of tabs in the documents. Read only.",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};
Blockly.Blocks['agent__userId'] = {
  init: function() {
    this.jsonInit({
      "message0": "user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userId",
          "text": ""
        }
      ],
      "colour": 12,
      "tooltip": "The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.\n",
      "helpUrl": "",
      "previousStatement": "agentAttribute",
      "nextStatement":     "agentAttribute",    
    });
  }
};

// approve
Blockly.Blocks['approve'] = {
  init: function() {
    this.jsonInit({
      "message0": "approve %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "approveAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "A tab that allows the recipient to approve documents\nwithout placing a signature or initials on the\ndocument.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__approve Attributes
Blockly.Blocks['approve__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__buttonText'] = {
  init: function() {
    this.jsonInit({
      "message0": "button text: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "buttonText",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": " Specifies the approval text that displays in the tab. ",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__buttonTextMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "button text metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `buttonText` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "The DocuSign-generated custom tab ID for the custom tab to be applied. You can only use this when adding new tabs for a recipient. When used, the new tab inherits all of the properties of the custom tab.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "Specifies the page number on which the tab is located. For supplemental documents, this value must be `1`.\n",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['approve__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "approve_tabGroupLabelsAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['approve_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "approve_tabGroupLabelsAttribute",
      "nextStatement":     "approve_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['approve__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 15,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};
Blockly.Blocks['approve__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 15,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "approveAttribute",
      "nextStatement":     "approveAttribute",    
    });
  }
};

// attachment
Blockly.Blocks['attachment'] = {
  init: function() {
    this.jsonInit({
      "message0": "attachment %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "attachmentAttribute"
        }
      ],
      "colour": 18,
      "tooltip": "Contains information about an attachment.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// envelopeDefinition__attachment Attributes
Blockly.Blocks['attachment__accessControl'] = {
  init: function() {
    this.jsonInit({
      "message0": "access control: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessControl",
          "text": ""
        }
      ],
      "colour": 18,
      "tooltip": "Valid values are `sender` and `senderAndAllRecipients`.",
      "helpUrl": "",
      "previousStatement": "attachmentAttribute",
      "nextStatement":     "attachmentAttribute",    
    });
  }
};
Blockly.Blocks['attachment__attachmentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "attachment id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "attachmentId",
          "text": ""
        }
      ],
      "colour": 18,
      "tooltip": "The unique identifier for the attachment.",
      "helpUrl": "",
      "previousStatement": "attachmentAttribute",
      "nextStatement":     "attachmentAttribute",    
    });
  }
};
Blockly.Blocks['attachment__attachmentType'] = {
  init: function() {
    this.jsonInit({
      "message0": "attachment type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "attachmentType",
          "text": ""
        }
      ],
      "colour": 18,
      "tooltip": "Specifies the type of the attachment for the recipient. Possible values are:\n\n- `.htm`\n- `.xml`",
      "helpUrl": "",
      "previousStatement": "attachmentAttribute",
      "nextStatement":     "attachmentAttribute",    
    });
  }
};
Blockly.Blocks['attachment__data'] = {
  init: function() {
    this.jsonInit({
      "message0": "data: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "data",
          "text": ""
        }
      ],
      "colour": 18,
      "tooltip": "A Base64-encoded representation of the attachment that is used to upload and download the file. File attachments may be up to 50 MB in size.",
      "helpUrl": "",
      "previousStatement": "attachmentAttribute",
      "nextStatement":     "attachmentAttribute",    
    });
  }
};
Blockly.Blocks['attachment__label'] = {
  init: function() {
    this.jsonInit({
      "message0": "label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "label",
          "text": ""
        }
      ],
      "colour": 18,
      "tooltip": "A label for the attachment. Potential values include: \n\n- `guidedForm`: [Guided forms](https://www.docusign.com/products/guided-forms) provide a step-by-step, mobile-ready experience to help signers easily complete long or complex forms.\n- `eventNotifications`: A list of envelope-level event statuses that trigger Connect to send updates to the endpoint specified in the `url` property. \n",
      "helpUrl": "",
      "previousStatement": "attachmentAttribute",
      "nextStatement":     "attachmentAttribute",    
    });
  }
};
Blockly.Blocks['attachment__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 18,
      "tooltip": "The name of the attachment.",
      "helpUrl": "",
      "previousStatement": "attachmentAttribute",
      "nextStatement":     "attachmentAttribute",    
    });
  }
};
Blockly.Blocks['attachment__remoteUrl'] = {
  init: function() {
    this.jsonInit({
      "message0": "remote url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "remoteUrl",
          "text": ""
        }
      ],
      "colour": 18,
      "tooltip": "The URL of a previously staged chunked upload. Using a chunked upload enables you to stage a large, chunkable temp file. You then use the `remoteUrl` property to reference the chunked upload as the content in attachment and document-related requests. The `remoteUrl` property cannot be used for downloads.",
      "helpUrl": "",
      "previousStatement": "attachmentAttribute",
      "nextStatement":     "attachmentAttribute",    
    });
  }
};

// bccEmailAddress
Blockly.Blocks['bccEmailAddress'] = {
  init: function() {
    this.jsonInit({
      "message0": "bcc email address %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "bccEmailAddressAttribute"
        }
      ],
      "colour": 21,
      "tooltip": "Contains information about the BCC email address.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// emailSettings__bccEmailAddress Attributes
Blockly.Blocks['bccEmailAddress__bccEmailAddressId'] = {
  init: function() {
    this.jsonInit({
      "message0": "bcc email address id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bccEmailAddressId",
          "text": ""
        }
      ],
      "colour": 21,
      "tooltip": "Only users with canManageAccount setting can use this option. An array of up to 5 email addresses the envelope is sent to as a BCC email. \n \nExample: If your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address.",
      "helpUrl": "",
      "previousStatement": "bccEmailAddressAttribute",
      "nextStatement":     "bccEmailAddressAttribute",    
    });
  }
};
Blockly.Blocks['bccEmailAddress__email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "email",
          "text": ""
        }
      ],
      "colour": 21,
      "tooltip": "Specifies the BCC email address. DocuSign verifies that the email format is correct, but does not verify that the email is active.Using this overrides the BCC for Email Archive information setting for this envelope.\n\nMaximum of length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "bccEmailAddressAttribute",
      "nextStatement":     "bccEmailAddressAttribute",    
    });
  }
};

// carbonCopy
Blockly.Blocks['carbonCopy'] = {
  init: function() {
    this.jsonInit({
      "message0": "carbon copy %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "carbonCopyAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents. ",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipients__carbonCopy Attributes
Blockly.Blocks['carbonCopy__accessCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessCode",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. \n\nMaximum Length: 50 characters and it must conform to the account's access code format setting.\n\nIf blank, but the signer `accessCode` property is set in the envelope, then that value is used.\n\nIf blank and the signer `accessCode` property is not set, then the access code is not required.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__accessCodeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Metadata that indicates whether the `accessCode` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__addAccessCodeToEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "add access code to email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "addAccessCodeToEmail",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__additionalNotificationsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "additional notifications metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__agentCanEditEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "agent can edit email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "agentCanEditEmail",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__agentCanEditName'] = {
  init: function() {
    this.jsonInit({
      "message0": "agent can edit name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "agentCanEditName",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated name. This element is only active if enabled for the account.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__allowSystemOverrideForLockedRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow system override for locked recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowSystemOverrideForLockedRecipient",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__clientUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "client user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "clientUserId",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Not applicable for Carbon Copy recipients.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__completedCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "completed count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "completedCount",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['carbonCopy__customFields'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom fields %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "customField",
          "check": "carbonCopy_customFieldsAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['carbonCopy_customFields__customField'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom field: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customField",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "carbonCopy_customFieldsAttribute",
      "nextStatement":     "carbonCopy_customFieldsAttribute",    
    });
  }
};


Blockly.Blocks['carbonCopy__declinedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedDateTime",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The date and time the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__declinedReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedReason",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The reason the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__deliveredDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivered date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveredDateTime",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The date and time that the envelope was delivered to the recipient. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__deliveryMethod'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveryMethod",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__deliveryMethodMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__designatorId'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorId",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__designatorIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorIdGuid",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "email",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The recipient's email address. Notification of the document to sign is sent to this email address. \n\nMaximum length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__emailMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "email metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Metadata that indicates whether the `email` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__embeddedRecipientStartURL'] = {
  init: function() {
    this.jsonInit({
      "message0": "embedded recipient start url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "embeddedRecipientStartURL",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. \n\nIf set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.\n\nIt is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.\n\nIf the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` ",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['carbonCopy__excludedDocuments'] = {
  init: function() {
    this.jsonInit({
      "message0": "excluded documents %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "excludedDocument",
          "check": "carbonCopy_excludedDocumentsAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.\n\nWhen enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['carbonCopy_excludedDocuments__excludedDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "excluded document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "excludedDocument",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "carbonCopy_excludedDocumentsAttribute",
      "nextStatement":     "carbonCopy_excludedDocumentsAttribute",    
    });
  }
};


Blockly.Blocks['carbonCopy__faxNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "faxNumber",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__faxNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__firstName'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "firstName",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The recipient's first name. Maximum Length: 50 characters.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__firstNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Metadata that indicates whether the `firstame` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__fullName'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fullName",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__fullNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__idCheckConfigurationName'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "idCheckConfigurationName",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.\n- `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.\n- `ID Check $`: The  recipient must answer detailed security questions. \n\n**Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__idCheckConfigurationNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__inheritEmailNotificationConfiguration'] = {
  init: function() {
    this.jsonInit({
      "message0": "inherit email notification configuration: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "inheritEmailNotificationConfiguration",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. ",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__lastName'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lastName",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The recipient's last name.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__lastNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Metadata that indicates whether the `lastName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__lockedRecipientPhoneAuthEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient phone auth editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientPhoneAuthEditable",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__lockedRecipientSmsEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient sms editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientSmsEditable",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The full legal name of the recipient. Maximum Length: 100 characters.\n\n**Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__note'] = {
  init: function() {
    this.jsonInit({
      "message0": "note: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "note",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "A note sent to the recipient in the signing email.\nThis note is unique to this recipient.\nIn the user interface,\nit appears near the upper left corner\nof the document\non the signing screen.\n\nMaximum Length: 1000 characters.\n",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__noteMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "note metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Metadata that indicates whether the `note` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__recipientType'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientType",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The recipient type, as specified by the following values:\n- `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.\n- `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.\n- `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.\n- `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.\n- `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.\n- `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.\n- `seal`: Electronic seal recipients represent legal entities.\n- `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.\n- `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__recipientTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Metadata that indicates whether the `recipientType` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__requireIdLookup'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireIdLookup",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. ",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__requireIdLookupMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Metadata that indicates whether the `requireIdLookup` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__roleName'] = {
  init: function() {
    this.jsonInit({
      "message0": "role name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "roleName",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__routingOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "routingOrder",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Specifies the routing order of the recipient in the envelope. ",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__routingOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Metadata that indicates whether the `routingOrder` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__sentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentDateTime",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The UTC DateTime when the envelope was sent. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__signedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "signed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signedDateTime",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__signingGroupId'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupId",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\n**Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. ",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__signingGroupIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 24,
      "tooltip": "Metadata that indicates whether the `signingGroupId` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__signingGroupName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupName",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "Optional. The name of the signing group. \n\nMaximum Length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The recipient's status. Read only. \n\nPossible values:\n\n- `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.\n- `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.\n- `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).\n- `declined`: The recipient declined to sign the document(s) in the envelope.\n- `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.\n- `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.\n- `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.\n- `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__statusCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "status code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "statusCode",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The code associated with the recipient's status. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__suppressEmails'] = {
  init: function() {
    this.jsonInit({
      "message0": "suppress emails: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "suppressEmails",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__totalTabCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "total tab count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "totalTabCount",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The total number of tabs in the documents. Read only.",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};
Blockly.Blocks['carbonCopy__userId'] = {
  init: function() {
    this.jsonInit({
      "message0": "user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userId",
          "text": ""
        }
      ],
      "colour": 24,
      "tooltip": "The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.\n",
      "helpUrl": "",
      "previousStatement": "carbonCopyAttribute",
      "nextStatement":     "carbonCopyAttribute",    
    });
  }
};

// certifiedDelivery
Blockly.Blocks['certifiedDelivery'] = {
  init: function() {
    this.jsonInit({
      "message0": "certified delivery %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "certifiedDeliveryAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipients__certifiedDelivery Attributes
Blockly.Blocks['certifiedDelivery__accessCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessCode",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. \n\nMaximum Length: 50 characters and it must conform to the account's access code format setting.\n\nIf blank, but the signer `accessCode` property is set in the envelope, then that value is used.\n\nIf blank and the signer `accessCode` property is not set, then the access code is not required.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__accessCodeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Metadata that indicates whether the `accessCode` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__addAccessCodeToEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "add access code to email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "addAccessCodeToEmail",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__additionalNotificationsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "additional notifications metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__agentCanEditEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "agent can edit email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "agentCanEditEmail",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__agentCanEditName'] = {
  init: function() {
    this.jsonInit({
      "message0": "agent can edit name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "agentCanEditName",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated name. This element is only active if enabled for the account.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__allowSystemOverrideForLockedRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow system override for locked recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowSystemOverrideForLockedRecipient",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__clientUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "client user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "clientUserId",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Specifies whether the recipient is embedded or remote. \n\nIf the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.\n\nNote: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. \n\nMaximum length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__completedCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "completed count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "completedCount",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['certifiedDelivery__customFields'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom fields %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "customField",
          "check": "certifiedDelivery_customFieldsAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['certifiedDelivery_customFields__customField'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom field: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customField",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "certifiedDelivery_customFieldsAttribute",
      "nextStatement":     "certifiedDelivery_customFieldsAttribute",    
    });
  }
};


Blockly.Blocks['certifiedDelivery__declinedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedDateTime",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The date and time the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__declinedReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedReason",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The reason the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__deliveredDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivered date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveredDateTime",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The date and time that the envelope was delivered to the recipient. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__deliveryMethod'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveryMethod",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__deliveryMethodMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__designatorId'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorId",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__designatorIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorIdGuid",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "email",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The recipient's email address.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__emailMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "email metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Metadata that indicates whether the `email` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__embeddedRecipientStartURL'] = {
  init: function() {
    this.jsonInit({
      "message0": "embedded recipient start url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "embeddedRecipientStartURL",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. \n\nIf set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.\n\nIt is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.\n\nIf the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` ",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['certifiedDelivery__excludedDocuments'] = {
  init: function() {
    this.jsonInit({
      "message0": "excluded documents %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "excludedDocument",
          "check": "certifiedDelivery_excludedDocumentsAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.\n\nWhen enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['certifiedDelivery_excludedDocuments__excludedDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "excluded document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "excludedDocument",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "certifiedDelivery_excludedDocumentsAttribute",
      "nextStatement":     "certifiedDelivery_excludedDocumentsAttribute",    
    });
  }
};


Blockly.Blocks['certifiedDelivery__faxNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "faxNumber",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__faxNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__firstName'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "firstName",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The recipient's first name. Maximum Length: 50 characters.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__firstNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Metadata that indicates whether the `firstame` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__fullName'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fullName",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__fullNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__idCheckConfigurationName'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "idCheckConfigurationName",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.\n- `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.\n- `ID Check $`: The  recipient must answer detailed security questions. \n\n**Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__idCheckConfigurationNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__inheritEmailNotificationConfiguration'] = {
  init: function() {
    this.jsonInit({
      "message0": "inherit email notification configuration: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "inheritEmailNotificationConfiguration",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. ",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__lastName'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lastName",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The recipient's last name.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__lastNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Metadata that indicates whether the `lastName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__lockedRecipientPhoneAuthEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient phone auth editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientPhoneAuthEditable",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__lockedRecipientSmsEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient sms editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientSmsEditable",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The full legal name of the recipient. Maximum Length: 100 characters.\n\n**Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__note'] = {
  init: function() {
    this.jsonInit({
      "message0": "note: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "note",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "A note sent to the recipient in the signing email.\nThis note is unique to this recipient.\nIn the user interface,\nit appears near the upper left corner\nof the document\non the signing screen.\n\nMaximum Length: 1000 characters.\n",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__noteMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "note metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Metadata that indicates whether the `note` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the document.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__recipientType'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientType",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The recipient type, as specified by the following values:\n- `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.\n- `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.\n- `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.\n- `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.\n- `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.\n- `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.\n- `seal`: Electronic seal recipients represent legal entities.\n- `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.\n- `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__recipientTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Metadata that indicates whether the `recipientType` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__requireIdLookup'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireIdLookup",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. ",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__requireIdLookupMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Metadata that indicates whether the `requireIdLookup` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__roleName'] = {
  init: function() {
    this.jsonInit({
      "message0": "role name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "roleName",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__routingOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "routingOrder",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Specifies the routing order of the recipient in the envelope. ",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__routingOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Metadata that indicates whether the `routingOrder` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__sentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentDateTime",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The UTC DateTime when the envelope was sent. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__signedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "signed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signedDateTime",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__signingGroupId'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupId",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\n**Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. ",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__signingGroupIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 27,
      "tooltip": "Metadata that indicates whether the `signingGroupId` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__signingGroupName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupName",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "Optional. The name of the signing group. \n\nMaximum Length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The status of the recipient. Read only. \n\nPossible values:\n\n- `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.\n- `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.\n- `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).\n- `declined`: The recipient declined to sign the document(s) in the envelope.\n- `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.\n- `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.\n- `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.\n- `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__statusCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "status code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "statusCode",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The code associated with the recipient's status. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__suppressEmails'] = {
  init: function() {
    this.jsonInit({
      "message0": "suppress emails: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "suppressEmails",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__totalTabCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "total tab count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "totalTabCount",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The total number of tabs in the documents. Read only.",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};
Blockly.Blocks['certifiedDelivery__userId'] = {
  init: function() {
    this.jsonInit({
      "message0": "user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userId",
          "text": ""
        }
      ],
      "colour": 27,
      "tooltip": "The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.\n",
      "helpUrl": "",
      "previousStatement": "certifiedDeliveryAttribute",
      "nextStatement":     "certifiedDeliveryAttribute",    
    });
  }
};

// checkbox
Blockly.Blocks['checkbox'] = {
  init: function() {
    this.jsonInit({
      "message0": "checkbox %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "checkboxAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "A tab that allows the recipient to select a yes/no (on/off) option.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__checkbox Attributes
Blockly.Blocks['checkbox__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "The DocuSign-generated custom tab ID for the custom tab to apply. This property can only be used when adding new tabs for a recipient. When used, the new tab inherits all custom tab properties.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "The page number on which the tab is located.\nFor supplemental documents, this value must be `1`.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__requireInitialOnSharedChange'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireInitialOnSharedChange",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__requireInitialOnSharedChangeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "This property does not apply to `checkbox` tabs. Check boxes are always optional.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__selected'] = {
  init: function() {
    this.jsonInit({
      "message0": "selected: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "selected",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "When **true**, the checkbox is selected.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__selectedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "selected metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `selected` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__shared'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "shared",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "When **true**, this tab is shared.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__sharedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `shared` property is editable.\n",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['checkbox__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "checkbox_tabGroupLabelsAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['checkbox_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "checkbox_tabGroupLabelsAttribute",
      "nextStatement":     "checkbox_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['checkbox__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-7, -6)\n",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 30,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-7, -6)\n",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};
Blockly.Blocks['checkbox__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 30,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "checkboxAttribute",
      "nextStatement":     "checkboxAttribute",    
    });
  }
};

// comment
Blockly.Blocks['comment'] = {
  init: function() {
    this.jsonInit({
      "message0": "comment %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "commentAttribute"
        }
      ],
      "colour": 33,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// commentThread__comment Attributes
Blockly.Blocks['comment__envelopeId'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "envelopeId",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The Guid of the envelope the comment thread belongs to.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__hmac'] = {
  init: function() {
    this.jsonInit({
      "message0": "hmac: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hmac",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__id'] = {
  init: function() {
    this.jsonInit({
      "message0": "id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "id",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The unique identifier for the comment.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['comment__mentions'] = {
  init: function() {
    this.jsonInit({
      "message0": "mentions %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "mention",
          "check": "comment_mentionsAttribute"
        }
      ],
      "colour": 33,
      "tooltip": "An array of userIds that are mentioned directly in the body of a comment.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['comment_mentions__mention'] = {
  init: function() {
    this.jsonInit({
      "message0": "mention: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mention",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "comment_mentionsAttribute",
      "nextStatement":     "comment_mentionsAttribute",    
    });
  }
};


Blockly.Blocks['comment__read'] = {
  init: function() {
    this.jsonInit({
      "message0": "read: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "read",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "When **true**, indicates that the comment was read.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__sentByEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent by email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentByEmail",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The email address of the user who created the comment.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__sentByFullName'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent by full name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentByFullName",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The full name of the user who created the comment.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__sentByImageId'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent by image id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentByImageId",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__sentByInitials'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent by initials: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentByInitials",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The initials of the user who created the comment.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__sentByRecipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent by recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentByRecipientId",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The recipient id of the user who created the comment.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__sentByUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent by user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentByUserId",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The user id of the user who created the comment.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__signingGroupId'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupId",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The id of the signing group that can view the comment or that created the comment.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__signingGroupName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupName",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "Optional. The name of the signing group. \n\nMaximum Length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__subject'] = {
  init: function() {
    this.jsonInit({
      "message0": "subject: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "subject",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The subject of the envelope.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The unique identifier for the tab that represents the comment thread.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__text'] = {
  init: function() {
    this.jsonInit({
      "message0": "text: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "text",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The content of the comment, as UTF-8 text. \n\nMaximum Length: 500 characters.\n\n**Note**: The maximum size allowed for the entire message body is 32 KB. ",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__threadId'] = {
  init: function() {
    this.jsonInit({
      "message0": "thread id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "threadId",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The unique identifier for the comment thread.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__threadOriginatorId'] = {
  init: function() {
    this.jsonInit({
      "message0": "thread originator id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "threadOriginatorId",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The userId of the user who created the thread.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__timeStampFormatted'] = {
  init: function() {
    this.jsonInit({
      "message0": "time stamp formatted: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "timeStampFormatted",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The time the comment was created, formatted according to the format of the user who created the comment.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
Blockly.Blocks['comment__timestamp'] = {
  init: function() {
    this.jsonInit({
      "message0": "timestamp: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "timestamp",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "The time the comment was created.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['comment__visibleTo'] = {
  init: function() {
    this.jsonInit({
      "message0": "visible to %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "visibleTo",
          "check": "comment_visibleToAttribute"
        }
      ],
      "colour": 33,
      "tooltip": "The user ids of the users that the comment is visible to.",
      "helpUrl": "",
      "previousStatement": "commentAttribute",
      "nextStatement":     "commentAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['comment_visibleTo__visibleTo'] = {
  init: function() {
    this.jsonInit({
      "message0": "visible to: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "visibleTo",
          "text": ""
        }
      ],
      "colour": 33,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "comment_visibleToAttribute",
      "nextStatement":     "comment_visibleToAttribute",    
    });
  }
};



// commentThread
Blockly.Blocks['commentThread'] = {
  init: function() {
    this.jsonInit({
      "message0": "comment thread %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "commentThreadAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__commentThread Attributes
Blockly.Blocks['commentThread__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "The page number being accessed.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['commentThread__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "commentThread_tabGroupLabelsAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['commentThread_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "commentThread_tabGroupLabelsAttribute",
      "nextStatement":     "commentThread_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['commentThread__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__threadId'] = {
  init: function() {
    this.jsonInit({
      "message0": "thread id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "threadId",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "The unique identifier for the comment thread.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 36,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};
Blockly.Blocks['commentThread__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 36,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "commentThreadAttribute",
      "nextStatement":     "commentThreadAttribute",    
    });
  }
};

// company
Blockly.Blocks['company'] = {
  init: function() {
    this.jsonInit({
      "message0": "company %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "companyAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "A tab that displays the recipient's company name.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__company Attributes
Blockly.Blocks['company__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__concealValueOnDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "concealValueOnDocument",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.\n\nWhen an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.\n\nThis setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__concealValueOnDocumentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `concealValueOnDocument` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__disableAutoSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "disableAutoSize",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__disableAutoSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `disableAutoSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__maxLength'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "maxLength",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "An optional value that describes the maximum length of the property when the property is a string.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__maxLengthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `maxLength` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__originalValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "originalValue",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The initial value of the tab when it was sent to the recipient. ",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__originalValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `originalValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The page number on which the tab is located.\nFor supplemental documents, this value must be `1`.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "When set to **true**, the signer is required to fill out this tab.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).\n",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['company__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "company_tabGroupLabelsAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['company_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "company_tabGroupLabelsAttribute",
      "nextStatement":     "company_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['company__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 39,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};
Blockly.Blocks['company__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 39,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "companyAttribute",
      "nextStatement":     "companyAttribute",    
    });
  }
};

// compositeTemplate
Blockly.Blocks['compositeTemplate'] = {
  init: function() {
    this.jsonInit({
      "message0": "composite template %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "compositeTemplateAttribute"
        }
      ],
      "colour": 42,
      "tooltip": "This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope, combine templates with PDF forms, and combine templates with documents from cloud sources.\n\n[composite]: https://developers.docusign.com/esign-rest-api/guides/features/templates#composite-templates",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// envelopeDefinition__compositeTemplate Attributes
Blockly.Blocks['compositeTemplate__compositeTemplateId'] = {
  init: function() {
    this.jsonInit({
      "message0": "composite template id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "compositeTemplateId",
          "text": ""
        }
      ],
      "colour": 42,
      "tooltip": "The id of this composite template. This id is used as a reference when adding document object information. If used, the document's `content-disposition` must include the composite template ID to which the document should be added. If a composite template ID is not specified in the content-disposition, the document is applied based on the value of the `documentId` property only. If no document object is specified, the composite template inherits the first document.",
      "helpUrl": "",
      "previousStatement": "compositeTemplateAttribute",
      "nextStatement":     "compositeTemplateAttribute",    
    });
  }
};
Blockly.Blocks['compositeTemplate__pdfMetaDataTemplateSequence'] = {
  init: function() {
    this.jsonInit({
      "message0": "pdf meta data template sequence: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pdfMetaDataTemplateSequence",
          "text": ""
        }
      ],
      "colour": 42,
      "tooltip": "A number representing the sequence in which to apply the template that contains the PDF metadata.\n\nExample: `4`",
      "helpUrl": "",
      "previousStatement": "compositeTemplateAttribute",
      "nextStatement":     "compositeTemplateAttribute",    
    });
  }
};

// connectEventData
Blockly.Blocks['connectEventData'] = {
  init: function() {
    this.jsonInit({
      "message0": "connect event data %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "connectEventDataAttribute"
        }
      ],
      "colour": 45,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// eventNotification__connectEventData Attributes
Blockly.Blocks['connectEventData__format'] = {
  init: function() {
    this.jsonInit({
      "message0": "format: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "format",
          "text": ""
        }
      ],
      "colour": 45,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "connectEventDataAttribute",
      "nextStatement":     "connectEventDataAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['connectEventData__includeData'] = {
  init: function() {
    this.jsonInit({
      "message0": "include data %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "includeDatum",
          "check": "connectEventData_includeDataAttribute"
        }
      ],
      "colour": 45,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "connectEventDataAttribute",
      "nextStatement":     "connectEventDataAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['connectEventData_includeData__includeDatum'] = {
  init: function() {
    this.jsonInit({
      "message0": "include datum: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "includeDatum",
          "text": ""
        }
      ],
      "colour": 45,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "connectEventData_includeDataAttribute",
      "nextStatement":     "connectEventData_includeDataAttribute",    
    });
  }
};


Blockly.Blocks['connectEventData__version'] = {
  init: function() {
    this.jsonInit({
      "message0": "version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "version",
          "text": ""
        }
      ],
      "colour": 45,
      "tooltip": "The version of the rest API.",
      "helpUrl": "",
      "previousStatement": "connectEventDataAttribute",
      "nextStatement":     "connectEventDataAttribute",    
    });
  }
};

// createEnvelope__CreateEnvelope Attributes
Blockly.Blocks['CreateEnvelope__cdse_mode'] = {
  init: function() {
    this.jsonInit({
      "message0": "cdse mode: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "cdse_mode",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "Reserved for DocuSign.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['CreateEnvelope__change_routing_order'] = {
  init: function() {
    this.jsonInit({
      "message0": "change routing order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "change_routing_order",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When true, users can define the routing order of recipients while sending documents for signature.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['CreateEnvelope__completed_documents_only'] = {
  init: function() {
    this.jsonInit({
      "message0": "completed documents only: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "completed_documents_only",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "Reserved for DocuSign.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['CreateEnvelope__merge_roles_on_draft'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge roles on draft: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "merge_roles_on_draft",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the `status` field is set to `created`.)\n\n###### Note: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};

// date
Blockly.Blocks['date'] = {
  init: function() {
    this.jsonInit({
      "message0": "date %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "dateAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "A tab that allows the recipient to enter a date. Date tabs\nare one-line fields that allow date information to be\nentered in any format. The tooltip for this tab recommends\nentering the date as MM/DD/YYYY, but this is not enforced.\nThe format entered by the signer is retained. If you need a\nparticular date format enforced, DocuSign recommends using a\nText tab with a validation pattern and a validation message\nto enforce the format.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__date Attributes
Blockly.Blocks['date__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__concealValueOnDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "concealValueOnDocument",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.\n\nWhen an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.\n\nThis setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__concealValueOnDocumentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `concealValueOnDocument` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__disableAutoSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "disableAutoSize",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__disableAutoSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `disableAutoSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__maxLength'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "maxLength",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "An optional value that describes the maximum length of the property when the property is a string.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__maxLengthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `maxLength` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__originalValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "originalValue",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The initial value of the tab when it was sent to the recipient. ",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__originalValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `originalValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The page number on which the tab is located.\nFor supplemental documents, this value must be `1`.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__requireAll'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireAll",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "When set to **true** and shared is true, information must be entered in this field to complete the envelope. ",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__requireAllMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `requireAll` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__requireInitialOnSharedChange'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireInitialOnSharedChange",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__requireInitialOnSharedChangeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "When set to **true**, the signer is required to fill out this tab.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__senderRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderRequired",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "When set to **true**, the sender must populate the tab before an envelope can be sent using the template. \n\nThis value tab can only be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired` value of true cannot be deleted from an envelope.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__senderRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `senderRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__shared'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "shared",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "When set to **true**, this custom tab is shared.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__sharedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `shared` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).\n",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['date__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "date_tabGroupLabelsAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['date_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "date_tabGroupLabelsAttribute",
      "nextStatement":     "date_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['date__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__validationMessage'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationMessage",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The message displayed if the custom tab fails input validation (either custom of embedded).",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__validationMessageMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `validationMessage` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__validationPattern'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation pattern: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationPattern",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "A regular expression used to validate input for the tab.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__validationPatternMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation pattern metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `validationPattern` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 48,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};
Blockly.Blocks['date__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 48,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateAttribute",
      "nextStatement":     "dateAttribute",    
    });
  }
};

// dateSigned
Blockly.Blocks['dateSigned'] = {
  init: function() {
    this.jsonInit({
      "message0": "date signed %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "dateSignedAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "A tab that displays the date that the recipient signed the\ndocument.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__dateSigned Attributes
Blockly.Blocks['dateSigned__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "The page number on which the tab is located.\nFor supplemental documents, this value must be `1`.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['dateSigned__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "dateSigned_tabGroupLabelsAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['dateSigned_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "dateSigned_tabGroupLabelsAttribute",
      "nextStatement":     "dateSigned_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['dateSigned__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 51,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};
Blockly.Blocks['dateSigned__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 51,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "dateSignedAttribute",
      "nextStatement":     "dateSignedAttribute",    
    });
  }
};

// dateStampProperties
Blockly.Blocks['dateStampProperties'] = {
  init: function() {
    this.jsonInit({
      "message0": "date stamp properties %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "dateStampPropertiesAttribute"
        }
      ],
      "colour": 54,
      "tooltip": "Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.\n\nThis property contains the following information about the central rectangle:\n\n- `DateAreaX`: The X axis position of the top-left corner.\n- `DateAreaY`: The Y axis position of the top-left corner.\n- `DateAreaWidth`: The width of the rectangle.\n- `DateAreaHeight`: The height of the rectangle.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// stamp__dateStampProperties Attributes
Blockly.Blocks['dateStampProperties__dateAreaHeight'] = {
  init: function() {
    this.jsonInit({
      "message0": "date area height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "dateAreaHeight",
          "text": ""
        }
      ],
      "colour": 54,
      "tooltip": "The height of the rectangle.",
      "helpUrl": "",
      "previousStatement": "dateStampPropertiesAttribute",
      "nextStatement":     "dateStampPropertiesAttribute",    
    });
  }
};
Blockly.Blocks['dateStampProperties__dateAreaWidth'] = {
  init: function() {
    this.jsonInit({
      "message0": "date area width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "dateAreaWidth",
          "text": ""
        }
      ],
      "colour": 54,
      "tooltip": "The width of the rectangle.",
      "helpUrl": "",
      "previousStatement": "dateStampPropertiesAttribute",
      "nextStatement":     "dateStampPropertiesAttribute",    
    });
  }
};
Blockly.Blocks['dateStampProperties__dateAreaX'] = {
  init: function() {
    this.jsonInit({
      "message0": "date area x: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "dateAreaX",
          "text": ""
        }
      ],
      "colour": 54,
      "tooltip": "The X axis position of the top-left corner.",
      "helpUrl": "",
      "previousStatement": "dateStampPropertiesAttribute",
      "nextStatement":     "dateStampPropertiesAttribute",    
    });
  }
};
Blockly.Blocks['dateStampProperties__dateAreaY'] = {
  init: function() {
    this.jsonInit({
      "message0": "date area y: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "dateAreaY",
          "text": ""
        }
      ],
      "colour": 54,
      "tooltip": "The Y axis position of the top-left corner.",
      "helpUrl": "",
      "previousStatement": "dateStampPropertiesAttribute",
      "nextStatement":     "dateStampPropertiesAttribute",    
    });
  }
};

// decline
Blockly.Blocks['decline'] = {
  init: function() {
    this.jsonInit({
      "message0": "decline %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "declineAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "A tab that allows the recipient the option of declining an\nenvelope. If the recipient clicks the tab during the signing\nprocess, the envelope is voided.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__decline Attributes
Blockly.Blocks['decline__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__buttonText'] = {
  init: function() {
    this.jsonInit({
      "message0": "button text: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "buttonText",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": " Specifies the decline text displayed in the tab.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__buttonTextMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "button text metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `buttonText` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__declineReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "decline reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declineReason",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "The reason the recipient declined the document.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__declineReasonMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "decline reason metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `declineReason` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "The page number on which the tab is located.\nFor supplemental documents, this value must be `1`.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['decline__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "decline_tabGroupLabelsAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['decline_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "decline_tabGroupLabelsAttribute",
      "nextStatement":     "decline_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['decline__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 57,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};
Blockly.Blocks['decline__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 57,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "declineAttribute",
      "nextStatement":     "declineAttribute",    
    });
  }
};

// dobInformationInput
Blockly.Blocks['dobInformationInput'] = {
  init: function() {
    this.jsonInit({
      "message0": "dob information input %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "dobInformationInputAttribute"
        }
      ],
      "colour": 60,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// idCheckInformationInput__dobInformationInput Attributes
Blockly.Blocks['dobInformationInput__dateOfBirth'] = {
  init: function() {
    this.jsonInit({
      "message0": "date of birth: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "dateOfBirth",
          "text": ""
        }
      ],
      "colour": 60,
      "tooltip": "Specifies the recipient's date, month, and year of birth.",
      "helpUrl": "",
      "previousStatement": "dobInformationInputAttribute",
      "nextStatement":     "dobInformationInputAttribute",    
    });
  }
};
Blockly.Blocks['dobInformationInput__displayLevelCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "display level code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "displayLevelCode",
          "text": ""
        }
      ],
      "colour": 60,
      "tooltip": "Specifies the display level for the recipient. Valid values are:\n* `ReadOnly`\n* `Editable`\n* `DoNotDisplay`",
      "helpUrl": "",
      "previousStatement": "dobInformationInputAttribute",
      "nextStatement":     "dobInformationInputAttribute",    
    });
  }
};
Blockly.Blocks['dobInformationInput__receiveInResponse'] = {
  init: function() {
    this.jsonInit({
      "message0": "receive in response: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "receiveInResponse",
          "text": ""
        }
      ],
      "colour": 60,
      "tooltip": "A Boolean value that specifies whether the information must be returned in the response.",
      "helpUrl": "",
      "previousStatement": "dobInformationInputAttribute",
      "nextStatement":     "dobInformationInputAttribute",    
    });
  }
};

// document
Blockly.Blocks['document'] = {
  init: function() {
    this.jsonInit({
      "message0": "document %1 Filename: %2 %3",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_dummy",
          "name": "INPUT"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "documentAttribute"
        }
      ],
      "extensions": ["document_dropdown_extension"],
      "colour": 63,
      "tooltip": "A document object.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// compositeTemplate__document Attributes
Blockly.Blocks['document__applyAnchorTabs'] = {
  init: function() {
    this.jsonInit({
      "message0": "apply anchor tabs: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "applyAnchorTabs",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__display'] = {
  init: function() {
    this.jsonInit({
      "message0": "display: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "display",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "This string sets the display and behavior properties of\nthe document during signing. The possible values are:\n\n* `modal`<br>\n  The document is shown as a supplement action strip\n  and can be viewed, downloaded, or printed in a modal window.\n  This is the recommended value for supplemental documents. \n\n* `download`<br>\n  The document is shown as a supplement action strip\n  and can be viewed, downloaded, or printed in a new browser window. \n\n* `inline`<br>\n  The document is shown in the normal signing window.\n  This value is not used with supplemental documents,\n  but is the default value for all other documents.\n",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__documentBase64'] = {
  init: function() {
    this.jsonInit({
      "message0": "document base64: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentBase64",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "The document's bytes. This field can be used to include a base64 version of the document bytes within an envelope definition instead of sending the document using a multi-part HTTP request. The maximum document size is smaller if this field is used due to the overhead of the base64 encoding.",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "Specifies the document ID of this document. This value is used by tabs to determine which document they appear in.",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__encryptedWithKeyManager'] = {
  init: function() {
    this.jsonInit({
      "message0": "encrypted with key manager: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "encryptedWithKeyManager",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "When set to **true**, the document is been already encrypted by the sender for use with the DocuSign Key Manager Security Appliance.\n ",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__fileExtension'] = {
  init: function() {
    this.jsonInit({
      "message0": "file extension: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fileExtension",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "The file extension type of the document. Non-PDF documents are converted to PDF.\n\nIf the document is not a PDF, `fileExtension` is required.\n\nIf you try to upload a non-PDF document without a `fileExtension`, you will receive an \"unable to load document\" error message.  \n ",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__fileFormatHint'] = {
  init: function() {
    this.jsonInit({
      "message0": "file format hint: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fileFormatHint",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__includeInDownload'] = {
  init: function() {
    this.jsonInit({
      "message0": "include in download: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "includeInDownload",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "When set to **true**,\nthe document is included in the combined document download (`documentsCombinedUri`). \nThe default value is **true**.\n",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "The name of the document.",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__order'] = {
  init: function() {
    this.jsonInit({
      "message0": "order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "order",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "(Optional) The order in which to sort the results.\n\nValid values are: \n\n\n* `asc`: Ascending order.\n* `desc`: Descending order. ",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__pages'] = {
  init: function() {
    this.jsonInit({
      "message0": "pages: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pages",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "An array of page objects.",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__password'] = {
  init: function() {
    this.jsonInit({
      "message0": "password: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "password",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "The user's encrypted password hash.",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__pdfFormFieldOption'] = {
  init: function() {
    this.jsonInit({
      "message0": "pdf form field option: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pdfFormFieldOption",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__remoteUrl'] = {
  init: function() {
    this.jsonInit({
      "message0": "remote url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "remoteUrl",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "The file id from the cloud storage service where the document is located. This information is returned using [CloudStorage::listFolders](https://developers.docusign.com/esign-rest-api/reference/CloudStorage/CloudStorage/listFolders) or [CloudStorage::list](https://developers.docusign.com/esign-rest-api/reference/CloudStorage/CloudStorage/list).\n",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__signerMustAcknowledge'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer must acknowledge: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signerMustAcknowledge",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "Sets how the signer interacts with the supplemental document.\nThe possible values are: \n\n*	`no_interaction`<br>\n  No recipient action is required. \n\n*	`view`<br>\n  The recipient is required to view the document. \n\n*	`accept`<br>\n  The recipient is required to accept the document by selecting accept during signing, but is not required to view the document. \n\n*	`view_accept`<br>\n  The recipient is required to view and accept the document.  \n\n",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__signerMustAcknowledgeUseAccountDefault'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer must acknowledge use account default: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signerMustAcknowledgeUseAccountDefault",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__transformPdfFields'] = {
  init: function() {
    this.jsonInit({
      "message0": "transform pdf fields: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "transformPdfFields",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "When set to **true**, PDF form field data is transformed into document tab values when the PDF form field name matches the DocuSign custom tab tabLabel. The resulting PDF form data is also returned in the PDF meta data when requesting the document PDF.\n",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};
Blockly.Blocks['document__uri'] = {
  init: function() {
    this.jsonInit({
      "message0": "uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "uri",
          "text": ""
        }
      ],
      "colour": 63,
      "tooltip": "A URI containing the user ID.",
      "helpUrl": "",
      "previousStatement": "documentAttribute",
      "nextStatement":     "documentAttribute",    
    });
  }
};

// documentHtmlCollapsibleDisplaySettings
Blockly.Blocks['documentHtmlCollapsibleDisplaySettings'] = {
  init: function() {
    this.jsonInit({
      "message0": "document html collapsible display settings %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "documentHtmlCollapsibleDisplaySettingsAttribute"
        }
      ],
      "colour": 66,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// documentHtmlDisplaySettings__documentHtmlCollapsibleDisplaySettings Attributes
Blockly.Blocks['documentHtmlCollapsibleDisplaySettings__arrowClosed'] = {
  init: function() {
    this.jsonInit({
      "message0": "arrow closed: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "arrowClosed",
          "text": ""
        }
      ],
      "colour": 66,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "documentHtmlCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlCollapsibleDisplaySettings__arrowColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "arrow color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "arrowColor",
          "text": ""
        }
      ],
      "colour": 66,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "documentHtmlCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlCollapsibleDisplaySettings__arrowLocation'] = {
  init: function() {
    this.jsonInit({
      "message0": "arrow location: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "arrowLocation",
          "text": ""
        }
      ],
      "colour": 66,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "documentHtmlCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlCollapsibleDisplaySettings__arrowOpen'] = {
  init: function() {
    this.jsonInit({
      "message0": "arrow open: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "arrowOpen",
          "text": ""
        }
      ],
      "colour": 66,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "documentHtmlCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlCollapsibleDisplaySettings__arrowSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "arrow size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "arrowSize",
          "text": ""
        }
      ],
      "colour": 66,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "documentHtmlCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlCollapsibleDisplaySettings__arrowStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "arrow style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "arrowStyle",
          "text": ""
        }
      ],
      "colour": 66,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "documentHtmlCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlCollapsibleDisplaySettings__containerStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "container style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "containerStyle",
          "text": ""
        }
      ],
      "colour": 66,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "documentHtmlCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlCollapsibleDisplaySettings__labelStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "label style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "labelStyle",
          "text": ""
        }
      ],
      "colour": 66,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "documentHtmlCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlCollapsibleDisplaySettings__onlyArrowIsClickable'] = {
  init: function() {
    this.jsonInit({
      "message0": "only arrow is clickable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "onlyArrowIsClickable",
          "text": ""
        }
      ],
      "colour": 66,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "documentHtmlCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlCollapsibleDisplaySettings__outerLabelAndArrowStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "outer label and arrow style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "outerLabelAndArrowStyle",
          "text": ""
        }
      ],
      "colour": 66,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "documentHtmlCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlCollapsibleDisplaySettingsAttribute",    
    });
  }
};

// documentHtmlDefinition
Blockly.Blocks['documentHtmlDefinition'] = {
  init: function() {
    this.jsonInit({
      "message0": "document html definition %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "documentHtmlDefinitionAttribute"
        }
      ],
      "colour": 69,
      "tooltip": "Holds the properties that define how to generate the responsive-formatted HTML for the document.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// document__documentHtmlDefinition Attributes
Blockly.Blocks['documentHtmlDefinition__displayAnchorPrefix'] = {
  init: function() {
    this.jsonInit({
      "message0": "display anchor prefix: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "displayAnchorPrefix",
          "text": ""
        }
      ],
      "colour": 69,
      "tooltip": "Contains text that all display anchors must start with. Using at least 4 characters will improve anchor processing performance.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDefinitionAttribute",
      "nextStatement":     "documentHtmlDefinitionAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDefinition__displayOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "display order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "displayOrder",
          "text": ""
        }
      ],
      "colour": 69,
      "tooltip": "The position on the page where the display section appears.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDefinitionAttribute",
      "nextStatement":     "documentHtmlDefinitionAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDefinition__displayPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "display page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "displayPageNumber",
          "text": ""
        }
      ],
      "colour": 69,
      "tooltip": "The number of the page on which the display section appears.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDefinitionAttribute",
      "nextStatement":     "documentHtmlDefinitionAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDefinition__documentGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "document guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentGuid",
          "text": ""
        }
      ],
      "colour": 69,
      "tooltip": "The GUID of the document.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDefinitionAttribute",
      "nextStatement":     "documentHtmlDefinitionAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDefinition__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 69,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDefinitionAttribute",
      "nextStatement":     "documentHtmlDefinitionAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDefinition__headerLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "header label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "headerLabel",
          "text": ""
        }
      ],
      "colour": 69,
      "tooltip": "Header text or an HTML tag to place above the responsive HTML block.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDefinitionAttribute",
      "nextStatement":     "documentHtmlDefinitionAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDefinition__maxScreenWidth'] = {
  init: function() {
    this.jsonInit({
      "message0": "max screen width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "maxScreenWidth",
          "text": ""
        }
      ],
      "colour": 69,
      "tooltip": "If set, the responsive HTML version of the signing document will only display on screens with the specified pixel width or less. If the screen is larger than the value that you specify, the default PDF version of the content displays instead.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDefinitionAttribute",
      "nextStatement":     "documentHtmlDefinitionAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDefinition__removeEmptyTags'] = {
  init: function() {
    this.jsonInit({
      "message0": "remove empty tags: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "removeEmptyTags",
          "text": ""
        }
      ],
      "colour": 69,
      "tooltip": "Holds a comma-separated list of HTML tags to remove if they have no text within their node (including child nodes).",
      "helpUrl": "",
      "previousStatement": "documentHtmlDefinitionAttribute",
      "nextStatement":     "documentHtmlDefinitionAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDefinition__showMobileOptimizedToggle'] = {
  init: function() {
    this.jsonInit({
      "message0": "show mobile optimized toggle: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "showMobileOptimizedToggle",
          "text": ""
        }
      ],
      "colour": 69,
      "tooltip": "When set to **true**, the **Mobile-Friendly** toggle displays at the top of the screen on the user's mobile device. This toggle enables the user to switch between the mobile-friendly and PDF versions of a document. For example, the recipient can use this toggle to review the document using the PDF view before they finish signing.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDefinitionAttribute",
      "nextStatement":     "documentHtmlDefinitionAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDefinition__source'] = {
  init: function() {
    this.jsonInit({
      "message0": "source: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "source",
          "text": ""
        }
      ],
      "colour": 69,
      "tooltip": "Specifies the type of responsive signing that will be used with the document. Valid strings are:\n\n- `document`: The HTML signing page will be generated from the provided document. For details, see [Converting a PDF to a signable HTML document](https://developers.docusign.com/esign-rest-api/guides/responsive-signing/converting-pdf).\n- `html`: The HTML signing page will be passed directly. For details, see [Converting a PDF to a signable HTML document](https://developers.docusign.com/esign-rest-api/guides/responsive-signing/converting-pdf).",
      "helpUrl": "",
      "previousStatement": "documentHtmlDefinitionAttribute",
      "nextStatement":     "documentHtmlDefinitionAttribute",    
    });
  }
};

// documentHtmlDisplayAnchor
Blockly.Blocks['documentHtmlDisplayAnchor'] = {
  init: function() {
    this.jsonInit({
      "message0": "document html display anchor %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "documentHtmlDisplayAnchorAttribute"
        }
      ],
      "colour": 72,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// documentHtmlDefinition__documentHtmlDisplayAnchor Attributes
Blockly.Blocks['documentHtmlDisplayAnchor__caseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "caseSensitive",
          "text": ""
        }
      ],
      "colour": 72,
      "tooltip": "When set to **true**, the start or end anchor strings must match the strings specified by the start and end anchor settings in case as well as in content.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplayAnchorAttribute",
      "nextStatement":     "documentHtmlDisplayAnchorAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDisplayAnchor__endAnchor'] = {
  init: function() {
    this.jsonInit({
      "message0": "end anchor: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "endAnchor",
          "text": ""
        }
      ],
      "colour": 72,
      "tooltip": "Specifies the end of the area in the HTML where the display settings will be applied. If you do not specify an end anchor, the end of the document will be used by default.\n\n**Note**: A start anchor, an end anchor, or both are required.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplayAnchorAttribute",
      "nextStatement":     "documentHtmlDisplayAnchorAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDisplayAnchor__removeEndAnchor'] = {
  init: function() {
    this.jsonInit({
      "message0": "remove end anchor: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "removeEndAnchor",
          "text": ""
        }
      ],
      "colour": 72,
      "tooltip": "When **true**, removes the end anchor string for the Smart Section from the HTML, preventing it from displaying.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplayAnchorAttribute",
      "nextStatement":     "documentHtmlDisplayAnchorAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDisplayAnchor__removeStartAnchor'] = {
  init: function() {
    this.jsonInit({
      "message0": "remove start anchor: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "removeStartAnchor",
          "text": ""
        }
      ],
      "colour": 72,
      "tooltip": "When **true**, removes the start anchor string for the Smart Section from the HTML, preventing it from displaying.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplayAnchorAttribute",
      "nextStatement":     "documentHtmlDisplayAnchorAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDisplayAnchor__startAnchor'] = {
  init: function() {
    this.jsonInit({
      "message0": "start anchor: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "startAnchor",
          "text": ""
        }
      ],
      "colour": 72,
      "tooltip": "Specifies the beginning of the area in the HTML where the display settings will be applied. If you do not specify a start anchor, the beginning of the document will be used by default.\n\n**Note**: A start anchor, an end anchor, or both are required.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplayAnchorAttribute",
      "nextStatement":     "documentHtmlDisplayAnchorAttribute",    
    });
  }
};

// documentHtmlDisplaySettings
Blockly.Blocks['documentHtmlDisplaySettings'] = {
  init: function() {
    this.jsonInit({
      "message0": "document html display settings %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "documentHtmlDisplaySettingsAttribute"
        }
      ],
      "colour": 75,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// documentHtmlDisplayAnchor__documentHtmlDisplaySettings Attributes
Blockly.Blocks['documentHtmlDisplaySettings__cellStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "cell style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "cellStyle",
          "text": ""
        }
      ],
      "colour": 75,
      "tooltip": "Specifies the valid CSS-formatted styles to use on responsive table cells. Only valid in display sections of `responsive_table` or `responsive_table_single_column` types.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDisplaySettings__display'] = {
  init: function() {
    this.jsonInit({
      "message0": "display: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "display",
          "text": ""
        }
      ],
      "colour": 75,
      "tooltip": "This string sets the display and behavior properties of\nthe document during signing. The possible values are:\n\n* `modal`<br>\n  The document is shown as a supplement action strip\n  and can be viewed, downloaded, or printed in a modal window.\n  This is the recommended value for supplemental documents. \n\n* `download`<br>\n  The document is shown as a supplement action strip\n  and can be viewed, downloaded, or printed in a new browser window. \n\n* `inline`<br>\n  The document is shown in the normal signing window.\n  This value is not used with supplemental documents,\n  but is the default value for all other documents.\n",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDisplaySettings__displayLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "display label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "displayLabel",
          "text": ""
        }
      ],
      "colour": 75,
      "tooltip": "The label for the display section.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDisplaySettings__displayOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "display order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "displayOrder",
          "text": ""
        }
      ],
      "colour": 75,
      "tooltip": "The position on the page where the display section appears.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDisplaySettings__displayPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "display page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "displayPageNumber",
          "text": ""
        }
      ],
      "colour": 75,
      "tooltip": "The number of the page on which the display section appears.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDisplaySettings__hideLabelWhenOpened'] = {
  init: function() {
    this.jsonInit({
      "message0": "hide label when opened: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hideLabelWhenOpened",
          "text": ""
        }
      ],
      "colour": 75,
      "tooltip": "When **true**, the `displayLabel` is hidden when the display section is expanded and the display section is no longer collapsible. This property is valid only when the value of the `display` property is `collapsed`.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDisplaySettings__inlineOuterStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "inline outer style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "inlineOuterStyle",
          "text": ""
        }
      ],
      "colour": 75,
      "tooltip": "Specifies the valid CSS-formatted styles to use on inline display sections. This property is valid only when the value of the `display` property is `inline`.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDisplaySettings__labelWhenOpened'] = {
  init: function() {
    this.jsonInit({
      "message0": "label when opened: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "labelWhenOpened",
          "text": ""
        }
      ],
      "colour": 75,
      "tooltip": "The label for the display section when it is expanded from a collapsed state. This label displays only on the first opening and is only valid with the value of the `display` property is `collapsed`.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDisplaySettings__preLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "pre label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "preLabel",
          "text": ""
        }
      ],
      "colour": 75,
      "tooltip": "Enables you to add descriptive text that appears before a collapsed section or continue button.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDisplaySettings__scrollToTopWhenOpened'] = {
  init: function() {
    this.jsonInit({
      "message0": "scroll to top when opened: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "scrollToTopWhenOpened",
          "text": ""
        }
      ],
      "colour": 75,
      "tooltip": "When **true** and the section is expanded, the position of the section close is scrolled to the top of the screen. This property is only valid when the value of the `display` property is `collapsed`.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['documentHtmlDisplaySettings__tableStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "table style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tableStyle",
          "text": ""
        }
      ],
      "colour": 75,
      "tooltip": "Specifies the valid CSS-formatted styles to use on responsive tables. This property is valid only when the value of the `display` property is `responsive_table` or `responsive_table_single_column`.",
      "helpUrl": "",
      "previousStatement": "documentHtmlDisplaySettingsAttribute",
      "nextStatement":     "documentHtmlDisplaySettingsAttribute",    
    });
  }
};

// documentVisibility
Blockly.Blocks['documentVisibility'] = {
  init: function() {
    this.jsonInit({
      "message0": "document visibility %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "documentVisibilityAttribute"
        }
      ],
      "colour": 78,
      "tooltip": "This object configures a recipient's read/write access to a document.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// agent__documentVisibility Attributes
Blockly.Blocks['documentVisibility__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 78,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "documentVisibilityAttribute",
      "nextStatement":     "documentVisibilityAttribute",    
    });
  }
};
Blockly.Blocks['documentVisibility__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 78,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "documentVisibilityAttribute",
      "nextStatement":     "documentVisibilityAttribute",    
    });
  }
};
Blockly.Blocks['documentVisibility__rights'] = {
  init: function() {
    this.jsonInit({
      "message0": "rights: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "rights",
          "text": ""
        }
      ],
      "colour": 78,
      "tooltip": "Indicates whether the document is editable:\n\n- `editable`\n- `read_only`",
      "helpUrl": "",
      "previousStatement": "documentVisibilityAttribute",
      "nextStatement":     "documentVisibilityAttribute",    
    });
  }
};
Blockly.Blocks['documentVisibility__visible'] = {
  init: function() {
    this.jsonInit({
      "message0": "visible: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "visible",
          "text": ""
        }
      ],
      "colour": 78,
      "tooltip": "When **true**, the document is visible to the recipient.",
      "helpUrl": "",
      "previousStatement": "documentVisibilityAttribute",
      "nextStatement":     "documentVisibilityAttribute",    
    });
  }
};

// draw
Blockly.Blocks['draw'] = {
  init: function() {
    this.jsonInit({
      "message0": "draw %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "drawAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__draw Attributes
Blockly.Blocks['draw__allowSignerUpload'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow signer upload: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowSignerUpload",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "The page number being accessed.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "When set to **true**, the signer is required to fill out this tab.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__shared'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "shared",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "When **true**, the tab is shared.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__sharedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `shared` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "The status of the item.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['draw__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "draw_tabGroupLabelsAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['draw_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "draw_tabGroupLabelsAttribute",
      "nextStatement":     "draw_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['draw__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__useBackgroundAsCanvas'] = {
  init: function() {
    this.jsonInit({
      "message0": "use background as canvas: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "useBackgroundAsCanvas",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 81,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};
Blockly.Blocks['draw__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 81,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "drawAttribute",
      "nextStatement":     "drawAttribute",    
    });
  }
};

// editor
Blockly.Blocks['editor'] = {
  init: function() {
    this.jsonInit({
      "message0": "editor %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "editorAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipients__editor Attributes
Blockly.Blocks['editor__accessCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessCode",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. \n\nMaximum Length: 50 characters and it must conform to the account's access code format setting.\n\nIf blank, but the signer `accessCode` property is set in the envelope, then that value is used.\n\nIf blank and the signer `accessCode` property is not set, then the access code is not required.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__accessCodeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "Metadata that indicates whether the `accessCode` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__addAccessCodeToEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "add access code to email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "addAccessCodeToEmail",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__additionalNotificationsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "additional notifications metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__allowSystemOverrideForLockedRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow system override for locked recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowSystemOverrideForLockedRecipient",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__clientUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "client user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "clientUserId",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Specifies whether the recipient is embedded or remote. \n\nIf the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.\n\nNote: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. \n\nMaximum length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__completedCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "completed count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "completedCount",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['editor__customFields'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom fields %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "customField",
          "check": "editor_customFieldsAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['editor_customFields__customField'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom field: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customField",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "editor_customFieldsAttribute",
      "nextStatement":     "editor_customFieldsAttribute",    
    });
  }
};


Blockly.Blocks['editor__declinedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedDateTime",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The date and time the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__declinedReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedReason",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The reason the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__deliveredDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivered date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveredDateTime",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The date and time that the envelope was delivered to the recipient. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__deliveryMethod'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveryMethod",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__deliveryMethodMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__designatorId'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorId",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__designatorIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorIdGuid",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "email",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The recipient's email address. Notification of the document to sign is sent to this email address. \n\nMaximum length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__emailMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "email metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "Metadata that indicates whether the `email` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__embeddedRecipientStartURL'] = {
  init: function() {
    this.jsonInit({
      "message0": "embedded recipient start url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "embeddedRecipientStartURL",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. \n\nIf set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.\n\nIt is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.\n\nIf the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` ",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__faxNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "faxNumber",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__faxNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__firstName'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "firstName",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The recipient's first name. \n\nMaximum Length: 50 characters.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__firstNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "Metadata that indicates whether the `firstame` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__fullName'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fullName",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__fullNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__idCheckConfigurationName'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "idCheckConfigurationName",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.\n- `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.\n- `ID Check $`: The  recipient must answer detailed security questions. \n\n**Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__idCheckConfigurationNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__inheritEmailNotificationConfiguration'] = {
  init: function() {
    this.jsonInit({
      "message0": "inherit email notification configuration: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "inheritEmailNotificationConfiguration",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. ",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__lastName'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lastName",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The recipient's last name.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__lastNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "Metadata that indicates whether the `lastName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__lockedRecipientPhoneAuthEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient phone auth editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientPhoneAuthEditable",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__lockedRecipientSmsEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient sms editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientSmsEditable",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The full legal name of the recipient. Maximum Length: 100 characters.\n\n**Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__note'] = {
  init: function() {
    this.jsonInit({
      "message0": "note: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "note",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "A note sent to the recipient in the signing email.\nThis note is unique to this recipient.\nIn the user interface,\nit appears near the upper left corner\nof the document\non the signing screen.\n\nMaximum Length: 1000 characters.\n",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__noteMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "note metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "Metadata that indicates whether the `note` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the document.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__recipientType'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientType",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The recipient type, as specified by the following values:\n- `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.\n- `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.\n- `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.\n- `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.\n- `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.\n- `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.\n- `seal`: Electronic seal recipients represent legal entities.\n- `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.\n- `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__recipientTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "Metadata that indicates whether the `recipientType` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__requireIdLookup'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireIdLookup",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. ",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__requireIdLookupMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "Metadata that indicates whether the `requireIdLookup` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__roleName'] = {
  init: function() {
    this.jsonInit({
      "message0": "role name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "roleName",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__routingOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "routingOrder",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Specifies the routing order of the recipient in the envelope. ",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__routingOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "Metadata that indicates whether the `routingOrder` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__sentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentDateTime",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The UTC DateTime when the envelope was sent. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__signedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "signed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signedDateTime",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__signingGroupId'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupId",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\n**Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. ",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__signingGroupIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 84,
      "tooltip": "Metadata that indicates whether the `signingGroupId` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__signingGroupName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupName",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "Optional. The name of the signing group. \n\nMaximum Length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The recipient's status. Read only. \n\nPossible values:\n\n- `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.\n- `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.\n- `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).\n- `declined`: The recipient declined to sign the document(s) in the envelope.\n- `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.\n- `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.\n- `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.\n- `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.\n",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__statusCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "status code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "statusCode",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The code associated with the recipient's status. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__suppressEmails'] = {
  init: function() {
    this.jsonInit({
      "message0": "suppress emails: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "suppressEmails",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__totalTabCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "total tab count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "totalTabCount",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The total number of tabs in the documents. Read only.",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};
Blockly.Blocks['editor__userId'] = {
  init: function() {
    this.jsonInit({
      "message0": "user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userId",
          "text": ""
        }
      ],
      "colour": 84,
      "tooltip": "The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.\n",
      "helpUrl": "",
      "previousStatement": "editorAttribute",
      "nextStatement":     "editorAttribute",    
    });
  }
};

// email
Blockly.Blocks['email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "emailAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "A tab that allows the recipient to enter an email address.\nThis is a one-line field that checks that a valid email\naddress is entered. It uses the same parameters as a Text\ntab, with the validation message and pattern set for email\ninformation.\n\nWhen getting information that includes\nthis tab type, the original value of the tab when the\nassociated envelope was sent is included in the response.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__email Attributes
Blockly.Blocks['email__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__concealValueOnDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "concealValueOnDocument",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.\n\nWhen an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.\n\nThis setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__concealValueOnDocumentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `concealValueOnDocument` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__disableAutoSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "disableAutoSize",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__disableAutoSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `disableAutoSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__maxLength'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "maxLength",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "An optional value that describes the maximum length of the property when the property is a string.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__maxLengthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `maxLength` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__originalValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "originalValue",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The initial value of the tab when it was sent to the recipient. ",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__originalValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `originalValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The page number on which the tab is located.\nFor supplemental documents, this value must be `1`.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__requireAll'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireAll",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "When set to **true** and shared is true, information must be entered in this field to complete the envelope. ",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__requireAllMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `requireAll` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__requireInitialOnSharedChange'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireInitialOnSharedChange",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__requireInitialOnSharedChangeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "When set to **true**, the signer is required to fill out this tab.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__senderRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderRequired",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "When set to **true**, the sender must populate the tab before an envelope can be sent using the template. \n\nThis value tab can only be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired` value of true cannot be deleted from an envelope.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__senderRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `senderRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__shared'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "shared",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "When set to **true**, this tab is shared.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__sharedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `shared` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).\n",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['email__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "email_tabGroupLabelsAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['email_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "email_tabGroupLabelsAttribute",
      "nextStatement":     "email_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['email__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__validationMessage'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationMessage",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The message displayed if the custom tab fails input validation (either custom of embedded).",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__validationMessageMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `validationMessage` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__validationPattern'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation pattern: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationPattern",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "A regular expression used to validate input for the tab.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__validationPatternMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation pattern metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `validationPattern` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 87,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};
Blockly.Blocks['email__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 87,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAttribute",
      "nextStatement":     "emailAttribute",    
    });
  }
};

// emailAddress
Blockly.Blocks['emailAddress'] = {
  init: function() {
    this.jsonInit({
      "message0": "email address %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "emailAddressAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "A tab that displays the recipient's email as entered in the\nrecipient information.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__emailAddress Attributes
Blockly.Blocks['emailAddress__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This property can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "The page number on which the tab is located.\nFor supplemental documents, this value must be `1`.\n",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['emailAddress__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "emailAddress_tabGroupLabelsAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['emailAddress_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "emailAddress_tabGroupLabelsAttribute",
      "nextStatement":     "emailAddress_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['emailAddress__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 90,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};
Blockly.Blocks['emailAddress__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 90,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "emailAddressAttribute",
      "nextStatement":     "emailAddressAttribute",    
    });
  }
};

// emailSettings
Blockly.Blocks['emailSettings'] = {
  init: function() {
    this.jsonInit({
      "message0": "email settings %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "emailSettingsAttribute"
        }
      ],
      "colour": 93,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// envelope__emailSettings Attributes
Blockly.Blocks['emailSettings__replyEmailAddressOverride'] = {
  init: function() {
    this.jsonInit({
      "message0": "reply email address override: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "replyEmailAddressOverride",
          "text": ""
        }
      ],
      "colour": 93,
      "tooltip": "The Reply To email address to use for email replies, instead of the one that is configured at the account level. DocuSign verifies that the email address is in a correct format, but does not verify that it is active. Maximum Length: 100 characters.",
      "helpUrl": "",
      "previousStatement": "emailSettingsAttribute",
      "nextStatement":     "emailSettingsAttribute",    
    });
  }
};
Blockly.Blocks['emailSettings__replyEmailNameOverride'] = {
  init: function() {
    this.jsonInit({
      "message0": "reply email name override: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "replyEmailNameOverride",
          "text": ""
        }
      ],
      "colour": 93,
      "tooltip": "The name to associate with the Reply To email address, instead of the name that is configured at the account level. Maximum Length: 100 characters.",
      "helpUrl": "",
      "previousStatement": "emailSettingsAttribute",
      "nextStatement":     "emailSettingsAttribute",    
    });
  }
};

// envelope
Blockly.Blocks['envelope'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "envelopeAttribute"
        }
      ],
      "colour": 96,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// inlineTemplate__envelope Attributes
Blockly.Blocks['envelope__accessControlListBase64'] = {
  init: function() {
    this.jsonInit({
      "message0": "access control list base64: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessControlListBase64",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__allowComments'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow comments: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowComments",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, users can add comments to the documents in the envelope. For example, if a signer has a question about the text in the document, they can add a comment to the document.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__allowMarkup'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow markup: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowMarkup",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, the Document Markup feature is enabled.\n\n**Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__allowReassign'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow reassign: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowReassign",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When **true**, the recipient can redirect an envelope to a more appropriate recipient.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__allowViewHistory'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow view history: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowViewHistory",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, recipients can view the history of the envelope.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__anySigner'] = {
  init: function() {
    this.jsonInit({
      "message0": "any signer: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anySigner",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "Deprecated. This feature has been replaced by signing groups.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__asynchronous'] = {
  init: function() {
    this.jsonInit({
      "message0": "asynchronous: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "asynchronous",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When **true**, the envelope is queued for processing and the value of the `status` property is set to `Processing`. Additionally, GET status calls return `Processing` until completed. \n\n\n**Note**: A `transactionId` is required for this call to work correctly. When the envelope is created, the status is `Processing` and an `envelopeId` is not returned in the response. To get the `envelopeId`, use a GET envelope query by using the [transactionId](https://developers.docusign.com/esign-rest-api/reference/Envelopes/Envelopes/create/#envelopeDefinition) or by checking the Connect notification.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__attachmentsUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "attachments uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "attachmentsUri",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "Contains a URL for retrieving the attachments that are associated with the envelope.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__authoritativeCopy'] = {
  init: function() {
    this.jsonInit({
      "message0": "authoritative copy: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "authoritativeCopy",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When **true**, marks all of the documents in the envelope as authoritative copies.\n\n**Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__authoritativeCopyDefault'] = {
  init: function() {
    this.jsonInit({
      "message0": "authoritative copy default: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "authoritativeCopyDefault",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.\nIf this property is not set, each document defaults to the envelope's `authoritativeCopy`.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__autoNavigation'] = {
  init: function() {
    this.jsonInit({
      "message0": "auto navigation: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "autoNavigation",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, autonavigation is set for the recipient.\n",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__brandId'] = {
  init: function() {
    this.jsonInit({
      "message0": "brand id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "brandId",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The id of the brand.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__brandLock'] = {
  init: function() {
    this.jsonInit({
      "message0": "brand lock: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "brandLock",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When **true**, the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__certificateUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "certificate uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "certificateUri",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The URI for retrieving certificate information.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__completedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "completed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "completedDateTime",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "Specifies the date and time this item was completed.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__copyRecipientData'] = {
  init: function() {
    this.jsonInit({
      "message0": "copy recipient data: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "copyRecipientData",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__createdDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "created date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "createdDateTime",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The UTC DateTime when the item was created.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__customFieldsUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom fields uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customFieldsUri",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The URI for retrieving custom fields.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__declinedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedDateTime",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The date and time the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__deletedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "deleted date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deletedDateTime",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__deliveredDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivered date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveredDateTime",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The date and time that the envelope was delivered to the recipient. Read only.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__disableResponsiveDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable responsive document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "disableResponsiveDocument",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, responsive documents are disabled for the envelope.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__documentsCombinedUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "documents combined uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentsCombinedUri",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The URI for retrieving all of the documents associated with the envelope as a single PDF file.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__documentsUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "documents uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentsUri",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The URI for retrieving all of the documents associated with the envelope as separate files.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__emailBlurb'] = {
  init: function() {
    this.jsonInit({
      "message0": "email blurb: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "emailBlurb",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "This is the same as the email body. If the sender enters an email blurb, it is included in the email body for all envelope recipients.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__emailSubject'] = {
  init: function() {
    this.jsonInit({
      "message0": "email subject: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "emailSubject",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The subject line of the email message that is sent to all recipients.\n\nFor information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).\n",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__enableWetSign'] = {
  init: function() {
    this.jsonInit({
      "message0": "enable wet sign: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "enableWetSign",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, the signer is allowed to print the document and sign it on paper.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__enforceSignerVisibility'] = {
  init: function() {
    this.jsonInit({
      "message0": "enforce signer visibility: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "enforceSignerVisibility",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.\n\n**Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.\n\n[docviz]: /esign/restapi/Envelopes/EnvelopeDocumentVisibility",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__envelopeId'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "envelopeId",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__envelopeIdStamping'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope id stamping: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "envelopeIdStamping",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.\nAfter a document or attachment is stamped with an Envelope ID,\nthe ID is seen by all recipients\nand becomes a permanent part of the document\nand cannot be removed.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__envelopeLocation'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope location: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "envelopeLocation",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__envelopeUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "envelopeUri",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The URI for retrieving the envelope or envelopes.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__expireAfter'] = {
  init: function() {
    this.jsonInit({
      "message0": "expire after: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "expireAfter",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "An integer specifying the number of days that a sent envelope remains active before it expires. A negative number in a response indicates that the envelope has already expired.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__expireDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "expire date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "expireDateTime",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The date and time the envelope is set to expire.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__expireEnabled'] = {
  init: function() {
    this.jsonInit({
      "message0": "expire enabled: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "expireEnabled",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`). Set  `expireAfter` to set the number of days until an envelope expires. When **false**, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__externalEnvelopeId'] = {
  init: function() {
    this.jsonInit({
      "message0": "external envelope id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "externalEnvelopeId",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "May contain an external identifier for the envelope.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__hasComments'] = {
  init: function() {
    this.jsonInit({
      "message0": "has comments: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hasComments",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, indicates that users have added comments to the envelope.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__hasFormDataChanged'] = {
  init: function() {
    this.jsonInit({
      "message0": "has form data changed: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hasFormDataChanged",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, indicates that the data collected through form fields on a document has changed.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__hasWavFile'] = {
  init: function() {
    this.jsonInit({
      "message0": "has wav file: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hasWavFile",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, indicates that a .wav file used for voice authentication is included in the envelope. ",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__holder'] = {
  init: function() {
    this.jsonInit({
      "message0": "holder: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "holder",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__initialSentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "initial sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "initialSentDateTime",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The date and time the envelope was initially sent.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__isDynamicEnvelope'] = {
  init: function() {
    this.jsonInit({
      "message0": "is dynamic envelope: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "isDynamicEnvelope",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, indicates that the envelope is a dynamic envelope.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__isSignatureProviderEnvelope'] = {
  init: function() {
    this.jsonInit({
      "message0": "is signature provider envelope: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "isSignatureProviderEnvelope",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, indicates that the envelope is a signature-provided envelope.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__is21CFRPart11'] = {
  init: function() {
    this.jsonInit({
      "message0": "is21 cfr part11: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "is21CFRPart11",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__lastModifiedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "last modified date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lastModifiedDateTime",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The date and time that the item was last modified.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__location'] = {
  init: function() {
    this.jsonInit({
      "message0": "location: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "location",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__messageLock'] = {
  init: function() {
    this.jsonInit({
      "message0": "message lock: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "messageLock",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope. \n\nAdditionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes. \n\nHowever, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__notificationUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "notification uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "notificationUri",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The URI for retrieving notifications.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__purgeCompletedDate'] = {
  init: function() {
    this.jsonInit({
      "message0": "purge completed date: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "purgeCompletedDate",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The date that a purge was completed.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__purgeRequestDate'] = {
  init: function() {
    this.jsonInit({
      "message0": "purge request date: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "purgeRequestDate",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The date that a purge was requested.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__purgeState'] = {
  init: function() {
    this.jsonInit({
      "message0": "purge state: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "purgeState",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "Shows the current purge state for the envelope. The possible values are:\n\n* `unpurged`: There has been no successful request to purge documents.\n* `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.\n* `documents_dequeued`: The envelope documents have been taken out of the purge queue.\n* `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.\n* `documents_purged`: The envelope documents have been successfully purged.\n* `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.\n\n",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__recipientsLock'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipients lock: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientsLock",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__recipientsUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipients uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientsUri",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "Contains a URI for an endpoint that you can use to retrieve the recipients.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__sentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentDateTime",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The UTC DateTime when the envelope was sent. Read only.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__signerCanSignOnMobile'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer can sign on mobile: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signerCanSignOnMobile",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, recipients can sign on a mobile device.\n\n**Note**: Only Admin users can change this setting.\n",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__signingLocation'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing location: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingLocation",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "Indicates the envelope status. Valid values are:\n\n* `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.\n* `created`: The envelope is created as a draft. It can be modified and sent later.\n* `declined`: The envelope has been declined by the recipients.\n* `delivered`: The envelope has been delivered to the recipients.\n* `sent`: The envelope will be sent to the recipients after the envelope is created.\n* `signed`: The envelope has been signed by the recipients.\n* `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.\n",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__statusChangedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "status changed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "statusChangedDateTime",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The data and time that the status changed.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__statusDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "status date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "statusDateTime",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The DateTime that the envelope changed status (i.e. was created or sent.)",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__templatesUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "templates uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templatesUri",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The URI for retrieving the templates.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__transactionId'] = {
  init: function() {
    this.jsonInit({
      "message0": "transaction id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "transactionId",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "Specifies the Transaction ID from the AppStore.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__useDisclosure'] = {
  init: function() {
    this.jsonInit({
      "message0": "use disclosure: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "useDisclosure",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients. \n\nIf the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__voidedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "voided date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "voidedDateTime",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The date and time the envelope or template was voided.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelope__voidedReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "voided reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "voidedReason",
          "text": ""
        }
      ],
      "colour": 96,
      "tooltip": "The reason the envelope or template was voided.",
      "helpUrl": "",
      "previousStatement": "envelopeAttribute",
      "nextStatement":     "envelopeAttribute",    
    });
  }
};

// createEnvelope__envelopeDefinition Attributes
Blockly.Blocks['envelopeDefinition__accessControlListBase64'] = {
  init: function() {
    this.jsonInit({
      "message0": "access control list base64: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessControlListBase64",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__accessibility'] = {
  init: function() {
    this.jsonInit({
      "message0": "accessibility: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessibility",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "Sets the document reading zones for screen reader applications.  This element can only be used if Document Accessibility is enabled for the account. \n\n###### Note: This information is currently generated from the DocuSign web console by setting the reading zones when creating a template, exporting the reading zone string information, and adding it here.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__allowComments'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow comments: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowComments",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When **true**, comments are allowed on the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__allowMarkup'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow markup: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowMarkup",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, the Document Markup feature is enabled.\n\n**Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__allowReassign'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow reassign: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowReassign",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When **true**, the recipient can redirect an envelope to a more appropriate recipient.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__allowRecipientRecursion'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow recipient recursion: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowRecipientRecursion",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, this enables the Recursive Recipients feature and allows a recipient to appear more than once in the routing order.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__allowViewHistory'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow view history: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowViewHistory",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When **true**, users can view the history of the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__anySigner'] = {
  init: function() {
    this.jsonInit({
      "message0": "any signer: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anySigner",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "Deprecated. This feature has been replaced by signing groups.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__asynchronous'] = {
  init: function() {
    this.jsonInit({
      "message0": "asynchronous: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "asynchronous",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When **true**, the envelope is queued for processing and the value of the `status` property is set to `Processing`. Additionally, GET status calls return `Processing` until completed. \n\n\n**Note**: A `transactionId` is required for this call to work correctly. When the envelope is created, the status is `Processing` and an `envelopeId` is not returned in the response. To get the `envelopeId`, use a GET envelope query by using the [transactionId](https://developers.docusign.com/esign-rest-api/reference/Envelopes/Envelopes/create/#envelopeDefinition) or by checking the Connect notification.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__attachmentsUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "attachments uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "attachmentsUri",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The URI for retrieving the envelope attachments.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__authoritativeCopy'] = {
  init: function() {
    this.jsonInit({
      "message0": "authoritative copy: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "authoritativeCopy",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When **true**, marks all of the documents in the envelope as authoritative copies.\n\n**Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__authoritativeCopyDefault'] = {
  init: function() {
    this.jsonInit({
      "message0": "authoritative copy default: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "authoritativeCopyDefault",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.\nIf this property is not set, each document defaults to the envelope's `authoritativeCopy`.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__autoNavigation'] = {
  init: function() {
    this.jsonInit({
      "message0": "auto navigation: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "autoNavigation",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, autonavigation is set for the recipient.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__brandId'] = {
  init: function() {
    this.jsonInit({
      "message0": "brand id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "brandId",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The id of the brand, or text and formatting, to use for the envelope. To use brands, account branding must be enabled for the account.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__brandLock'] = {
  init: function() {
    this.jsonInit({
      "message0": "brand lock: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "brandLock",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When **true**, the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__certificateUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "certificate uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "certificateUri",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The URI for retrieving certificate information.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__completedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "completed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "completedDateTime",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The date and time that the envelope was completed.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__copyRecipientData'] = {
  init: function() {
    this.jsonInit({
      "message0": "copy recipient data: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "copyRecipientData",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__createdDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "created date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "createdDateTime",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The date and time that the envelope was created.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__customFieldsUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom fields uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customFieldsUri",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The URI for retrieving custom fields.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__declinedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedDateTime",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The date and time that the recipient declined the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__deletedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "deleted date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deletedDateTime",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The date and time that the envelope was deleted.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__deliveredDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivered date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveredDateTime",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The date and time that the envelope was delivered to the recipient. Read only.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__disableResponsiveDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable responsive document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "disableResponsiveDocument",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, the responsive document feature is turned off for the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__documentsCombinedUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "documents combined uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentsCombinedUri",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The URI for retrieving all of the documents associated with the envelope as a single PDF file.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__documentsUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "documents uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentsUri",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The URI for retrieving all of the documents associated with the envelope as separate files.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__emailBlurb'] = {
  init: function() {
    this.jsonInit({
      "message0": "email blurb: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "emailBlurb",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "This optional element holds the body of the email message that is sent to all envelope recipients. \n\nMaximum Length: 10000 characters.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__emailSubject'] = {
  init: function() {
    this.jsonInit({
      "message0": "email subject: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "emailSubject",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The subject line of the email message that is sent to all recipients.\n\nFor information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__enableWetSign'] = {
  init: function() {
    this.jsonInit({
      "message0": "enable wet sign: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "enableWetSign",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, the signer is allowed to print the document and sign it on paper.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__enforceSignerVisibility'] = {
  init: function() {
    this.jsonInit({
      "message0": "enforce signer visibility: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "enforceSignerVisibility",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.\n\n**Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.\n\n[docviz]: /esign/restapi/Envelopes/EnvelopeDocumentVisibility",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__envelopeId'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "envelopeId",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__envelopeIdStamping'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope id stamping: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "envelopeIdStamping",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.\nAfter a document or attachment is stamped with an Envelope ID,\nthe ID is seen by all recipients\nand becomes a permanent part of the document\nand cannot be removed.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__envelopeLocation'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope location: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "envelopeLocation",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__envelopeUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "envelopeUri",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The URI for retrieving the envelope or envelopes.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__expireAfter'] = {
  init: function() {
    this.jsonInit({
      "message0": "expire after: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "expireAfter",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "An integer specifying the number of days that a sent envelope remains active before it expires. A negative number in a response indicates that the envelope has already expired.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__expireDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "expire date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "expireDateTime",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The date and time the envelope is set to expire.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__expireEnabled'] = {
  init: function() {
    this.jsonInit({
      "message0": "expire enabled: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "expireEnabled",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`). Set  `expireAfter` to set the number of days until an envelope expires. When **false**, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__externalEnvelopeId'] = {
  init: function() {
    this.jsonInit({
      "message0": "external envelope id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "externalEnvelopeId",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "May contain an external identifier for the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__hasComments'] = {
  init: function() {
    this.jsonInit({
      "message0": "has comments: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hasComments",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, indicates that users have added comments to the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__hasFormDataChanged'] = {
  init: function() {
    this.jsonInit({
      "message0": "has form data changed: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hasFormDataChanged",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, indicates that the form data associated with the envelope has changed since it was sent. If **false**, this property does not appear in the response.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__hasWavFile'] = {
  init: function() {
    this.jsonInit({
      "message0": "has wav file: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hasWavFile",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, indicates that a wave file (voice recording) is part of the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__holder'] = {
  init: function() {
    this.jsonInit({
      "message0": "holder: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "holder",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__initialSentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "initial sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "initialSentDateTime",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The date and time that the envelope was first sent.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__isDynamicEnvelope'] = {
  init: function() {
    this.jsonInit({
      "message0": "is dynamic envelope: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "isDynamicEnvelope",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, indicates that the envelope is a dynamic envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__isSignatureProviderEnvelope'] = {
  init: function() {
    this.jsonInit({
      "message0": "is signature provider envelope: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "isSignatureProviderEnvelope",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, indicates that the envelope is a signature-provided envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__is21CFRPart11'] = {
  init: function() {
    this.jsonInit({
      "message0": "is21 cfr part11: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "is21CFRPart11",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__lastModifiedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "last modified date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lastModifiedDateTime",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The date and time that the item was last modified.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__location'] = {
  init: function() {
    this.jsonInit({
      "message0": "location: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "location",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__messageLock'] = {
  init: function() {
    this.jsonInit({
      "message0": "message lock: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "messageLock",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope. \n\nAdditionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes. \n\nHowever, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__notificationUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "notification uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "notificationUri",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The URI for retrieving notifications.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__password'] = {
  init: function() {
    this.jsonInit({
      "message0": "password: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "password",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The user's encrypted password hash.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__purgeCompletedDate'] = {
  init: function() {
    this.jsonInit({
      "message0": "purge completed date: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "purgeCompletedDate",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The date that a purge was completed.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__purgeRequestDate'] = {
  init: function() {
    this.jsonInit({
      "message0": "purge request date: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "purgeRequestDate",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The date that a purge was requested.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__purgeState'] = {
  init: function() {
    this.jsonInit({
      "message0": "purge state: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "purgeState",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "Initiates a purge request. Valid values are:\n* `documents_queued`: Places envelope documents in the purge queue.\n* `documents_and_metadata_queued`: Places envelope documents and metadata in the purge queue.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__recipientsLock'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipients lock: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientsLock",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__recipientsUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipients uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientsUri",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "Contains a URI for an endpoint that you can use to retrieve the recipients.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__sentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentDateTime",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The UTC DateTime when the envelope was sent. Read only.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__signerCanSignOnMobile'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer can sign on mobile: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signerCanSignOnMobile",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, recipients can sign on a mobile device.\n\n**Note**: Only Admin users can change this setting.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__signingLocation'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing location: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingLocation",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "Indicates the envelope status. Valid values when creating an envelope are: \n\n* `created`: The envelope is created as a draft. It can be modified and sent later.\n* `sent`: The envelope will be sent to the recipients after the envelope is created.\n\nYou can query these additional statuses once the recipients have interacted with the envelope.\n\n* `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.\n* `declined`: The envelope has been declined by the recipients.\n* `delivered`: The envelope has been delivered to the recipients.\n* `signed`: The envelope has been signed by the recipients.\n* `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__statusChangedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "status changed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "statusChangedDateTime",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The data and time that the status changed.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__statusDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "status date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "statusDateTime",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The DateTime that the envelope changed status (i.e. was created or sent.)",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__templateId'] = {
  init: function() {
    this.jsonInit({
      "message0": "template id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateId",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The id of the template. If a value is not provided, DocuSign generates a value. ",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__templatesUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "templates uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templatesUri",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The URI for retrieving any templates associated with the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__transactionId'] = {
  init: function() {
    this.jsonInit({
      "message0": "transaction id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "transactionId",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": " Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. We recommend that you use a transaction ID for offline signing to ensure that an envelope is not sent multiple times. You can use the `transactionId` property to determine an envelope's status (i.e. was it created or not) in cases where the Internet connection was lost before the envelope status was returned.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__useDisclosure'] = {
  init: function() {
    this.jsonInit({
      "message0": "use disclosure: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "useDisclosure",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients. \n\nIf the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__voidedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "voided date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "voidedDateTime",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The date and time the envelope or template was voided.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDefinition__voidedReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "voided reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "voidedReason",
          "text": ""
        }
      ],
      "colour": 0,
      "tooltip": "The reason the envelope or template was voided.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement":     "createEnvelopeAttribute",    
    });
  }
};

// envelopeDocument
Blockly.Blocks['envelopeDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope document %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "envelopeDocumentAttribute"
        }
      ],
      "colour": 99,
      "tooltip": "This object contains details about the envelope document.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// envelope__envelopeDocument Attributes
// Item which is an array of Scalar
Blockly.Blocks['envelopeDocument__addedRecipientIds'] = {
  init: function() {
    this.jsonInit({
      "message0": "added recipient ids %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "addedRecipientId",
          "check": "envelopeDocument_addedRecipientIdsAttribute"
        }
      ],
      "colour": 99,
      "tooltip": "If recipients were added by converting form fields into tabs, their ids appear here. Read only.",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['envelopeDocument_addedRecipientIds__addedRecipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "added recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "addedRecipientId",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "envelopeDocument_addedRecipientIdsAttribute",
      "nextStatement":     "envelopeDocument_addedRecipientIdsAttribute",    
    });
  }
};


Blockly.Blocks['envelopeDocument__attachmentTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "attachment tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "attachmentTabId",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "If this document is an attachment to another document in the envelope, this is the id of the attachment tab it is associated with on the other document.",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__authoritativeCopy'] = {
  init: function() {
    this.jsonInit({
      "message0": "authoritative copy: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "authoritativeCopy",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "When **true**, marks all of the documents in the envelope as authoritative copies.\n\n**Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__authoritativeCopyMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "authoritative copy metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 99,
      "tooltip": "Metadata that indicates if the sender can edit the `authoritativeCopy` property. Not applicable for template documents.",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__containsPdfFormFields'] = {
  init: function() {
    this.jsonInit({
      "message0": "contains pdf form fields: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "containsPdfFormFields",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "When **true**, the document has editable form fields that are made available through a PDF format.",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__display'] = {
  init: function() {
    this.jsonInit({
      "message0": "display: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "display",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "This string sets the display and behavior properties of\nthe document during signing. The possible values are:\n\n* `modal`<br>\n  The document is shown as a supplement action strip\n  and can be viewed, downloaded, or printed in a modal window.\n  This is the recommended value for supplemental documents. \n\n* `download`<br>\n  The document is shown as a supplement action strip\n  and can be viewed, downloaded, or printed in a new browser window. \n\n* `inline`<br>\n  The document is shown in the normal signing window.\n  This value is not used with supplemental documents,\n  but is the default value for all other documents.\n",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__displayMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "display metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 99,
      "tooltip": "Metadata that indicates if the sender can edit the `display` property. Not applicable for template documents.",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "The id of the document that the tab is placed on. This value must refer to the id of an existing document.",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__documentIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentIdGuid",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "The GUID of the document.",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__includeInDownload'] = {
  init: function() {
    this.jsonInit({
      "message0": "include in download: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "includeInDownload",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "When set to **true**,\nthe document is included in the combined document download (`documentsCombinedUri`). \nThe default value is **true**.\n",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__includeInDownloadMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "include in download metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 99,
      "tooltip": "Metadata that indicates if the sender can edit the `includeInDowload` property. Not applicable for template documents.",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "The document's file name. \n\nExample: `Q1-Report.docx`",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 99,
      "tooltip": "Metadata that indicates if the sender can edit the `name` property. Not applicable for template documents.",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__order'] = {
  init: function() {
    this.jsonInit({
      "message0": "order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "order",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "(Optional) The order in which to sort the results.\n\nValid values are: \n\n\n* `asc`: Ascending order.\n* `desc`: Descending order. ",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__signerMustAcknowledge'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer must acknowledge: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signerMustAcknowledge",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "Sets how the signer interacts with the supplemental document.\nThe possible values are: \n\n*	`no_interaction`<br>\n  No recipient action is required. \n\n*	`view`<br>\n  The recipient is required to view the document. \n\n*	`accept`<br>\n  The recipient is required to accept the document by selecting accept during signing, but is not required to view the document. \n\n*	`view_accept`<br>\n  The recipient is required to view and accept the document.  \n\n",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__signerMustAcknowledgeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer must acknowledge metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 99,
      "tooltip": "Metadata that indicates if the sender can edit the `signerMustAcknowledge` property. Not applicable for template documents.",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__sizeBytes'] = {
  init: function() {
    this.jsonInit({
      "message0": "size bytes: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sizeBytes",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__type'] = {
  init: function() {
    this.jsonInit({
      "message0": "type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "type",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};
Blockly.Blocks['envelopeDocument__uri'] = {
  init: function() {
    this.jsonInit({
      "message0": "uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "uri",
          "text": ""
        }
      ],
      "colour": 99,
      "tooltip": "The URI for retrieving the document.",
      "helpUrl": "",
      "previousStatement": "envelopeDocumentAttribute",
      "nextStatement":     "envelopeDocumentAttribute",    
    });
  }
};

// envelopeEvent
Blockly.Blocks['envelopeEvent'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope event %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "envelopeEventAttribute"
        }
      ],
      "colour": 102,
      "tooltip": "For which envelope events should your webhook be called?",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// eventNotification__envelopeEvent Attributes
Blockly.Blocks['envelopeEvent__envelopeEventStatusCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope event status code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "envelopeEventStatusCode",
          "text": ""
        }
      ],
      "colour": 102,
      "tooltip": "An envelope status for which your webhook should be called. Values: Draft, Sent, Delivered, Completed, Declined, or Voided.",
      "helpUrl": "",
      "previousStatement": "envelopeEventAttribute",
      "nextStatement":     "envelopeEventAttribute",    
    });
  }
};
Blockly.Blocks['envelopeEvent__includeDocuments'] = {
  init: function() {
    this.jsonInit({
      "message0": "include documents: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "includeDocuments",
          "text": ""
        }
      ],
      "colour": 102,
      "tooltip": "reserved",
      "helpUrl": "",
      "previousStatement": "envelopeEventAttribute",
      "nextStatement":     "envelopeEventAttribute",    
    });
  }
};

// envelopeId
Blockly.Blocks['envelopeId'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope id %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "envelopeIdAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "A tab that displays the envelope ID. Recipients cannot enter\nor change the information in this tab.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__envelopeId Attributes
Blockly.Blocks['envelopeId__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "The page number on which the tab is located.\nFor supplemental documents, this value must be `1`.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['envelopeId__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "envelopeId_tabGroupLabelsAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['envelopeId_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "envelopeId_tabGroupLabelsAttribute",
      "nextStatement":     "envelopeId_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['envelopeId__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 105,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};
Blockly.Blocks['envelopeId__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 105,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "envelopeIdAttribute",
      "nextStatement":     "envelopeIdAttribute",    
    });
  }
};

// EnvelopeLocks
Blockly.Blocks['EnvelopeLocks'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope locks %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "EnvelopeLocksAttribute"
        }
      ],
      "colour": 108,
      "tooltip": "This section provides information about envelope locks.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// envelope__EnvelopeLocks Attributes
Blockly.Blocks['EnvelopeLocks__lockDurationInSeconds'] = {
  init: function() {
    this.jsonInit({
      "message0": "lock duration in seconds: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockDurationInSeconds",
          "text": ""
        }
      ],
      "colour": 108,
      "tooltip": "Sets the time, in seconds, until the lock expires when there is no activity on the envelope.\n\nThe default value is 300 seconds. The maximum value is 1,800 seconds.\n\nThe lock duration can be extended.\n",
      "helpUrl": "",
      "previousStatement": "EnvelopeLocksAttribute",
      "nextStatement":     "EnvelopeLocksAttribute",    
    });
  }
};
Blockly.Blocks['EnvelopeLocks__lockToken'] = {
  init: function() {
    this.jsonInit({
      "message0": "lock token: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockToken",
          "text": ""
        }
      ],
      "colour": 108,
      "tooltip": "A unique identifier provided to the owner of the lock. You must use this token with subsequent calls to prove ownership of the lock.",
      "helpUrl": "",
      "previousStatement": "EnvelopeLocksAttribute",
      "nextStatement":     "EnvelopeLocksAttribute",    
    });
  }
};
Blockly.Blocks['EnvelopeLocks__lockType'] = {
  init: function() {
    this.jsonInit({
      "message0": "lock type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockType",
          "text": ""
        }
      ],
      "colour": 108,
      "tooltip": "The type of lock.  Currently `edit` is the only supported type.",
      "helpUrl": "",
      "previousStatement": "EnvelopeLocksAttribute",
      "nextStatement":     "EnvelopeLocksAttribute",    
    });
  }
};
Blockly.Blocks['EnvelopeLocks__lockedByApp'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked by app: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedByApp",
          "text": ""
        }
      ],
      "colour": 108,
      "tooltip": "The human-readable name of the application that is locking the envelope or template. This value displays to the user in error messages when lock conflicts occur.",
      "helpUrl": "",
      "previousStatement": "EnvelopeLocksAttribute",
      "nextStatement":     "EnvelopeLocksAttribute",    
    });
  }
};
Blockly.Blocks['EnvelopeLocks__lockedUntilDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked until date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedUntilDateTime",
          "text": ""
        }
      ],
      "colour": 108,
      "tooltip": "The date and time that the lock expires.",
      "helpUrl": "",
      "previousStatement": "EnvelopeLocksAttribute",
      "nextStatement":     "EnvelopeLocksAttribute",    
    });
  }
};
Blockly.Blocks['EnvelopeLocks__useScratchPad'] = {
  init: function() {
    this.jsonInit({
      "message0": "use scratch pad: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "useScratchPad",
          "text": ""
        }
      ],
      "colour": 108,
      "tooltip": "When set to **true**, a scratchpad is used to edit information.\n ",
      "helpUrl": "",
      "previousStatement": "EnvelopeLocksAttribute",
      "nextStatement":     "EnvelopeLocksAttribute",    
    });
  }
};

// envelopeMetadata
Blockly.Blocks['envelopeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope metadata %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "envelopeMetadataAttribute"
        }
      ],
      "colour": 111,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// envelope__envelopeMetadata Attributes
Blockly.Blocks['envelopeMetadata__allowAdvancedCorrect'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow advanced correct: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowAdvancedCorrect",
          "text": ""
        }
      ],
      "colour": 111,
      "tooltip": "Specifies if the Advanced Correct feature is enabled for the envelope. This feature enables you to correct the details of in process envelopes that you sent or are shared with you. It offers more functionality than the Correct feature.",
      "helpUrl": "",
      "previousStatement": "envelopeMetadataAttribute",
      "nextStatement":     "envelopeMetadataAttribute",    
    });
  }
};
Blockly.Blocks['envelopeMetadata__allowCorrect'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow correct: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowCorrect",
          "text": ""
        }
      ],
      "colour": 111,
      "tooltip": "Specifies if the Correct feature is enabled for the envelope. This feature enables you to correct the details of in process envelopes that you sent or are shared with you, including the recipient, envelope, and document information.",
      "helpUrl": "",
      "previousStatement": "envelopeMetadataAttribute",
      "nextStatement":     "envelopeMetadataAttribute",    
    });
  }
};
Blockly.Blocks['envelopeMetadata__enableSignWithNotary'] = {
  init: function() {
    this.jsonInit({
      "message0": "enable sign with notary: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "enableSignWithNotary",
          "text": ""
        }
      ],
      "colour": 111,
      "tooltip": "Specifies if DocuSign eNotary service is enabled for the envelope.",
      "helpUrl": "",
      "previousStatement": "envelopeMetadataAttribute",
      "nextStatement":     "envelopeMetadataAttribute",    
    });
  }
};

// EnvelopeRecipients
Blockly.Blocks['EnvelopeRecipients'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope recipients %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "EnvelopeRecipientsAttribute"
        }
      ],
      "colour": 114,
      "tooltip": "Envelope recipients",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// folderItem_v2__EnvelopeRecipients Attributes
Blockly.Blocks['EnvelopeRecipients__currentRoutingOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "current routing order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "currentRoutingOrder",
          "text": ""
        }
      ],
      "colour": 114,
      "tooltip": "The routing order of the current recipient. If this value equals a particular signer's routing order, it indicates that the envelope has been sent to that recipient, but he or she has not completed the required actions.",
      "helpUrl": "",
      "previousStatement": "EnvelopeRecipientsAttribute",
      "nextStatement":     "EnvelopeRecipientsAttribute",    
    });
  }
};
Blockly.Blocks['EnvelopeRecipients__recipientCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientCount",
          "text": ""
        }
      ],
      "colour": 114,
      "tooltip": "The number of recipients in the envelope.",
      "helpUrl": "",
      "previousStatement": "EnvelopeRecipientsAttribute",
      "nextStatement":     "EnvelopeRecipientsAttribute",    
    });
  }
};

// errorDetails
Blockly.Blocks['errorDetails'] = {
  init: function() {
    this.jsonInit({
      "message0": "error details %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "errorDetailsAttribute"
        }
      ],
      "colour": 117,
      "tooltip": "This object describes errors that occur. It is only valid for responses and ignored in requests.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// approve__errorDetails Attributes
Blockly.Blocks['errorDetails__errorCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "error code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "errorCode",
          "text": ""
        }
      ],
      "colour": 117,
      "tooltip": "The code associated with the error condition.",
      "helpUrl": "",
      "previousStatement": "errorDetailsAttribute",
      "nextStatement":     "errorDetailsAttribute",    
    });
  }
};
Blockly.Blocks['errorDetails__message'] = {
  init: function() {
    this.jsonInit({
      "message0": "message: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "message",
          "text": ""
        }
      ],
      "colour": 117,
      "tooltip": "A brief message describing the error condition.",
      "helpUrl": "",
      "previousStatement": "errorDetailsAttribute",
      "nextStatement":     "errorDetailsAttribute",    
    });
  }
};

// eventNotification
Blockly.Blocks['eventNotification'] = {
  init: function() {
    this.jsonInit({
      "message0": "event notification %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "eventNotificationAttribute"
        }
      ],
      "colour": 120,
      "tooltip": "Register a Connect webhook for a specific envelope",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// envelopeDefinition__eventNotification Attributes
Blockly.Blocks['eventNotification__includeCertificateOfCompletion'] = {
  init: function() {
    this.jsonInit({
      "message0": "include certificate of completion: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "includeCertificateOfCompletion",
          "text": ""
        }
      ],
      "colour": 120,
      "tooltip": "When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes. ",
      "helpUrl": "",
      "previousStatement": "eventNotificationAttribute",
      "nextStatement":     "eventNotificationAttribute",    
    });
  }
};
Blockly.Blocks['eventNotification__includeCertificateWithSoap'] = {
  init: function() {
    this.jsonInit({
      "message0": "include certificate with soap: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "includeCertificateWithSoap",
          "text": ""
        }
      ],
      "colour": 120,
      "tooltip": "When set to **true**, the Connect service will digitally sign the XML data. The signature will be included in the XML message.",
      "helpUrl": "",
      "previousStatement": "eventNotificationAttribute",
      "nextStatement":     "eventNotificationAttribute",    
    });
  }
};
Blockly.Blocks['eventNotification__includeDocumentFields'] = {
  init: function() {
    this.jsonInit({
      "message0": "include document fields: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "includeDocumentFields",
          "text": ""
        }
      ],
      "colour": 120,
      "tooltip": "When set to **true**, the Document Fields associated with the envelope's documents are included in the notification messages. Document Fields are optional custom name-value pairs added to documents using the API. ",
      "helpUrl": "",
      "previousStatement": "eventNotificationAttribute",
      "nextStatement":     "eventNotificationAttribute",    
    });
  }
};
Blockly.Blocks['eventNotification__includeDocuments'] = {
  init: function() {
    this.jsonInit({
      "message0": "include documents: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "includeDocuments",
          "text": ""
        }
      ],
      "colour": 120,
      "tooltip": "When set to **true**, the XML webhook messages will include the envelope's PDF documents. Including the PDF documents will greatly increase the size of the notification messages. Ensure that your listener can handle incoming messages that are 25MB or larger. ",
      "helpUrl": "",
      "previousStatement": "eventNotificationAttribute",
      "nextStatement":     "eventNotificationAttribute",    
    });
  }
};
Blockly.Blocks['eventNotification__includeEnvelopeVoidReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "include envelope void reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "includeEnvelopeVoidReason",
          "text": ""
        }
      ],
      "colour": 120,
      "tooltip": "When set to **true**, if the envelope is voided, the Connect Service notification will include the void reason, as entered by the person that voided the envelope. ",
      "helpUrl": "",
      "previousStatement": "eventNotificationAttribute",
      "nextStatement":     "eventNotificationAttribute",    
    });
  }
};
Blockly.Blocks['eventNotification__includeHMAC'] = {
  init: function() {
    this.jsonInit({
      "message0": "include hmac: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "includeHMAC",
          "text": ""
        }
      ],
      "colour": 120,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "eventNotificationAttribute",
      "nextStatement":     "eventNotificationAttribute",    
    });
  }
};
Blockly.Blocks['eventNotification__includeSenderAccountAsCustomField'] = {
  init: function() {
    this.jsonInit({
      "message0": "include sender account as custom field: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "includeSenderAccountAsCustomField",
          "text": ""
        }
      ],
      "colour": 120,
      "tooltip": "When set to **true**, Connect will include the sender account as Custom Field in the data.",
      "helpUrl": "",
      "previousStatement": "eventNotificationAttribute",
      "nextStatement":     "eventNotificationAttribute",    
    });
  }
};
Blockly.Blocks['eventNotification__includeTimeZone'] = {
  init: function() {
    this.jsonInit({
      "message0": "include time zone: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "includeTimeZone",
          "text": ""
        }
      ],
      "colour": 120,
      "tooltip": "When set to **true**, the envelope's time zone information is included in the webhook messages. ",
      "helpUrl": "",
      "previousStatement": "eventNotificationAttribute",
      "nextStatement":     "eventNotificationAttribute",    
    });
  }
};
Blockly.Blocks['eventNotification__loggingEnabled'] = {
  init: function() {
    this.jsonInit({
      "message0": "logging enabled: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "loggingEnabled",
          "text": ""
        }
      ],
      "colour": 120,
      "tooltip": "When set to **true**, the webhook messages are logged. They can be viewed on the DocuSign Administration Web Tool in the Connect section. Logged messages can also be downloaded via the [ConnectEvents resource](https://developers.docusign.com/esign-rest-api/reference/Connect/ConnectEvents).",
      "helpUrl": "",
      "previousStatement": "eventNotificationAttribute",
      "nextStatement":     "eventNotificationAttribute",    
    });
  }
};
Blockly.Blocks['eventNotification__requireAcknowledgment'] = {
  init: function() {
    this.jsonInit({
      "message0": "require acknowledgment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireAcknowledgment",
          "text": ""
        }
      ],
      "colour": 120,
      "tooltip": "When set to **true**, the DocuSign Connect service checks that the message was received and retries on failures. ",
      "helpUrl": "",
      "previousStatement": "eventNotificationAttribute",
      "nextStatement":     "eventNotificationAttribute",    
    });
  }
};
Blockly.Blocks['eventNotification__signMessageWithX509Cert'] = {
  init: function() {
    this.jsonInit({
      "message0": "sign message with x509 cert: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signMessageWithX509Cert",
          "text": ""
        }
      ],
      "colour": 120,
      "tooltip": "When set to **true**, Mutual TLS will be enabled for notifications. Mutual TLS must be initiated by the listener (the customer's web server) during the TLS handshake protocol. ",
      "helpUrl": "",
      "previousStatement": "eventNotificationAttribute",
      "nextStatement":     "eventNotificationAttribute",    
    });
  }
};
Blockly.Blocks['eventNotification__soapNameSpace'] = {
  init: function() {
    this.jsonInit({
      "message0": "soap name space: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "soapNameSpace",
          "text": ""
        }
      ],
      "colour": 120,
      "tooltip": "The namespace of the SOAP interface.\n\nThe namespace value must be set if useSoapInterface is set to true.",
      "helpUrl": "",
      "previousStatement": "eventNotificationAttribute",
      "nextStatement":     "eventNotificationAttribute",    
    });
  }
};
Blockly.Blocks['eventNotification__url'] = {
  init: function() {
    this.jsonInit({
      "message0": "url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "url",
          "text": ""
        }
      ],
      "colour": 120,
      "tooltip": "The endpoint to which webhook notification messages are sent via an HTTPS POST request. The url must start with https. The customer's web server must use an SSL/TLS certificate whose CA is in the Microsoft list of trusted CAs. Self-signed certificates are not ok. Free certificates from Let's Encrypt can be used.",
      "helpUrl": "",
      "previousStatement": "eventNotificationAttribute",
      "nextStatement":     "eventNotificationAttribute",    
    });
  }
};
Blockly.Blocks['eventNotification__useSoapInterface'] = {
  init: function() {
    this.jsonInit({
      "message0": "use soap interface: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "useSoapInterface",
          "text": ""
        }
      ],
      "colour": 120,
      "tooltip": "When set to **true**, the notifications are sent to your endpoint as SOAP requests. ",
      "helpUrl": "",
      "previousStatement": "eventNotificationAttribute",
      "nextStatement":     "eventNotificationAttribute",    
    });
  }
};

// expirations
Blockly.Blocks['expirations'] = {
  init: function() {
    this.jsonInit({
      "message0": "expirations %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "expirationsAttribute"
        }
      ],
      "colour": 123,
      "tooltip": "A complex element that specifies the expiration settings for the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// notification__expirations Attributes
Blockly.Blocks['expirations__expireAfter'] = {
  init: function() {
    this.jsonInit({
      "message0": "expire after: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "expireAfter",
          "text": ""
        }
      ],
      "colour": 123,
      "tooltip": "An integer specifying the number of days that a sent envelope remains active before it expires. A negative number in a response indicates that the envelope has already expired.",
      "helpUrl": "",
      "previousStatement": "expirationsAttribute",
      "nextStatement":     "expirationsAttribute",    
    });
  }
};
Blockly.Blocks['expirations__expireEnabled'] = {
  init: function() {
    this.jsonInit({
      "message0": "expire enabled: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "expireEnabled",
          "text": ""
        }
      ],
      "colour": 123,
      "tooltip": "When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`). Set  `expireAfter` to set the number of days until an envelope expires. When **false**, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.",
      "helpUrl": "",
      "previousStatement": "expirationsAttribute",
      "nextStatement":     "expirationsAttribute",    
    });
  }
};
Blockly.Blocks['expirations__expireWarn'] = {
  init: function() {
    this.jsonInit({
      "message0": "expire warn: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "expireWarn",
          "text": ""
        }
      ],
      "colour": 123,
      "tooltip": "An integer that specifying the number of days before the envelope expires that an expiration warning email is sent to the recipient. If set to 0 (zero), no warning email is sent.",
      "helpUrl": "",
      "previousStatement": "expirationsAttribute",
      "nextStatement":     "expirationsAttribute",    
    });
  }
};

// featureAvailableMetadata
Blockly.Blocks['featureAvailableMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "feature available metadata %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "featureAvailableMetadataAttribute"
        }
      ],
      "colour": 126,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// agent__featureAvailableMetadata Attributes
Blockly.Blocks['featureAvailableMetadata__availabilty'] = {
  init: function() {
    this.jsonInit({
      "message0": "availabilty: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "availabilty",
          "text": ""
        }
      ],
      "colour": 126,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "featureAvailableMetadataAttribute",
      "nextStatement":     "featureAvailableMetadataAttribute",    
    });
  }
};
Blockly.Blocks['featureAvailableMetadata__featureName'] = {
  init: function() {
    this.jsonInit({
      "message0": "feature name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "featureName",
          "text": ""
        }
      ],
      "colour": 126,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "featureAvailableMetadataAttribute",
      "nextStatement":     "featureAvailableMetadataAttribute",    
    });
  }
};

// filter
Blockly.Blocks['filter'] = {
  init: function() {
    this.jsonInit({
      "message0": "filter %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "filterAttribute"
        }
      ],
      "colour": 129,
      "tooltip": "Use this object to create a filtered view of the items in a folder.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// folder__filter Attributes
Blockly.Blocks['filter__actionRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "action required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "actionRequired",
          "text": ""
        }
      ],
      "colour": 129,
      "tooltip": "When set to **true**, the current user needs to take action on the item.",
      "helpUrl": "",
      "previousStatement": "filterAttribute",
      "nextStatement":     "filterAttribute",    
    });
  }
};
Blockly.Blocks['filter__expires'] = {
  init: function() {
    this.jsonInit({
      "message0": "expires: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "expires",
          "text": ""
        }
      ],
      "colour": 129,
      "tooltip": "The number of days a sent envelope remains active before it expires.",
      "helpUrl": "",
      "previousStatement": "filterAttribute",
      "nextStatement":     "filterAttribute",    
    });
  }
};
Blockly.Blocks['filter__folderIds'] = {
  init: function() {
    this.jsonInit({
      "message0": "folder ids: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "folderIds",
          "text": ""
        }
      ],
      "colour": 129,
      "tooltip": "Filters for any combination of folder ids and folder types. The possible folder types are:\n\n- `awaiting_my_signature`\n- `completed`\n- `draft`\n- `drafts`\n- `expiring_soon`\n- `inbox`\n- `out_for_signature`\n- `recyclebin`\n- `sentitems`\n- `waiting_for_others`",
      "helpUrl": "",
      "previousStatement": "filterAttribute",
      "nextStatement":     "filterAttribute",    
    });
  }
};
Blockly.Blocks['filter__fromDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "from date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fromDateTime",
          "text": ""
        }
      ],
      "colour": 129,
      "tooltip": "The UTC DateTime of the beginning of a date range. If no value is provided, the default search is the previous 30 days.",
      "helpUrl": "",
      "previousStatement": "filterAttribute",
      "nextStatement":     "filterAttribute",    
    });
  }
};
Blockly.Blocks['filter__isTemplate'] = {
  init: function() {
    this.jsonInit({
      "message0": "is template: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "isTemplate",
          "text": ""
        }
      ],
      "colour": 129,
      "tooltip": "When set to **true**, the item is a template.",
      "helpUrl": "",
      "previousStatement": "filterAttribute",
      "nextStatement":     "filterAttribute",    
    });
  }
};
Blockly.Blocks['filter__order'] = {
  init: function() {
    this.jsonInit({
      "message0": "order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "order",
          "text": ""
        }
      ],
      "colour": 129,
      "tooltip": "(Optional) The order in which to sort the results.\n\nValid values are: \n\n\n* `asc`: Ascending order.\n* `desc`: Descending order. ",
      "helpUrl": "",
      "previousStatement": "filterAttribute",
      "nextStatement":     "filterAttribute",    
    });
  }
};
Blockly.Blocks['filter__orderBy'] = {
  init: function() {
    this.jsonInit({
      "message0": "order by: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "orderBy",
          "text": ""
        }
      ],
      "colour": 129,
      "tooltip": "The field used to sort the results.\n\nExample: `Created`",
      "helpUrl": "",
      "previousStatement": "filterAttribute",
      "nextStatement":     "filterAttribute",    
    });
  }
};
Blockly.Blocks['filter__searchTarget'] = {
  init: function() {
    this.jsonInit({
      "message0": "search target: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "searchTarget",
          "text": ""
        }
      ],
      "colour": 129,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "filterAttribute",
      "nextStatement":     "filterAttribute",    
    });
  }
};
Blockly.Blocks['filter__searchText'] = {
  init: function() {
    this.jsonInit({
      "message0": "search text: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "searchText",
          "text": ""
        }
      ],
      "colour": 129,
      "tooltip": "A free text search field for searching across the items in a folder. The search looks for the text that you enter in the recipient names and emails, envelope custom fields, sender name, and subject.",
      "helpUrl": "",
      "previousStatement": "filterAttribute",
      "nextStatement":     "filterAttribute",    
    });
  }
};
Blockly.Blocks['filter__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 129,
      "tooltip": "The status of the envelope. By default, all statuses are returned.\n\nFor details, see [Envelope Status Code Descriptions](https://developers.docusign.com/esign-rest-api/guides/status-and-error-codes#envelope-status-code-descriptions).",
      "helpUrl": "",
      "previousStatement": "filterAttribute",
      "nextStatement":     "filterAttribute",    
    });
  }
};
Blockly.Blocks['filter__toDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "to date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "toDateTime",
          "text": ""
        }
      ],
      "colour": 129,
      "tooltip": "The UTC DateTime of the end of a date range. If no value is provided, the default search is to the current date.",
      "helpUrl": "",
      "previousStatement": "filterAttribute",
      "nextStatement":     "filterAttribute",    
    });
  }
};

// firstName
Blockly.Blocks['firstName'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "firstNameAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "A tab that displays the recipient's first name. This tab\ntakes the recipient's name as entered in the recipient\ninformation, splits it into sections based on spaces and\nuses the first section as the first name.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__firstName Attributes
Blockly.Blocks['firstName__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "The page number on which the tab is located. For supplemental documents, this value must be `1`.\n",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['firstName__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "firstName_tabGroupLabelsAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['firstName_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "firstName_tabGroupLabelsAttribute",
      "nextStatement":     "firstName_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['firstName__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 132,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};
Blockly.Blocks['firstName__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 132,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "firstNameAttribute",
      "nextStatement":     "firstNameAttribute",    
    });
  }
};

// folder
Blockly.Blocks['folder'] = {
  init: function() {
    this.jsonInit({
      "message0": "folder %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "folderAttribute"
        }
      ],
      "colour": 135,
      "tooltip": "This object contains details about a folder.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// envelope__folder Attributes
Blockly.Blocks['folder__folderId'] = {
  init: function() {
    this.jsonInit({
      "message0": "folder id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "folderId",
          "text": ""
        }
      ],
      "colour": 135,
      "tooltip": "The id of the folder.",
      "helpUrl": "",
      "previousStatement": "folderAttribute",
      "nextStatement":     "folderAttribute",    
    });
  }
};
Blockly.Blocks['folder__hasAccess'] = {
  init: function() {
    this.jsonInit({
      "message0": "has access: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hasAccess",
          "text": ""
        }
      ],
      "colour": 135,
      "tooltip": "When set to **true**, the current user has access to the folder.",
      "helpUrl": "",
      "previousStatement": "folderAttribute",
      "nextStatement":     "folderAttribute",    
    });
  }
};
Blockly.Blocks['folder__hasSubFolders'] = {
  init: function() {
    this.jsonInit({
      "message0": "has sub folders: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hasSubFolders",
          "text": ""
        }
      ],
      "colour": 135,
      "tooltip": "When set to **true**, the folder has subfolders.",
      "helpUrl": "",
      "previousStatement": "folderAttribute",
      "nextStatement":     "folderAttribute",    
    });
  }
};
Blockly.Blocks['folder__itemCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "item count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "itemCount",
          "text": ""
        }
      ],
      "colour": 135,
      "tooltip": "The number of items in the folder.",
      "helpUrl": "",
      "previousStatement": "folderAttribute",
      "nextStatement":     "folderAttribute",    
    });
  }
};
Blockly.Blocks['folder__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 135,
      "tooltip": "The name of the folder.",
      "helpUrl": "",
      "previousStatement": "folderAttribute",
      "nextStatement":     "folderAttribute",    
    });
  }
};
Blockly.Blocks['folder__parentFolderId'] = {
  init: function() {
    this.jsonInit({
      "message0": "parent folder id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "parentFolderId",
          "text": ""
        }
      ],
      "colour": 135,
      "tooltip": "The id of the parent folder, or the special value `root` for the root folder.",
      "helpUrl": "",
      "previousStatement": "folderAttribute",
      "nextStatement":     "folderAttribute",    
    });
  }
};
Blockly.Blocks['folder__parentFolderUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "parent folder uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "parentFolderUri",
          "text": ""
        }
      ],
      "colour": 135,
      "tooltip": "The URI of the parent folder.",
      "helpUrl": "",
      "previousStatement": "folderAttribute",
      "nextStatement":     "folderAttribute",    
    });
  }
};
Blockly.Blocks['folder__subFolderCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "sub folder count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "subFolderCount",
          "text": ""
        }
      ],
      "colour": 135,
      "tooltip": "The number of subfolders.",
      "helpUrl": "",
      "previousStatement": "folderAttribute",
      "nextStatement":     "folderAttribute",    
    });
  }
};
Blockly.Blocks['folder__type'] = {
  init: function() {
    this.jsonInit({
      "message0": "type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "type",
          "text": ""
        }
      ],
      "colour": 135,
      "tooltip": "The type of folder. Possible values include:\n\n- `draft`\n- `inbox`\n- `normal` (a system-generated folder)\n- `recyclebin`\n- `sentitems`\n- `custom` (a custom folder created by a user)",
      "helpUrl": "",
      "previousStatement": "folderAttribute",
      "nextStatement":     "folderAttribute",    
    });
  }
};
Blockly.Blocks['folder__uri'] = {
  init: function() {
    this.jsonInit({
      "message0": "uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "uri",
          "text": ""
        }
      ],
      "colour": 135,
      "tooltip": "The URI for the folder.",
      "helpUrl": "",
      "previousStatement": "folderAttribute",
      "nextStatement":     "folderAttribute",    
    });
  }
};

// folderItem_v2
Blockly.Blocks['folderItem_v2'] = {
  init: function() {
    this.jsonInit({
      "message0": "folder item v2 %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "folderItem_v2Attribute"
        }
      ],
      "colour": 138,
      "tooltip": "Information about folder item results.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// folder__folderItem_v2 Attributes
Blockly.Blocks['folderItem_v2__completedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "completed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "completedDateTime",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "If the item is an envelope, this is the UTC DateTime when the envelope was completed.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__createdDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "created date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "createdDateTime",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "The UTC DateTime when the item was created.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__envelopeId'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "envelopeId",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "If the item is an envelope, this is the id of the envelope.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__envelopeUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "envelope uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "envelopeUri",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "If the item is an envelope, this is the URI for retrieving it.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__expireDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "expire date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "expireDateTime",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "The date and time the envelope is set to expire.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__folderId'] = {
  init: function() {
    this.jsonInit({
      "message0": "folder id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "folderId",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "The id of the folder.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__folderUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "folder uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "folderUri",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "If the item is a subfolder, this is the URI for retrieving it.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__is21CFRPart11'] = {
  init: function() {
    this.jsonInit({
      "message0": "is21 cfr part11: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "is21CFRPart11",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__ownerName'] = {
  init: function() {
    this.jsonInit({
      "message0": "owner name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "ownerName",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "The name of the user who owns the folder.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__recipientsUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipients uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientsUri",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "Contains a URI for an endpoint that you can use to retrieve the recipients.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__senderCompany'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender company: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderCompany",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "The name of the sender's company.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__senderEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderEmail",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "The sender's email address.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__senderName'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderName",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "The sender's name.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__senderUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderUserId",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "The sender's id.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__sentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentDateTime",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "The UTC DateTime when the envelope was sent. Read only.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "The status of the item.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__subject'] = {
  init: function() {
    this.jsonInit({
      "message0": "subject: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "subject",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "The subject of the envelope.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__templateId'] = {
  init: function() {
    this.jsonInit({
      "message0": "template id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateId",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "The id of the template.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};
Blockly.Blocks['folderItem_v2__templateUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "template uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateUri",
          "text": ""
        }
      ],
      "colour": 138,
      "tooltip": "The URI for retrieving the template.",
      "helpUrl": "",
      "previousStatement": "folderItem_v2Attribute",
      "nextStatement":     "folderItem_v2Attribute",    
    });
  }
};

// formulaTab
Blockly.Blocks['formulaTab'] = {
  init: function() {
    this.jsonInit({
      "message0": "formula tab %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "formulaTabAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "The value of a formula tab is calculated\nfrom the values of other\nnumber or date tabs in the document.\nWhen the recipient completes the underlying fields,\nthe formula tab calculates and displays the result.\n\nThe `formula` property of the tab\ncontains the references\nto the underlying tabs.\nSee [Calculated Fields][calculatedfields]\nin the DocuSign Support Center\nto learn more about formulas.\n\nIf a formula tab contains\na `paymentDetails` property,\nthe tab is considered a payment item.\nSee [Requesting Payments Along with Signatures][paymentguide]\nin the DocuSign Support Center\nto learn more about payments.\n\n[calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields\n[paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__formulaTab Attributes
Blockly.Blocks['formulaTab__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__concealValueOnDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "concealValueOnDocument",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.\n\nWhen an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.\n\nThis setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__concealValueOnDocumentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `concealValueOnDocument` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__disableAutoSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "disableAutoSize",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__disableAutoSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `disableAutoSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__formula'] = {
  init: function() {
    this.jsonInit({
      "message0": "formula: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formula",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "Contains the formula\nfor calculating the value of\nthis tab.\n\nUse a tab's `tabLabel`,\nenclosed in brackets,\nto refer to it.\n\nFor example,\nyou want to present the total cost\nof two items, tax included.\n\nThe cost of each item is stored\nin number tabs labeled Item1 and Item2.\nThe tax rate is in a number tab\nlabeled TaxRate.\n\nThe formula string for this property\nwould be:\n`([Item1] + [Item2]) * (1 + [TaxRate])`\n\nSee [Calculated Fields][calculatedfields]\nin the DocuSign Support Center\nto learn more about formulas.\n\nMaximum Length: 2000 characters\n\n[calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields\n",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__formulaMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "formula metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata indicating if the sender can edit the `formula` property.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__hidden'] = {
  init: function() {
    this.jsonInit({
      "message0": "hidden: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hidden",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "If this is a regular formula (no `paymentDetails` property is present):\n\n* **true**: The tab is hidden.\n* **false**: The tab is shown.\n\nIf the formula is payment item (a `paymentDetails` property is present):\n\n* **true**: The tab is displayed as a payment.\n* **false**: The tab is displayed as a regular formula.\n",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__hiddenMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "hidden metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `hidden` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__isPaymentAmount'] = {
  init: function() {
    this.jsonInit({
      "message0": "is payment amount: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "isPaymentAmount",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true**, sets this as a payment tab. Can only be used with Text, Number, Formula, or List tabs. The value of the tab must be a number. ",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__isPaymentAmountMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "is payment amount metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `isPaymentAmount` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__maxLength'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "maxLength",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "An optional value that describes the maximum length of the property when the property is a string.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__maxLengthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `maxLength` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__originalValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "originalValue",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The initial value of the tab when it was sent to the recipient. ",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__originalValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `originalValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The page number on which the tab is located. For supplemental documents, this value must be `1`.\n",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__requireAll'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireAll",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true** and shared is true, information must be entered in this field to complete the envelope. ",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__requireAllMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `requireAll` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__requireInitialOnSharedChange'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireInitialOnSharedChange",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__requireInitialOnSharedChangeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true**, the signer is required to fill out this tab.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__roundDecimalPlaces'] = {
  init: function() {
    this.jsonInit({
      "message0": "round decimal places: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "roundDecimalPlaces",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The number of decimal places to round to.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__roundDecimalPlacesMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "round decimal places metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `roundDecimalPlaces` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__senderRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderRequired",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true**, the sender must populate the tab before an envelope can be sent using the template. \n\nThis value tab can only be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired` value of true cannot be deleted from an envelope.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__senderRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `senderRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__shared'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "shared",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true**, this custom tab is shared.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__sharedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `shared` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['formulaTab__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "formulaTab_tabGroupLabelsAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['formulaTab_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "formulaTab_tabGroupLabelsAttribute",
      "nextStatement":     "formulaTab_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['formulaTab__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__validationMessage'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationMessage",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The message displayed if the custom tab fails input validation (either custom of embedded).",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__validationMessageMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `validationMessage` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__validationPattern'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation pattern: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationPattern",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "A regular expression used to validate input for the tab.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__validationPatternMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation pattern metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `validationPattern` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (+35, -2)\n",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 141,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (+35, -2)\n",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};
Blockly.Blocks['formulaTab__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 141,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "formulaTabAttribute",
      "nextStatement":     "formulaTabAttribute",    
    });
  }
};

// fullName
Blockly.Blocks['fullName'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "fullNameAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "A tab that displays the recipient's full name.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__fullName Attributes
Blockly.Blocks['fullName__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "The page number on which the tab is located. For supplemental documents, this value must be `1`.\n",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['fullName__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "fullName_tabGroupLabelsAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['fullName_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "fullName_tabGroupLabelsAttribute",
      "nextStatement":     "fullName_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['fullName__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 144,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};
Blockly.Blocks['fullName__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 144,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "fullNameAttribute",
      "nextStatement":     "fullNameAttribute",    
    });
  }
};

// graphicsContext
Blockly.Blocks['graphicsContext'] = {
  init: function() {
    this.jsonInit({
      "message0": "graphics context %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "graphicsContextAttribute"
        }
      ],
      "colour": 147,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// polyLineOverlay__graphicsContext Attributes
Blockly.Blocks['graphicsContext__fillColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "fill color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fillColor",
          "text": ""
        }
      ],
      "colour": 147,
      "tooltip": "The fill color to use for the overlay. Colors are typically specified by their RGB hex values, but you can also use a [friendly CSS color name](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).",
      "helpUrl": "",
      "previousStatement": "graphicsContextAttribute",
      "nextStatement":     "graphicsContextAttribute",    
    });
  }
};
Blockly.Blocks['graphicsContext__lineColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "line color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lineColor",
          "text": ""
        }
      ],
      "colour": 147,
      "tooltip": "The line color to use for the overlay. Colors are typically specified by their RGB hex values, but you can also use a [friendly CSS color name](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).",
      "helpUrl": "",
      "previousStatement": "graphicsContextAttribute",
      "nextStatement":     "graphicsContextAttribute",    
    });
  }
};
Blockly.Blocks['graphicsContext__lineWeight'] = {
  init: function() {
    this.jsonInit({
      "message0": "line weight: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lineWeight",
          "text": ""
        }
      ],
      "colour": 147,
      "tooltip": "The line weight or thickness to use for the overlay.",
      "helpUrl": "",
      "previousStatement": "graphicsContextAttribute",
      "nextStatement":     "graphicsContextAttribute",    
    });
  }
};

// inPersonSigner
Blockly.Blocks['inPersonSigner'] = {
  init: function() {
    this.jsonInit({
      "message0": "in person signer %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "inPersonSignerAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Contains information about an in-person recipient. This is a DocuSign user,\nacting as a Signing Host,\nwho is in the same physical location as the signer.\nTo learn about the fields used\nfor the eNotary feature,\nsee the [EnvelopeRecipients resource][resource].\n\n[resource]: https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipients__inPersonSigner Attributes
Blockly.Blocks['inPersonSigner__accessCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessCode",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. \n\nMaximum Length: 50 characters and it must conform to the account's access code format setting.\n\nIf blank, but the signer `accessCode` property is set in the envelope, then that value is used.\n\nIf blank and the signer `accessCode` property is not set, then the access code is not required.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__accessCodeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates whether the `accessCode` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__addAccessCodeToEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "add access code to email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "addAccessCodeToEmail",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__allowSystemOverrideForLockedRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow system override for locked recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowSystemOverrideForLockedRecipient",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__autoNavigation'] = {
  init: function() {
    this.jsonInit({
      "message0": "auto navigation: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "autoNavigation",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "When set to **true**, autonavigation is set for the recipient.\n",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__canSignOffline'] = {
  init: function() {
    this.jsonInit({
      "message0": "can sign offline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "canSignOffline",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "When set to **true**, specifies that the signer can perform the signing ceremony offline.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__clientUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "client user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "clientUserId",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Specifies whether the recipient is embedded or remote. \n\nIf the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.\n\nNote: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. \n\nMaximum length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__completedCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "completed count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "completedCount",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Indicates the number of times that the recipient has been through a signing completion. \n\nIf this number is greater than `0` for a signing group, only the user who previously completed may sign again.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__creationReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "creation reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "creationReason",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The reason why the recipient was created (for example, `sender`). Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['inPersonSigner__customFields'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom fields %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "customField",
          "check": "inPersonSigner_customFieldsAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['inPersonSigner_customFields__customField'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom field: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customField",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "inPersonSigner_customFieldsAttribute",
      "nextStatement":     "inPersonSigner_customFieldsAttribute",    
    });
  }
};


Blockly.Blocks['inPersonSigner__declinedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedDateTime",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The date and time the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__declinedReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedReason",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The reason the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__defaultRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "default recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "defaultRecipient",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "When set to **true**,\nthis is the default recipient for the envelope.\nThis option is used when creating an envelope from a template.\n",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__deliveredDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivered date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveredDateTime",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The date and time that the envelope was delivered to the recipient. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__deliveryMethod'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveryMethod",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__deliveryMethodMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__designatorId'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorId",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__designatorIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorIdGuid",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "email",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The signer's email address in an eNotary flow.\n\nUse only when `inPersonSigningType` is `notary`.\nFor regular in-person-signer flow, use `signerEmail` instead.\n",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__emailMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "email metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates whether the `email` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__embeddedRecipientStartURL'] = {
  init: function() {
    this.jsonInit({
      "message0": "embedded recipient start url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "embeddedRecipientStartURL",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. \n\nIf set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.\n\nIt is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.\n\nIf the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` ",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['inPersonSigner__excludedDocuments'] = {
  init: function() {
    this.jsonInit({
      "message0": "excluded documents %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "excludedDocument",
          "check": "inPersonSigner_excludedDocumentsAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.\n\nWhen enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['inPersonSigner_excludedDocuments__excludedDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "excluded document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "excludedDocument",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "inPersonSigner_excludedDocumentsAttribute",
      "nextStatement":     "inPersonSigner_excludedDocumentsAttribute",    
    });
  }
};


Blockly.Blocks['inPersonSigner__faxNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "faxNumber",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__faxNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__hostEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "host email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hostEmail",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The email address of the signing host.\nThis is the DocuSign user that is hosting the in-person signing session.\n\nRequired when `inPersonSigningType` is `inPersonSigner`.\nFor eNotary flow, use `email` instead.\n\nMaximum Length: 100 characters.\n",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__hostEmailMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "host email metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates whether the `hostEmail` property is editable.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__hostName'] = {
  init: function() {
    this.jsonInit({
      "message0": "host name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hostName",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The name of the signing host.\nThis is the DocuSign user that is hosting the in-person signing session.\n\nRequired when `inPersonSigningType` is `inPersonSigner`.\nFor eNotary flow, use `name` instead.\n\nMaximum Length: 100 characters.\n",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__hostNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "host name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates whether the `hostName` property is editable.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__idCheckConfigurationName'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "idCheckConfigurationName",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.\n- `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.\n- `ID Check $`: The  recipient must answer detailed security questions. \n\n**Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__idCheckConfigurationNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__inPersonSigningType'] = {
  init: function() {
    this.jsonInit({
      "message0": "in person signing type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "inPersonSigningType",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Specifies whether the envelope uses the eNotary feature.\nValid values:\n\n* `inPersonSigner`: The envelope uses the normal in-person signing flow.\n* `notary`: The envelope uses the eNotary in-person signing flow.\n",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__inPersonSigningTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "in person signing type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates whether the `inPersonSigningType` property is editable.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__inheritEmailNotificationConfiguration'] = {
  init: function() {
    this.jsonInit({
      "message0": "inherit email notification configuration: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "inheritEmailNotificationConfiguration",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. ",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__lockedRecipientPhoneAuthEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient phone auth editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientPhoneAuthEditable",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__lockedRecipientSmsEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient sms editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientSmsEditable",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The signer's full legal name in an eNotary flow.\n\nRequired when `inPersonSigningType` is `notary`.\nFor a regular in-person-signer flow, use `signerName` instead.\n\nMaximum Length: 100 characters.\n",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__note'] = {
  init: function() {
    this.jsonInit({
      "message0": "note: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "note",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "A note sent to the in-person signer in the signing email.\nThis note is visible only to this recipient.\n\nMaximum Length: 1000 characters.\n",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__noteMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "note metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates whether the `note` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the document.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__recipientSuppliesTabs'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient supplies tabs: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientSuppliesTabs",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "When set to **true**, specifies that the recipient creates the tabs.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__recipientType'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientType",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The recipient type, as specified by the following values:\n- `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.\n- `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.\n- `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.\n- `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.\n- `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.\n- `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.\n- `seal`: Electronic seal recipients represent legal entities.\n- `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.\n- `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__recipientTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates whether the `recipientType` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__requireIdLookup'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireIdLookup",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. ",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__requireIdLookupMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates whether the `requireIdLookup` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__requireSignOnPaper'] = {
  init: function() {
    this.jsonInit({
      "message0": "require sign on paper: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireSignOnPaper",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__requireSignerCertificate'] = {
  init: function() {
    this.jsonInit({
      "message0": "require signer certificate: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireSignerCertificate",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.\n\nThis parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the `recipientSignatureProviders` parameter for other types of digital certificates. \n\nSet this parameter to `safe` to use a SAFE-BioPharma certificate.\n\nThe signer must be enrolled in the SAFE program to sign with a SAFE certificate.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__requireUploadSignature'] = {
  init: function() {
    this.jsonInit({
      "message0": "require upload signature: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireUploadSignature",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "When set to **true**, the signer is required to upload a new signature, even if they have a pre-adopted signature in their personal DocuSign account.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__roleName'] = {
  init: function() {
    this.jsonInit({
      "message0": "role name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "roleName",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__routingOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "routingOrder",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Specifies the routing order of the recipient in the envelope. ",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__routingOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates whether the `routingOrder` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__sentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentDateTime",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The UTC DateTime when the envelope was sent. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__signInEachLocation'] = {
  init: function() {
    this.jsonInit({
      "message0": "sign in each location: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signInEachLocation",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once).",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__signInEachLocationMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "sign in each location metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates whether the `signInEachLocation` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__signedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "signed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signedDateTime",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__signerEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signerEmail",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The in-person signer's email address.\n\nRequired when `inPersonSigningType` is `inPersonSigner`.\nFor eNotary flow, use `email` instead.\n\nMaximum Length: 100 characters.\n\n",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__signerEmailMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer email metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates if the sender can edit the in-person signer's email address.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__signerFirstName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer first name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signerFirstName",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The signer's first name.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__signerFirstNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer first name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates if the `signerFirstName` property is editable.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__signerLastName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer last name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signerLastName",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The signer's last name.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__signerLastNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer last name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates whether the `signerLastName` property is editable.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__signerName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signerName",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The in-person signer's full legal name.\n\nRequired when `inPersonSigningType` is `inPersonSigner`.\nFor eNotary flow, use `name` instead.\n\nMaximum Length: 100 characters.\n",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__signerNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Metadata that indicates whether the `signerName` property is editable.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__signingGroupId'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupId",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Not applicable. You cannot use a signing group for an in-person signer.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__signingGroupIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 150,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__signingGroupName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupName",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The recipient's status. Read only. \n\nPossible values:\n\n- `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.\n- `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.\n- `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).\n- `declined`: The recipient declined to sign the document(s) in the envelope.\n- `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.\n- `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.\n- `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.\n- `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__statusCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "status code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "statusCode",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The code associated with the recipient's status. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__suppressEmails'] = {
  init: function() {
    this.jsonInit({
      "message0": "suppress emails: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "suppressEmails",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__totalTabCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "total tab count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "totalTabCount",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The total number of tabs in the documents. Read only.",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};
Blockly.Blocks['inPersonSigner__userId'] = {
  init: function() {
    this.jsonInit({
      "message0": "user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userId",
          "text": ""
        }
      ],
      "colour": 150,
      "tooltip": "The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.\n",
      "helpUrl": "",
      "previousStatement": "inPersonSignerAttribute",
      "nextStatement":     "inPersonSignerAttribute",    
    });
  }
};

// initialHere
Blockly.Blocks['initialHere'] = {
  init: function() {
    this.jsonInit({
      "message0": "initial here %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "initialHereAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "A tab that allows the recipient to initial the document. May\nbe optional.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__initialHere Attributes
Blockly.Blocks['initialHere__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__optional'] = {
  init: function() {
    this.jsonInit({
      "message0": "optional: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "optional",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "When set to **true**, the recipient does not need to complete this tab to complete the signing process.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__optionalMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "optional metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `optional` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "The page number on which the tab is located. For supplemental documents, this value must be `1`.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__scaleValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "scale value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "scaleValue",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__scaleValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "scale value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `scaleValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['initialHere__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "initialHere_tabGroupLabelsAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['initialHere_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "initialHere_tabGroupLabelsAttribute",
      "nextStatement":     "initialHere_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['initialHere__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (+2, -7)\n",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 153,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (+2, -7)\n",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};
Blockly.Blocks['initialHere__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 153,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "initialHereAttribute",
      "nextStatement":     "initialHereAttribute",    
    });
  }
};

// inlineTemplate
Blockly.Blocks['inlineTemplate'] = {
  init: function() {
    this.jsonInit({
      "message0": "inline template %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "inlineTemplateAttribute"
        }
      ],
      "colour": 156,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// compositeTemplate__inlineTemplate Attributes
Blockly.Blocks['inlineTemplate__sequence'] = {
  init: function() {
    this.jsonInit({
      "message0": "sequence: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sequence",
          "text": ""
        }
      ],
      "colour": 156,
      "tooltip": "Specifies the order in which templates are overlaid.",
      "helpUrl": "",
      "previousStatement": "inlineTemplateAttribute",
      "nextStatement":     "inlineTemplateAttribute",    
    });
  }
};

// intermediary
Blockly.Blocks['intermediary'] = {
  init: function() {
    this.jsonInit({
      "message0": "intermediary %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "intermediaryAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipients__intermediary Attributes
Blockly.Blocks['intermediary__accessCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessCode",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. \n\nMaximum Length: 50 characters and it must conform to the account's access code format setting.\n\nIf blank, but the signer `accessCode` property is set in the envelope, then that value is used.\n\nIf blank and the signer `accessCode` property is not set, then the access code is not required.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__accessCodeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Metadata that indicates whether the `accessCode` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__addAccessCodeToEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "add access code to email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "addAccessCodeToEmail",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__additionalNotificationsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "additional notifications metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__allowSystemOverrideForLockedRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow system override for locked recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowSystemOverrideForLockedRecipient",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__clientUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "client user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "clientUserId",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Specifies whether the recipient is embedded or remote. \n\nIf the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.\n\nNote: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. \n\nMaximum length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__completedCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "completed count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "completedCount",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['intermediary__customFields'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom fields %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "customField",
          "check": "intermediary_customFieldsAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['intermediary_customFields__customField'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom field: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customField",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "intermediary_customFieldsAttribute",
      "nextStatement":     "intermediary_customFieldsAttribute",    
    });
  }
};


Blockly.Blocks['intermediary__declinedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedDateTime",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The date and time the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__declinedReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedReason",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The reason the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__deliveredDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivered date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveredDateTime",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The date and time that the envelope was delivered to the recipient. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__deliveryMethod'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveryMethod",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__deliveryMethodMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__designatorId'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorId",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__designatorIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorIdGuid",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "email",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The recipient's email address. Notification of the document to sign is sent to this email address. \n\nMaximum length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__emailMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "email metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Metadata that indicates whether the `email` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__embeddedRecipientStartURL'] = {
  init: function() {
    this.jsonInit({
      "message0": "embedded recipient start url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "embeddedRecipientStartURL",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. \n\nIf set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.\n\nIt is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.\n\nIf the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` ",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['intermediary__excludedDocuments'] = {
  init: function() {
    this.jsonInit({
      "message0": "excluded documents %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "excludedDocument",
          "check": "intermediary_excludedDocumentsAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.\n\nWhen enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['intermediary_excludedDocuments__excludedDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "excluded document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "excludedDocument",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "intermediary_excludedDocumentsAttribute",
      "nextStatement":     "intermediary_excludedDocumentsAttribute",    
    });
  }
};


Blockly.Blocks['intermediary__faxNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "faxNumber",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__faxNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__firstName'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "firstName",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The recipient's first name. Maximum Length: 50 characters.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__firstNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Metadata that indicates whether the `firstame` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__fullName'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fullName",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__fullNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__idCheckConfigurationName'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "idCheckConfigurationName",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.\n- `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.\n- `ID Check $`: The  recipient must answer detailed security questions. \n\n**Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__idCheckConfigurationNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__inheritEmailNotificationConfiguration'] = {
  init: function() {
    this.jsonInit({
      "message0": "inherit email notification configuration: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "inheritEmailNotificationConfiguration",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. ",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__lastName'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lastName",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The recipient's last name.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__lastNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Metadata that indicates whether the `lastName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__lockedRecipientPhoneAuthEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient phone auth editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientPhoneAuthEditable",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__lockedRecipientSmsEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient sms editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientSmsEditable",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The full legal name of the recipient. Maximum Length: 100 characters.\n\n**Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__note'] = {
  init: function() {
    this.jsonInit({
      "message0": "note: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "note",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "A note sent to the recipient in the signing email.\nThis note is unique to this recipient.\nIn the user interface,\nit appears near the upper left corner\nof the document\non the signing screen.\n\nMaximum Length: 1000 characters.\n",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__noteMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "note metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Metadata that indicates whether the `note` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the document.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__recipientType'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientType",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The recipient type, as specified by the following values:\n- `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.\n- `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.\n- `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.\n- `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.\n- `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.\n- `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.\n- `seal`: Electronic seal recipients represent legal entities.\n- `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.\n- `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__recipientTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Metadata that indicates whether the `recipientType` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__requireIdLookup'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireIdLookup",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. ",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__requireIdLookupMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Metadata that indicates whether the `requireIdLookup` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__roleName'] = {
  init: function() {
    this.jsonInit({
      "message0": "role name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "roleName",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__routingOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "routingOrder",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Specifies the routing order of the recipient in the envelope. ",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__routingOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Metadata that indicates whether the `routingOrder` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__sentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentDateTime",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The UTC DateTime when the envelope was sent. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__signedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "signed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signedDateTime",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__signingGroupId'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupId",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\n**Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. ",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__signingGroupIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 159,
      "tooltip": "Metadata that indicates whether the `signingGroupId` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__signingGroupName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupName",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "Optional. The name of the signing group. \n\nMaximum Length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The recipient's status. Read only. \n\nPossible values:\n\n- `autoresponded`: The recipientÃƒÂ¢Ã‚Â€Ã‚Â™s email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.\n- `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.\n- `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).\n- `declined`: The recipient declined to sign the document(s) in the envelope.\n- `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.\n- `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.\n- `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.\n- `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.\n",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__statusCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "status code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "statusCode",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The code associated with the recipient's status. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__suppressEmails'] = {
  init: function() {
    this.jsonInit({
      "message0": "suppress emails: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "suppressEmails",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__totalTabCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "total tab count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "totalTabCount",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The total number of tabs in the documents. Read only.",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};
Blockly.Blocks['intermediary__userId'] = {
  init: function() {
    this.jsonInit({
      "message0": "user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userId",
          "text": ""
        }
      ],
      "colour": 159,
      "tooltip": "The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.\n",
      "helpUrl": "",
      "previousStatement": "intermediaryAttribute",
      "nextStatement":     "intermediaryAttribute",    
    });
  }
};

// lastName
Blockly.Blocks['lastName'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "lastNameAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "A tab that displays the recipient's last name. This tab\ntakes the recipient's name as entered in the recipient\ninformation, splits it into sections based on spaces and\nuses the last section as the last name.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__lastName Attributes
Blockly.Blocks['lastName__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "The page number on which the tab is located. For supplemental documents, this value must be `1`.\n",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['lastName__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "lastName_tabGroupLabelsAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['lastName_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "lastName_tabGroupLabelsAttribute",
      "nextStatement":     "lastName_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['lastName__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 162,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};
Blockly.Blocks['lastName__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 162,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "lastNameAttribute",
      "nextStatement":     "lastNameAttribute",    
    });
  }
};

// list
Blockly.Blocks['list'] = {
  init: function() {
    this.jsonInit({
      "message0": "list %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "listAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "This tab offers a list of options to choose from.\nThe `listItems`\nproperty contains a list of\n[`listItem`](https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/listItem)\nobjects to specify the selectable options.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__list Attributes
Blockly.Blocks['list__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__listSelectedValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "list selected value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "listSelectedValue",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The value in the list that is selected by default.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__listSelectedValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "list selected value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `listSelectedValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The page number on which the tab is located. For supplemental documents, this value must be `1`.\n",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__requireAll'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireAll",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "When set to **true** and shared is true, information must be entered in this field to complete the envelope. ",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__requireAllMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `requireAll` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__requireInitialOnSharedChange'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireInitialOnSharedChange",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__requireInitialOnSharedChangeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "When set to **true**, the signer is required to fill out this tab.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__senderRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderRequired",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "When set to **true**, the sender must populate the tab before an envelope can be sent using the template. \n\nThis value tab can only be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired` value of true cannot be deleted from an envelope.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__senderRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `senderRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__shared'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "shared",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "When set to **true**, this custom tab is shared.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__sharedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `shared` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['list__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "list_tabGroupLabelsAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['list_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "list_tabGroupLabelsAttribute",
      "nextStatement":     "list_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['list__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The value to use when the item is selected.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 165,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};
Blockly.Blocks['list__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 165,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "listAttribute",
      "nextStatement":     "listAttribute",    
    });
  }
};

// listCustomField
Blockly.Blocks['listCustomField'] = {
  init: function() {
    this.jsonInit({
      "message0": "list custom field %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "listCustomFieldAttribute"
        }
      ],
      "colour": 168,
      "tooltip": "This object represents a list custom field from which envelope creators and senders can select custom data.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// AccountCustomFields__listCustomField Attributes
Blockly.Blocks['listCustomField__configurationType'] = {
  init: function() {
    this.jsonInit({
      "message0": "configuration type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "configurationType",
          "text": ""
        }
      ],
      "colour": 168,
      "tooltip": "If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.",
      "helpUrl": "",
      "previousStatement": "listCustomFieldAttribute",
      "nextStatement":     "listCustomFieldAttribute",    
    });
  }
};
Blockly.Blocks['listCustomField__fieldId'] = {
  init: function() {
    this.jsonInit({
      "message0": "field id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fieldId",
          "text": ""
        }
      ],
      "colour": 168,
      "tooltip": "The id of the custom field.",
      "helpUrl": "",
      "previousStatement": "listCustomFieldAttribute",
      "nextStatement":     "listCustomFieldAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['listCustomField__listItems'] = {
  init: function() {
    this.jsonInit({
      "message0": "list items %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "listItem",
          "check": "listCustomField_listItemsAttribute"
        }
      ],
      "colour": 168,
      "tooltip": "An array of strings that represents the options in a list.\n\nMaximum length: 2048 characters, but each individual option string can only be a maximum of 100 characters.",
      "helpUrl": "",
      "previousStatement": "listCustomFieldAttribute",
      "nextStatement":     "listCustomFieldAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['listCustomField_listItems__listItem'] = {
  init: function() {
    this.jsonInit({
      "message0": "list item: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "listItem",
          "text": ""
        }
      ],
      "colour": 168,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "listCustomField_listItemsAttribute",
      "nextStatement":     "listCustomField_listItemsAttribute",    
    });
  }
};


Blockly.Blocks['listCustomField__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 168,
      "tooltip": "The name of the custom field.",
      "helpUrl": "",
      "previousStatement": "listCustomFieldAttribute",
      "nextStatement":     "listCustomFieldAttribute",    
    });
  }
};
Blockly.Blocks['listCustomField__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 168,
      "tooltip": "When set to **true**, senders are required to select an option from the list before they can send the envelope.",
      "helpUrl": "",
      "previousStatement": "listCustomFieldAttribute",
      "nextStatement":     "listCustomFieldAttribute",    
    });
  }
};
Blockly.Blocks['listCustomField__show'] = {
  init: function() {
    this.jsonInit({
      "message0": "show: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "show",
          "text": ""
        }
      ],
      "colour": 168,
      "tooltip": "When set to **true**, the field displays in the **Envelope Custom Fields** section when a user creates or sends an envelope.",
      "helpUrl": "",
      "previousStatement": "listCustomFieldAttribute",
      "nextStatement":     "listCustomFieldAttribute",    
    });
  }
};
Blockly.Blocks['listCustomField__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 168,
      "tooltip": "The value of the custom field. This is the value that the user who creates or sends the envelope selects from the list.",
      "helpUrl": "",
      "previousStatement": "listCustomFieldAttribute",
      "nextStatement":     "listCustomFieldAttribute",    
    });
  }
};

// listItem
Blockly.Blocks['listItem'] = {
  init: function() {
    this.jsonInit({
      "message0": "list item %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "listItemAttribute"
        }
      ],
      "colour": 171,
      "tooltip": "One of the selectable items\nin the `listItems` property\nof a [`list`](https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/list) tab.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// list__listItem Attributes
Blockly.Blocks['listItem__selected'] = {
  init: function() {
    this.jsonInit({
      "message0": "selected: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "selected",
          "text": ""
        }
      ],
      "colour": 171,
      "tooltip": "When set to **true**, indicates that this item is the default selection shown to a signer. \n\nOnly one selection can be set as the default.",
      "helpUrl": "",
      "previousStatement": "listItemAttribute",
      "nextStatement":     "listItemAttribute",    
    });
  }
};
Blockly.Blocks['listItem__selectedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "selected metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 171,
      "tooltip": "Metadata that indicates whether the `selected` property is editable.",
      "helpUrl": "",
      "previousStatement": "listItemAttribute",
      "nextStatement":     "listItemAttribute",    
    });
  }
};
Blockly.Blocks['listItem__text'] = {
  init: function() {
    this.jsonInit({
      "message0": "text: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "text",
          "text": ""
        }
      ],
      "colour": 171,
      "tooltip": "Specifies the text that is shown in the dropdown list. ",
      "helpUrl": "",
      "previousStatement": "listItemAttribute",
      "nextStatement":     "listItemAttribute",    
    });
  }
};
Blockly.Blocks['listItem__textMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "text metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 171,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "listItemAttribute",
      "nextStatement":     "listItemAttribute",    
    });
  }
};
Blockly.Blocks['listItem__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 171,
      "tooltip": "Specifies the value that is used when the list item is selected.",
      "helpUrl": "",
      "previousStatement": "listItemAttribute",
      "nextStatement":     "listItemAttribute",    
    });
  }
};
Blockly.Blocks['listItem__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 171,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "listItemAttribute",
      "nextStatement":     "listItemAttribute",    
    });
  }
};

// localePolicyTab
Blockly.Blocks['localePolicyTab'] = {
  init: function() {
    this.jsonInit({
      "message0": "locale policy tab %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "localePolicyTabAttribute"
        }
      ],
      "colour": 174,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// approve__localePolicyTab Attributes
Blockly.Blocks['localePolicyTab__addressFormat'] = {
  init: function() {
    this.jsonInit({
      "message0": "address format: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "addressFormat",
          "text": ""
        }
      ],
      "colour": 174,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "localePolicyTabAttribute",
      "nextStatement":     "localePolicyTabAttribute",    
    });
  }
};
Blockly.Blocks['localePolicyTab__calendarType'] = {
  init: function() {
    this.jsonInit({
      "message0": "calendar type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "calendarType",
          "text": ""
        }
      ],
      "colour": 174,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "localePolicyTabAttribute",
      "nextStatement":     "localePolicyTabAttribute",    
    });
  }
};
Blockly.Blocks['localePolicyTab__cultureName'] = {
  init: function() {
    this.jsonInit({
      "message0": "culture name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "cultureName",
          "text": ""
        }
      ],
      "colour": 174,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "localePolicyTabAttribute",
      "nextStatement":     "localePolicyTabAttribute",    
    });
  }
};
Blockly.Blocks['localePolicyTab__currencyNegativeFormat'] = {
  init: function() {
    this.jsonInit({
      "message0": "currency negative format: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "currencyNegativeFormat",
          "text": ""
        }
      ],
      "colour": 174,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "localePolicyTabAttribute",
      "nextStatement":     "localePolicyTabAttribute",    
    });
  }
};
Blockly.Blocks['localePolicyTab__currencyPositiveFormat'] = {
  init: function() {
    this.jsonInit({
      "message0": "currency positive format: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "currencyPositiveFormat",
          "text": ""
        }
      ],
      "colour": 174,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "localePolicyTabAttribute",
      "nextStatement":     "localePolicyTabAttribute",    
    });
  }
};
Blockly.Blocks['localePolicyTab__customDateFormat'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom date format: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customDateFormat",
          "text": ""
        }
      ],
      "colour": 174,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "localePolicyTabAttribute",
      "nextStatement":     "localePolicyTabAttribute",    
    });
  }
};
Blockly.Blocks['localePolicyTab__customTimeFormat'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom time format: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTimeFormat",
          "text": ""
        }
      ],
      "colour": 174,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "localePolicyTabAttribute",
      "nextStatement":     "localePolicyTabAttribute",    
    });
  }
};
Blockly.Blocks['localePolicyTab__dateFormat'] = {
  init: function() {
    this.jsonInit({
      "message0": "date format: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "dateFormat",
          "text": ""
        }
      ],
      "colour": 174,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "localePolicyTabAttribute",
      "nextStatement":     "localePolicyTabAttribute",    
    });
  }
};
Blockly.Blocks['localePolicyTab__initialFormat'] = {
  init: function() {
    this.jsonInit({
      "message0": "initial format: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "initialFormat",
          "text": ""
        }
      ],
      "colour": 174,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "localePolicyTabAttribute",
      "nextStatement":     "localePolicyTabAttribute",    
    });
  }
};
Blockly.Blocks['localePolicyTab__nameFormat'] = {
  init: function() {
    this.jsonInit({
      "message0": "name format: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "nameFormat",
          "text": ""
        }
      ],
      "colour": 174,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "localePolicyTabAttribute",
      "nextStatement":     "localePolicyTabAttribute",    
    });
  }
};
Blockly.Blocks['localePolicyTab__timeFormat'] = {
  init: function() {
    this.jsonInit({
      "message0": "time format: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "timeFormat",
          "text": ""
        }
      ],
      "colour": 174,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "localePolicyTabAttribute",
      "nextStatement":     "localePolicyTabAttribute",    
    });
  }
};
Blockly.Blocks['localePolicyTab__timeZone'] = {
  init: function() {
    this.jsonInit({
      "message0": "time zone: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "timeZone",
          "text": ""
        }
      ],
      "colour": 174,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "localePolicyTabAttribute",
      "nextStatement":     "localePolicyTabAttribute",    
    });
  }
};

// matchBox
Blockly.Blocks['matchBox'] = {
  init: function() {
    this.jsonInit({
      "message0": "match box %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "matchBoxAttribute"
        }
      ],
      "colour": 177,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// document__matchBox Attributes
Blockly.Blocks['matchBox__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 177,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "matchBoxAttribute",
      "nextStatement":     "matchBoxAttribute",    
    });
  }
};
Blockly.Blocks['matchBox__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 177,
      "tooltip": "Specifies the page number on which the tab is located.\nMust be 1 for supplemental documents.\n",
      "helpUrl": "",
      "previousStatement": "matchBoxAttribute",
      "nextStatement":     "matchBoxAttribute",    
    });
  }
};
Blockly.Blocks['matchBox__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 177,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "matchBoxAttribute",
      "nextStatement":     "matchBoxAttribute",    
    });
  }
};
Blockly.Blocks['matchBox__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 177,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "matchBoxAttribute",
      "nextStatement":     "matchBoxAttribute",    
    });
  }
};
Blockly.Blocks['matchBox__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 177,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "matchBoxAttribute",
      "nextStatement":     "matchBoxAttribute",    
    });
  }
};

// mergeField
Blockly.Blocks['mergeField'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "mergeFieldAttribute"
        }
      ],
      "colour": 180,
      "tooltip": "Contains information for transfering values between Salesforce data fields and DocuSign Tabs.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// approve__mergeField Attributes
Blockly.Blocks['mergeField__allowSenderToEdit'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow sender to edit: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowSenderToEdit",
          "text": ""
        }
      ],
      "colour": 180,
      "tooltip": "When **true**, the sender can modify the value of the `mergeField` tab during the sending process.",
      "helpUrl": "",
      "previousStatement": "mergeFieldAttribute",
      "nextStatement":     "mergeFieldAttribute",    
    });
  }
};
Blockly.Blocks['mergeField__allowSenderToEditMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow sender to edit metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 180,
      "tooltip": "Metadata that indicates if the sender can edit the `allowSenderToEdit` property.",
      "helpUrl": "",
      "previousStatement": "mergeFieldAttribute",
      "nextStatement":     "mergeFieldAttribute",    
    });
  }
};
Blockly.Blocks['mergeField__configurationType'] = {
  init: function() {
    this.jsonInit({
      "message0": "configuration type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "configurationType",
          "text": ""
        }
      ],
      "colour": 180,
      "tooltip": "If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.",
      "helpUrl": "",
      "previousStatement": "mergeFieldAttribute",
      "nextStatement":     "mergeFieldAttribute",    
    });
  }
};
Blockly.Blocks['mergeField__configurationTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "configuration type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 180,
      "tooltip": "Metadata that indicates if the sender can edit the `configurationType` property.",
      "helpUrl": "",
      "previousStatement": "mergeFieldAttribute",
      "nextStatement":     "mergeFieldAttribute",    
    });
  }
};
Blockly.Blocks['mergeField__path'] = {
  init: function() {
    this.jsonInit({
      "message0": "path: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "path",
          "text": ""
        }
      ],
      "colour": 180,
      "tooltip": "Sets the object associated with the custom tab. Currently this is the Salesforce Object.",
      "helpUrl": "",
      "previousStatement": "mergeFieldAttribute",
      "nextStatement":     "mergeFieldAttribute",    
    });
  }
};
Blockly.Blocks['mergeField__pathExtendedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "path extended metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 180,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "mergeFieldAttribute",
      "nextStatement":     "mergeFieldAttribute",    
    });
  }
};
Blockly.Blocks['mergeField__pathMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "path metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 180,
      "tooltip": "Metadata that indicates whether the `path` property is editable.\n",
      "helpUrl": "",
      "previousStatement": "mergeFieldAttribute",
      "nextStatement":     "mergeFieldAttribute",    
    });
  }
};
Blockly.Blocks['mergeField__row'] = {
  init: function() {
    this.jsonInit({
      "message0": "row: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "row",
          "text": ""
        }
      ],
      "colour": 180,
      "tooltip": "Specifies the row number in a Salesforce table that the merge field value corresponds to.",
      "helpUrl": "",
      "previousStatement": "mergeFieldAttribute",
      "nextStatement":     "mergeFieldAttribute",    
    });
  }
};
Blockly.Blocks['mergeField__rowMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "row metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 180,
      "tooltip": "Metadata that indicates whether the `row` property is editable.\n",
      "helpUrl": "",
      "previousStatement": "mergeFieldAttribute",
      "nextStatement":     "mergeFieldAttribute",    
    });
  }
};
Blockly.Blocks['mergeField__writeBack'] = {
  init: function() {
    this.jsonInit({
      "message0": "write back: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "writeBack",
          "text": ""
        }
      ],
      "colour": 180,
      "tooltip": "When **true**, data entered into the merge field during Signing will update the mapped Salesforce field.",
      "helpUrl": "",
      "previousStatement": "mergeFieldAttribute",
      "nextStatement":     "mergeFieldAttribute",    
    });
  }
};
Blockly.Blocks['mergeField__writeBackMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "write back metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 180,
      "tooltip": "Metadata that indicates if the sender can edit the `writeBack` property.",
      "helpUrl": "",
      "previousStatement": "mergeFieldAttribute",
      "nextStatement":     "mergeFieldAttribute",    
    });
  }
};

// money
Blockly.Blocks['money'] = {
  init: function() {
    this.jsonInit({
      "message0": "money %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "moneyAttribute"
        }
      ],
      "colour": 183,
      "tooltip": "Describes information\nabout the `total` of a payment.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// paymentDetails__money Attributes
Blockly.Blocks['money__amountInBaseUnit'] = {
  init: function() {
    this.jsonInit({
      "message0": "amount in base unit: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "amountInBaseUnit",
          "text": ""
        }
      ],
      "colour": 183,
      "tooltip": "The total payment amount\nin the currency's base unit.\nFor example, for USD\nthe base currency is one cent.\n",
      "helpUrl": "",
      "previousStatement": "moneyAttribute",
      "nextStatement":     "moneyAttribute",    
    });
  }
};
Blockly.Blocks['money__currency'] = {
  init: function() {
    this.jsonInit({
      "message0": "currency: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "currency",
          "text": ""
        }
      ],
      "colour": 183,
      "tooltip": "The three-letter\n[ISO 4217][ISO4217] currency code for the payment.\n\nFor example:\n\n* AUD Australian dollar\n* CAD Canadian dollar\n* EUR Euro\n* GBP Great Britain pound\n* USD United States dollar\n\nThis is a read-only property.\n\n[ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217\n",
      "helpUrl": "",
      "previousStatement": "moneyAttribute",
      "nextStatement":     "moneyAttribute",    
    });
  }
};
Blockly.Blocks['money__displayAmount'] = {
  init: function() {
    this.jsonInit({
      "message0": "display amount: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "displayAmount",
          "text": ""
        }
      ],
      "colour": 183,
      "tooltip": "The payment amount as displayed\nin the `currency`.\n\nFor example, if the payment amount\nis USD 12.59,\nthe `amountInBaseUnit` is 1259 (cents),\nand the displayed amount is `$12.59 USD`.\n\nThis is a read-only property.\n",
      "helpUrl": "",
      "previousStatement": "moneyAttribute",
      "nextStatement":     "moneyAttribute",    
    });
  }
};

// nameValue
Blockly.Blocks['nameValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "name value %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "nameValueAttribute"
        }
      ],
      "colour": 186,
      "tooltip": "A name-value pair that describes an item and provides a value for the item.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// document__nameValue Attributes
Blockly.Blocks['nameValue__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 186,
      "tooltip": "The name of the item.",
      "helpUrl": "",
      "previousStatement": "nameValueAttribute",
      "nextStatement":     "nameValueAttribute",    
    });
  }
};
Blockly.Blocks['nameValue__originalValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "originalValue",
          "text": ""
        }
      ],
      "colour": 186,
      "tooltip": "The initial value of the item.",
      "helpUrl": "",
      "previousStatement": "nameValueAttribute",
      "nextStatement":     "nameValueAttribute",    
    });
  }
};
Blockly.Blocks['nameValue__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 186,
      "tooltip": "The current value of the item.",
      "helpUrl": "",
      "previousStatement": "nameValueAttribute",
      "nextStatement":     "nameValueAttribute",    
    });
  }
};

// notarize
Blockly.Blocks['notarize'] = {
  init: function() {
    this.jsonInit({
      "message0": "notarize %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "notarizeAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "A tab that alerts notary recipients that\nthey must take action on the page.\nOnly one notarize tab can appear on a page.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__notarize Attributes
Blockly.Blocks['notarize__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "The page number being accessed.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "When set to **true**, the signer is required to fill out this tab.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['notarize__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "notarize_tabGroupLabelsAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['notarize_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "notarize_tabGroupLabelsAttribute",
      "nextStatement":     "notarize_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['notarize__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\n",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 189,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\n",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};
Blockly.Blocks['notarize__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 189,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "notarizeAttribute",
      "nextStatement":     "notarizeAttribute",    
    });
  }
};

// notaryHost
Blockly.Blocks['notaryHost'] = {
  init: function() {
    this.jsonInit({
      "message0": "notary host %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "notaryHostAttribute"
        }
      ],
      "colour": 192,
      "tooltip": "This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.\n\nIt describes information about the notary host.\nThe following information is required\nwhen using the eNotary in-person signing flow:\n\n* `name`: Specifies the notary's full legal name.\n* `email`: Specifies the notary's email address.\n* `recipientId`: A unique ID number for the notary signing host.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// inPersonSigner__notaryHost Attributes
Blockly.Blocks['notaryHost__accessCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessCode",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. \n\nMaximum Length: 50 characters and it must conform to the account's access code format setting.\n\nIf blank, but the signer `accessCode` property is set in the envelope, then that value is used.\n\nIf blank and the signer `accessCode` property is not set, then the access code is not required.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__accessCodeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 192,
      "tooltip": "Metadata that indicates whether the `accessCode` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__addAccessCodeToEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "add access code to email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "addAccessCodeToEmail",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__allowSystemOverrideForLockedRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow system override for locked recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowSystemOverrideForLockedRecipient",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__clientUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "client user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "clientUserId",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "Specifies whether the recipient is embedded or remote. \n\nIf the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.\n\nNote: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. \n\nMaximum length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__completedCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "completed count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "completedCount",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['notaryHost__customFields'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom fields %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "customField",
          "check": "notaryHost_customFieldsAttribute"
        }
      ],
      "colour": 192,
      "tooltip": "An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['notaryHost_customFields__customField'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom field: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customField",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "notaryHost_customFieldsAttribute",
      "nextStatement":     "notaryHost_customFieldsAttribute",    
    });
  }
};


Blockly.Blocks['notaryHost__declinedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedDateTime",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "The date and time the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__declinedReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedReason",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "The reason the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__deliveredDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivered date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveredDateTime",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "The date and time that the envelope was delivered to the recipient. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__deliveryMethod'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveryMethod",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__deliveryMethodMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 192,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__designatorId'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorId",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__designatorIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorIdGuid",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "email",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "The notary's email address.\n\nMaximum Length: 100 characters.\n",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__emailMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "email metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 192,
      "tooltip": "Metadata that indicates whether the `email` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__embeddedRecipientStartURL'] = {
  init: function() {
    this.jsonInit({
      "message0": "embedded recipient start url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "embeddedRecipientStartURL",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. \n\nIf set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.\n\nIt is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.\n\nIf the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` ",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__faxNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "faxNumber",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__faxNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 192,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__hostRecipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "host recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hostRecipientId",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__idCheckConfigurationName'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "idCheckConfigurationName",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.\n- `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.\n- `ID Check $`: The  recipient must answer detailed security questions. \n\n**Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__idCheckConfigurationNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 192,
      "tooltip": "Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__inheritEmailNotificationConfiguration'] = {
  init: function() {
    this.jsonInit({
      "message0": "inherit email notification configuration: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "inheritEmailNotificationConfiguration",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. ",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__lockedRecipientPhoneAuthEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient phone auth editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientPhoneAuthEditable",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__lockedRecipientSmsEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient sms editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientSmsEditable",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "The notary's full legal name.\n\nMaximum Length: 100 characters.\n",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 192,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__note'] = {
  init: function() {
    this.jsonInit({
      "message0": "note: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "note",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "A note sent to the notary in the signing email.\nThis note is visible only to this notary.\n\nMaximum Length: 1000 characters.\n",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__noteMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "note metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 192,
      "tooltip": "Metadata that indicates whether the `note` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__recipientType'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientType",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "The recipient type, as specified by the following values:\n- `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.\n- `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.\n- `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.\n- `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.\n- `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.\n- `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.\n- `seal`: Electronic seal recipients represent legal entities.\n- `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.\n- `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__recipientTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 192,
      "tooltip": "Metadata that indicates whether the `recipientType` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__requireIdLookup'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireIdLookup",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. ",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__requireIdLookupMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 192,
      "tooltip": "Metadata that indicates whether the `requireIdLookup` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__roleName'] = {
  init: function() {
    this.jsonInit({
      "message0": "role name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "roleName",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__routingOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "routingOrder",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "Specifies the routing order of the recipient in the envelope. ",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__routingOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 192,
      "tooltip": "Metadata that indicates whether the `routingOrder` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__sentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentDateTime",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "The UTC DateTime when the envelope was sent. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__signedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "signed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signedDateTime",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__signingGroupId'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupId",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\n**Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. ",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__signingGroupIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 192,
      "tooltip": "Metadata that indicates whether the `signingGroupId` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__signingGroupName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupName",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "Optional. The name of the signing group. \n\nMaximum Length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "The recipient's status. Read only. \n\nPossible values:\n\n- `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.\n- `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.\n- `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).\n- `declined`: The recipient declined to sign the document(s) in the envelope.\n- `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.\n- `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.\n- `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.\n- `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__statusCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "status code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "statusCode",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "The code associated with the recipient's status. Read only. ",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__suppressEmails'] = {
  init: function() {
    this.jsonInit({
      "message0": "suppress emails: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "suppressEmails",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__totalTabCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "total tab count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "totalTabCount",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "The total number of tabs in the documents. Read only.",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};
Blockly.Blocks['notaryHost__userId'] = {
  init: function() {
    this.jsonInit({
      "message0": "user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userId",
          "text": ""
        }
      ],
      "colour": 192,
      "tooltip": "The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.\n",
      "helpUrl": "",
      "previousStatement": "notaryHostAttribute",
      "nextStatement":     "notaryHostAttribute",    
    });
  }
};

// note
Blockly.Blocks['note'] = {
  init: function() {
    this.jsonInit({
      "message0": "note %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "noteAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "A tab that displays additional information, in the form of a\nnote, for the recipient.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__note Attributes
Blockly.Blocks['note__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "The page number on which the tab is located. For supplemental documents, this value must be `1`.\n",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__shared'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "shared",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "When set to **true**, this custom tab is shared.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__sharedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `shared` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['note__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "note_tabGroupLabelsAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['note_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "note_tabGroupLabelsAttribute",
      "nextStatement":     "note_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['note__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 195,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};
Blockly.Blocks['note__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 195,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "noteAttribute",
      "nextStatement":     "noteAttribute",    
    });
  }
};

// notification
Blockly.Blocks['notification'] = {
  init: function() {
    this.jsonInit({
      "message0": "notification %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "notificationAttribute"
        }
      ],
      "colour": 198,
      "tooltip": "A complex element that specifies the notification settings for the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// envelope__notification Attributes
Blockly.Blocks['notification__useAccountDefaults'] = {
  init: function() {
    this.jsonInit({
      "message0": "use account defaults: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "useAccountDefaults",
          "text": ""
        }
      ],
      "colour": 198,
      "tooltip": "When set to **true**, the account default notification settings are used for the envelope, overriding the reminders and expirations settings. When set to **false**, the reminders and expirations settings specified in this request are used.",
      "helpUrl": "",
      "previousStatement": "notificationAttribute",
      "nextStatement":     "notificationAttribute",    
    });
  }
};

// number
Blockly.Blocks['number'] = {
  init: function() {
    this.jsonInit({
      "message0": "number %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "numberAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "A tab that allows the recipient to enter numbers and decimal\n(.) points.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__number Attributes
Blockly.Blocks['number__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__concealValueOnDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "concealValueOnDocument",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.\n\nWhen an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.\n\nThis setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__concealValueOnDocumentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `concealValueOnDocument` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__disableAutoSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "disableAutoSize",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__disableAutoSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `disableAutoSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__formula'] = {
  init: function() {
    this.jsonInit({
      "message0": "formula: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formula",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "Contains the formula\nfor calculating the value of\nthis tab.\n\nUse a tab's `tabLabel`,\nenclosed in brackets,\nto refer to it.\n\nFor example,\nyou want to present the total cost\nof two items, tax included.\n\nThe cost of each item is stored\nin number tabs labeled Item1 and Item2.\nThe tax rate is in a number tab\nlabeled TaxRate.\n\nThe formula string for this property\nwould be:\n`([Item1] + [Item2]) * (1 + [TaxRate])`\n\nSee [Calculated Fields][calculatedfields]\nin the DocuSign Support Center\nto learn more about formulas.\n\nMaximum Length: 2000 characters\n\n[calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields\n",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__formulaMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "formula metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata indicating if the sender can edit the `formula` property.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__isPaymentAmount'] = {
  init: function() {
    this.jsonInit({
      "message0": "is payment amount: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "isPaymentAmount",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true**, sets this as a payment tab. Can only be used with Text, Number, Formula, or List tabs. The value of the tab must be a number. ",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__isPaymentAmountMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "is payment amount metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `isPaymentAmount` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__maxLength'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "maxLength",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "An optional value that describes the maximum length of the property when the property is a string.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__maxLengthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `maxLength` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__originalValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "originalValue",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The initial value of the tab when it was sent to the recipient. ",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__originalValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `originalValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The page number on which the tab is located. For supplemental documents, this value must be `1`.\n",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__requireAll'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireAll",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true** and shared is true, information must be entered in this field to complete the envelope. ",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__requireAllMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `requireAll` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__requireInitialOnSharedChange'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireInitialOnSharedChange",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__requireInitialOnSharedChangeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true**, the signer is required to fill out this tab.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__senderRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderRequired",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true**, the sender must populate the tab before an envelope can be sent using the template. \n\nThis value tab can only be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired` value of true cannot be deleted from an envelope.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__senderRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `senderRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__shared'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "shared",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true**, this custom tab is shared.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__sharedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `shared` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['number__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "number_tabGroupLabelsAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['number_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "number_tabGroupLabelsAttribute",
      "nextStatement":     "number_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['number__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__validationMessage'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationMessage",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The message displayed if the custom tab fails input validation (either custom of embedded).",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__validationMessageMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `validationMessage` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__validationPattern'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation pattern: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationPattern",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "A regular expression used to validate input for the tab.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__validationPatternMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation pattern metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `validationPattern` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 201,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};
Blockly.Blocks['number__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 201,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "numberAttribute",
      "nextStatement":     "numberAttribute",    
    });
  }
};

// page
Blockly.Blocks['page'] = {
  init: function() {
    this.jsonInit({
      "message0": "page %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "pageAttribute"
        }
      ],
      "colour": 204,
      "tooltip": "Description of a page of a document.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// envelopeDocument__page Attributes
Blockly.Blocks['page__dpi'] = {
  init: function() {
    this.jsonInit({
      "message0": "dpi: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "dpi",
          "text": ""
        }
      ],
      "colour": 204,
      "tooltip": "The number of dots per inch used for the page image.",
      "helpUrl": "",
      "previousStatement": "pageAttribute",
      "nextStatement":     "pageAttribute",    
    });
  }
};
Blockly.Blocks['page__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 204,
      "tooltip": "The height of the page in pixels.",
      "helpUrl": "",
      "previousStatement": "pageAttribute",
      "nextStatement":     "pageAttribute",    
    });
  }
};
Blockly.Blocks['page__imageBytes'] = {
  init: function() {
    this.jsonInit({
      "message0": "image bytes: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "imageBytes",
          "text": ""
        }
      ],
      "colour": 204,
      "tooltip": "The number of image bytes.",
      "helpUrl": "",
      "previousStatement": "pageAttribute",
      "nextStatement":     "pageAttribute",    
    });
  }
};
Blockly.Blocks['page__mimeType'] = {
  init: function() {
    this.jsonInit({
      "message0": "mime type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mimeType",
          "text": ""
        }
      ],
      "colour": 204,
      "tooltip": "The MIME type.",
      "helpUrl": "",
      "previousStatement": "pageAttribute",
      "nextStatement":     "pageAttribute",    
    });
  }
};
Blockly.Blocks['page__pageId'] = {
  init: function() {
    this.jsonInit({
      "message0": "page id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageId",
          "text": ""
        }
      ],
      "colour": 204,
      "tooltip": "The id of the page.",
      "helpUrl": "",
      "previousStatement": "pageAttribute",
      "nextStatement":     "pageAttribute",    
    });
  }
};
Blockly.Blocks['page__sequence'] = {
  init: function() {
    this.jsonInit({
      "message0": "sequence: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sequence",
          "text": ""
        }
      ],
      "colour": 204,
      "tooltip": "The sequence of the page in the document, or page number.",
      "helpUrl": "",
      "previousStatement": "pageAttribute",
      "nextStatement":     "pageAttribute",    
    });
  }
};
Blockly.Blocks['page__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 204,
      "tooltip": "The width of the page in pixels.",
      "helpUrl": "",
      "previousStatement": "pageAttribute",
      "nextStatement":     "pageAttribute",    
    });
  }
};

// pathExtendedElement
Blockly.Blocks['pathExtendedElement'] = {
  init: function() {
    this.jsonInit({
      "message0": "path extended element %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "pathExtendedElementAttribute"
        }
      ],
      "colour": 207,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// mergeField__pathExtendedElement Attributes
Blockly.Blocks['pathExtendedElement__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 207,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "pathExtendedElementAttribute",
      "nextStatement":     "pathExtendedElementAttribute",    
    });
  }
};
Blockly.Blocks['pathExtendedElement__type'] = {
  init: function() {
    this.jsonInit({
      "message0": "type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "type",
          "text": ""
        }
      ],
      "colour": 207,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "pathExtendedElementAttribute",
      "nextStatement":     "pathExtendedElementAttribute",    
    });
  }
};
Blockly.Blocks['pathExtendedElement__typeName'] = {
  init: function() {
    this.jsonInit({
      "message0": "type name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "typeName",
          "text": ""
        }
      ],
      "colour": 207,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "pathExtendedElementAttribute",
      "nextStatement":     "pathExtendedElementAttribute",    
    });
  }
};

// paymentDetails
Blockly.Blocks['paymentDetails'] = {
  init: function() {
    this.jsonInit({
      "message0": "payment details %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "paymentDetailsAttribute"
        }
      ],
      "colour": 210,
      "tooltip": "When a formula tab\nhas a `paymentDetails` property,\nthe formula tab\nis a payment item.\nSee [Requesting Payments Along with Signatures][paymentguide]\nin the DocuSign Support Center\nto learn more about payments.\n\n[paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// formulaTab__paymentDetails Attributes
// Item which is an array of Scalar
Blockly.Blocks['paymentDetails__allowedPaymentMethods'] = {
  init: function() {
    this.jsonInit({
      "message0": "allowed payment methods %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "allowedPaymentMethod",
          "check": "paymentDetails_allowedPaymentMethodsAttribute"
        }
      ],
      "colour": 210,
      "tooltip": "An array of accepted payment methods:\n\n* `CreditCard`\n* `ApplePay`\n* `AndroidPay`\n* `BankAccount`\n\nFor example, if you only accept credit cards and ACH transfers, you would set this property to:\n\n`'[\"BankAccount\", \"CreditCard\"]'`\n\nDo not specify `BankAccount` (ACH) if you are also using in-person signing.\n",
      "helpUrl": "",
      "previousStatement": "paymentDetailsAttribute",
      "nextStatement":     "paymentDetailsAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['paymentDetails_allowedPaymentMethods__allowedPaymentMethod'] = {
  init: function() {
    this.jsonInit({
      "message0": "allowed payment method: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowedPaymentMethod",
          "text": ""
        }
      ],
      "colour": 210,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "paymentDetails_allowedPaymentMethodsAttribute",
      "nextStatement":     "paymentDetails_allowedPaymentMethodsAttribute",    
    });
  }
};


Blockly.Blocks['paymentDetails__chargeId'] = {
  init: function() {
    this.jsonInit({
      "message0": "charge id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "chargeId",
          "text": ""
        }
      ],
      "colour": 210,
      "tooltip": "The GUID set by the payment gateway (such as Stripe) that identifies a transaction. The `chargeId` is created when authorizing a payment and must be referenced when completing a payment.",
      "helpUrl": "",
      "previousStatement": "paymentDetailsAttribute",
      "nextStatement":     "paymentDetailsAttribute",    
    });
  }
};
Blockly.Blocks['paymentDetails__currencyCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "currency code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "currencyCode",
          "text": ""
        }
      ],
      "colour": 210,
      "tooltip": "Specifies the three-letter\n[ISO 4217][ISO4217] currency code for the payment.\n\nSupported currencies are:\n\n* AUD: Australian dollar\n* CAD: Canadian dollar\n* EUR: Euro\n* GBP: Great Britain pound\n* USD: United States dollar\n\nSpecifying any other ISO 4217 code for payments is an error.\n\n[ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217\n",
      "helpUrl": "",
      "previousStatement": "paymentDetailsAttribute",
      "nextStatement":     "paymentDetailsAttribute",    
    });
  }
};
Blockly.Blocks['paymentDetails__currencyCodeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "currency code metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 210,
      "tooltip": "Metadata that indicates whether the `currencyCode` property is editable.",
      "helpUrl": "",
      "previousStatement": "paymentDetailsAttribute",
      "nextStatement":     "paymentDetailsAttribute",    
    });
  }
};
Blockly.Blocks['paymentDetails__customMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom metadata: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customMetadata",
          "text": ""
        }
      ],
      "colour": 210,
      "tooltip": "This is a sender-defined field that passes any extra metadata about the payment that will show up in the Authorize.net transaction under **Description** in the merchant gateway portal. The custom metadata will be recorded in downloaded Authorize.net reports. \n\nThe following example shows what the **Description** field of the transaction will look like: \n\n`<envelopeID>, <customMetadata>`",
      "helpUrl": "",
      "previousStatement": "paymentDetailsAttribute",
      "nextStatement":     "paymentDetailsAttribute",    
    });
  }
};
Blockly.Blocks['paymentDetails__customMetadataRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom metadata required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customMetadataRequired",
          "text": ""
        }
      ],
      "colour": 210,
      "tooltip": "A sender-defined field that specifies whether custom metadata is required for the transaction. When set to **true**, custom metadata is required. This property only applies if you are using an Authorize.net payment gateway account.",
      "helpUrl": "",
      "previousStatement": "paymentDetailsAttribute",
      "nextStatement":     "paymentDetailsAttribute",    
    });
  }
};
Blockly.Blocks['paymentDetails__customerId'] = {
  init: function() {
    this.jsonInit({
      "message0": "customer id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customerId",
          "text": ""
        }
      ],
      "colour": 210,
      "tooltip": "The customer ID.",
      "helpUrl": "",
      "previousStatement": "paymentDetailsAttribute",
      "nextStatement":     "paymentDetailsAttribute",    
    });
  }
};
Blockly.Blocks['paymentDetails__gatewayAccountId'] = {
  init: function() {
    this.jsonInit({
      "message0": "gateway account id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "gatewayAccountId",
          "text": ""
        }
      ],
      "colour": 210,
      "tooltip": "A GUID that identifies the payment gateway\nconnected to the sender's DocuSign account.\n\nThere is no public API\nfor connecting payment gateway accounts\nYou must connect and manage payment gateway accounts\nthrough the DocuSign Admin console\nand through your chosen payment gateway.\n\nYou can get the gateway account ID\nin the Payments section\nof the DocuSign Admin console.\n\n\n[paymentgateways]:  https://support.docusign.com/en/guides/managing-payment-gateways\n",
      "helpUrl": "",
      "previousStatement": "paymentDetailsAttribute",
      "nextStatement":     "paymentDetailsAttribute",    
    });
  }
};
Blockly.Blocks['paymentDetails__gatewayAccountIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "gateway account id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 210,
      "tooltip": "Metadata that indicates whether the `gatewayAccountId` property is editable.",
      "helpUrl": "",
      "previousStatement": "paymentDetailsAttribute",
      "nextStatement":     "paymentDetailsAttribute",    
    });
  }
};
Blockly.Blocks['paymentDetails__gatewayDisplayName'] = {
  init: function() {
    this.jsonInit({
      "message0": "gateway display name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "gatewayDisplayName",
          "text": ""
        }
      ],
      "colour": 210,
      "tooltip": "Display name of the gateway connected to sender's Docusign account.\n\nPossible values are: Stripe, Braintree, Authorize.Net.",
      "helpUrl": "",
      "previousStatement": "paymentDetailsAttribute",
      "nextStatement":     "paymentDetailsAttribute",    
    });
  }
};
Blockly.Blocks['paymentDetails__gatewayName'] = {
  init: function() {
    this.jsonInit({
      "message0": "gateway name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "gatewayName",
          "text": ""
        }
      ],
      "colour": 210,
      "tooltip": "Name of the gateway connected to sender's DocuSign account.\n\nPossible values are:\n\n* `Stripe`\n* `Braintree`\n* `AuthorizeDotNet`",
      "helpUrl": "",
      "previousStatement": "paymentDetailsAttribute",
      "nextStatement":     "paymentDetailsAttribute",    
    });
  }
};
Blockly.Blocks['paymentDetails__paymentOption'] = {
  init: function() {
    this.jsonInit({
      "message0": "payment option: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "paymentOption",
          "text": ""
        }
      ],
      "colour": 210,
      "tooltip": "This property specifies how the signer's collected payment details will be used.\n\nPossible values:\n\n- `authorize`: The payment details will be used to collect payment. This is the default value.\n- `save`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway.\n- `save_and_authorize`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway and will also be used to collect payment.",
      "helpUrl": "",
      "previousStatement": "paymentDetailsAttribute",
      "nextStatement":     "paymentDetailsAttribute",    
    });
  }
};
Blockly.Blocks['paymentDetails__paymentSourceId'] = {
  init: function() {
    this.jsonInit({
      "message0": "payment source id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "paymentSourceId",
          "text": ""
        }
      ],
      "colour": 210,
      "tooltip": "The payment source ID.",
      "helpUrl": "",
      "previousStatement": "paymentDetailsAttribute",
      "nextStatement":     "paymentDetailsAttribute",    
    });
  }
};
Blockly.Blocks['paymentDetails__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 210,
      "tooltip": "This read-only property describes the status of a payment.\n\n* `new`<br>\n  This is a new payment request.\n  The envelope has been created,\n  but no payment authorizations have been made.\n\n* `auth_complete`<br>\n  A recipient has entered their credit card information,\n  but the envelope has not been completed.\n  The card has not been charged.\n\n* `payment_complete`<br>\n  The recipient's card has been charged.\n\n* `payment_capture_failed`<br>\n  Final charge failed.\n  This can happen when too much time\n  passes between authorizing the payment\n  and completing the document.\n\n* `future_payment_saved` <br>\nThe recipient's payment method has been saved to the sender's payment gateway.\n",
      "helpUrl": "",
      "previousStatement": "paymentDetailsAttribute",
      "nextStatement":     "paymentDetailsAttribute",    
    });
  }
};

// paymentLineItem
Blockly.Blocks['paymentLineItem'] = {
  init: function() {
    this.jsonInit({
      "message0": "payment line item %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "paymentLineItemAttribute"
        }
      ],
      "colour": 213,
      "tooltip": "A line item describes details\nabout an individual line item\nin a payment request.\n\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// paymentDetails__paymentLineItem Attributes
Blockly.Blocks['paymentLineItem__amountReference'] = {
  init: function() {
    this.jsonInit({
      "message0": "amount reference: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "amountReference",
          "text": ""
        }
      ],
      "colour": 213,
      "tooltip": "This is a the `tabLabel`\nthat specifies the amount paid\nfor the line items.\n\n",
      "helpUrl": "",
      "previousStatement": "paymentLineItemAttribute",
      "nextStatement":     "paymentLineItemAttribute",    
    });
  }
};
Blockly.Blocks['paymentLineItem__description'] = {
  init: function() {
    this.jsonInit({
      "message0": "description: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "description",
          "text": ""
        }
      ],
      "colour": 213,
      "tooltip": "A sender-defined description of the line item.\n",
      "helpUrl": "",
      "previousStatement": "paymentLineItemAttribute",
      "nextStatement":     "paymentLineItemAttribute",    
    });
  }
};
Blockly.Blocks['paymentLineItem__itemCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "item code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "itemCode",
          "text": ""
        }
      ],
      "colour": 213,
      "tooltip": "This is the sender-defined\nSKU, inventory number, or other item code\nfor the line item.\n",
      "helpUrl": "",
      "previousStatement": "paymentLineItemAttribute",
      "nextStatement":     "paymentLineItemAttribute",    
    });
  }
};
Blockly.Blocks['paymentLineItem__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 213,
      "tooltip": "This is a sender-defined\nproduct name, service name,\nor other designation for the line item.\n",
      "helpUrl": "",
      "previousStatement": "paymentLineItemAttribute",
      "nextStatement":     "paymentLineItemAttribute",    
    });
  }
};

// polyLine
Blockly.Blocks['polyLine'] = {
  init: function() {
    this.jsonInit({
      "message0": "poly line %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "polyLineAttribute"
        }
      ],
      "colour": 216,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// polyLineOverlay__polyLine Attributes
Blockly.Blocks['polyLine__x1'] = {
  init: function() {
    this.jsonInit({
      "message0": "x1: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "x1",
          "text": ""
        }
      ],
      "colour": 216,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "polyLineAttribute",
      "nextStatement":     "polyLineAttribute",    
    });
  }
};
Blockly.Blocks['polyLine__x2'] = {
  init: function() {
    this.jsonInit({
      "message0": "x2: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "x2",
          "text": ""
        }
      ],
      "colour": 216,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "polyLineAttribute",
      "nextStatement":     "polyLineAttribute",    
    });
  }
};
Blockly.Blocks['polyLine__y1'] = {
  init: function() {
    this.jsonInit({
      "message0": "y1: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "y1",
          "text": ""
        }
      ],
      "colour": 216,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "polyLineAttribute",
      "nextStatement":     "polyLineAttribute",    
    });
  }
};
Blockly.Blocks['polyLine__y2'] = {
  init: function() {
    this.jsonInit({
      "message0": "y2: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "y2",
          "text": ""
        }
      ],
      "colour": 216,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "polyLineAttribute",
      "nextStatement":     "polyLineAttribute",    
    });
  }
};

// polyLineOverlay
Blockly.Blocks['polyLineOverlay'] = {
  init: function() {
    this.jsonInit({
      "message0": "poly line overlay %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "polyLineOverlayAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__polyLineOverlay Attributes
Blockly.Blocks['polyLineOverlay__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__overlayType'] = {
  init: function() {
    this.jsonInit({
      "message0": "overlay type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "overlayType",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "The type of overlay to use. The API currently supports only the `outline` overlay type.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__overlayTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "overlay type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `overlayType` property is editable.\n",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "The page number being accessed.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__shared'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "shared",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "When set to **true**, indicates that the tab is shared.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__sharedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `shared` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['polyLineOverlay__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "polyLineOverlay_tabGroupLabelsAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['polyLineOverlay_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "polyLineOverlay_tabGroupLabelsAttribute",
      "nextStatement":     "polyLineOverlay_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['polyLineOverlay__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 219,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};
Blockly.Blocks['polyLineOverlay__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 219,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "polyLineOverlayAttribute",
      "nextStatement":     "polyLineOverlayAttribute",    
    });
  }
};

// powerForm
Blockly.Blocks['powerForm'] = {
  init: function() {
    this.jsonInit({
      "message0": "power form %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "powerFormAttribute"
        }
      ],
      "colour": 222,
      "tooltip": "Contains details about a PowerForm.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// envelope__powerForm Attributes
Blockly.Blocks['powerForm__createdBy'] = {
  init: function() {
    this.jsonInit({
      "message0": "created by: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "createdBy",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The id of the user who created the PowerForm.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__createdDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "created date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "createdDateTime",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The UTC DateTime when the item was created.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__emailBody'] = {
  init: function() {
    this.jsonInit({
      "message0": "email body: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "emailBody",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The body of the email message sent to the recipients. \n\nMaximum length: 10000 characters.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__emailSubject'] = {
  init: function() {
    this.jsonInit({
      "message0": "email subject: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "emailSubject",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The subject line of the email message that is sent to all recipients.\n\nFor information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).\n",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__instructions'] = {
  init: function() {
    this.jsonInit({
      "message0": "instructions: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "instructions",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The instructions that display on the landing page for the first recipient. These instructions are important if the recipient accesses the PowerForm by a method other than email. If instructions are entered, they display as an introduction after the recipient accesses the PowerForm.  Limit: 2000 characters.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__isActive'] = {
  init: function() {
    this.jsonInit({
      "message0": "is active: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "isActive",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "When **true**, indicates that the PowerForm is active and can be sent to recipients. This is the default value.\n\nWhen **false**, the PowerForm cannot be emailed or accessed by a recipient, even if they arrive at the PowerForm URL. \n\nIf a recipient attempts to sign an inactive PowerForm, an error message informs the recipient that the document is not active and suggests that they contact the sender.\n",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__lastUsed'] = {
  init: function() {
    this.jsonInit({
      "message0": "last used: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lastUsed",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The UTC DateTime when the PowerForm was last used.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__limitUseInterval'] = {
  init: function() {
    this.jsonInit({
      "message0": "limit use interval: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "limitUseInterval",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The length of time before the same recipient can sign the same PowerForm. This property is used in combination with the `limitUseIntervalUnits` property.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__limitUseIntervalEnabled'] = {
  init: function() {
    this.jsonInit({
      "message0": "limit use interval enabled: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "limitUseIntervalEnabled",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "When **true**, the `limitUseInterval` is enabled.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__limitUseIntervalUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "limit use interval units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "limitUseIntervalUnits",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The units associated with the `limitUseInterval`. Valid values are:\n\n- `minutes`\n- `hours\n- `days`\n- `weeks`\n- `months`\n\nFor example, to limit a recipient to signing once per year, set the `limitUseInterval` to 365 and the `limitUseIntervalUnits` to `days`.\n",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__maxUseEnabled'] = {
  init: function() {
    this.jsonInit({
      "message0": "max use enabled: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "maxUseEnabled",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "When set to **true**, you can set a maximum number of uses for the PowerForm.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The name of the PowerForm.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__powerFormId'] = {
  init: function() {
    this.jsonInit({
      "message0": "power form id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "powerFormId",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The id of the PowerForm.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__powerFormUrl'] = {
  init: function() {
    this.jsonInit({
      "message0": "power form url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "powerFormUrl",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The URL for the PowerForm.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__senderName'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderName",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The sender's name.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__senderUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderUserId",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The id of the sender.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__signingMode'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing mode: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingMode",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The signing mode to use. Valid values are:\n \n- `email`: Verifies the recipient's identity using email authentication before the recipient can sign a document. The recipient enters their email address and then clicks **Begin Signing** to begin the signing process. The system then sends an email message with a validation code for the PowerForm to the recipient. If the recipient does not provide a valid email address, they cannot open and sign the document.  \n- `direct`: Does not require any verification. After a recipient enters their email address and clicks **Begin Signing**, a new browser tab opens and the recipient can immediately begin the signing process. Because the recipient's identity is not verified by using email authentication, we strongly recommend that you only use the `direct` signing mode when the PowerForm is accessible behind a secure portal where the recipient's identity is already authenticated, or where another form of authentication is specified for the recipient in the DocuSign template (for example, an access code, phone authentication, or ID check).  \n\n**Note**: In the account settings, `enablePowerFormDirect` must be **true** to use `direct` as the `signingMode`.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__templateId'] = {
  init: function() {
    this.jsonInit({
      "message0": "template id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateId",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The id of the template used to create the PowerForm.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__templateName'] = {
  init: function() {
    this.jsonInit({
      "message0": "template name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateName",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The name of the template used to create the PowerForm.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__timesUsed'] = {
  init: function() {
    this.jsonInit({
      "message0": "times used: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "timesUsed",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The number of times the PowerForm has been used. ",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__uri'] = {
  init: function() {
    this.jsonInit({
      "message0": "uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "uri",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The URI for the PowerForm.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};
Blockly.Blocks['powerForm__usesRemaining'] = {
  init: function() {
    this.jsonInit({
      "message0": "uses remaining: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "usesRemaining",
          "text": ""
        }
      ],
      "colour": 222,
      "tooltip": "The number of times the PowerForm can still be used.",
      "helpUrl": "",
      "previousStatement": "powerFormAttribute",
      "nextStatement":     "powerFormAttribute",    
    });
  }
};

// powerFormRecipient
Blockly.Blocks['powerFormRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "power form recipient %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "powerFormRecipientAttribute"
        }
      ],
      "colour": 225,
      "tooltip": "**Note**: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// powerForm__powerFormRecipient Attributes
Blockly.Blocks['powerFormRecipient__accessCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessCode",
          "text": ""
        }
      ],
      "colour": 225,
      "tooltip": "(Optional) The access code that the recipient must enter to access the PowerForm.\n\nMaximum Length: 50 characters. The code must also conform to the account's access code format setting.\n\nIf blank but the signer accessCode property is set in the envelope, then that value is used.\n\nIf blank and the signer accessCode property is not set, then the access code is not required.",
      "helpUrl": "",
      "previousStatement": "powerFormRecipientAttribute",
      "nextStatement":     "powerFormRecipientAttribute",    
    });
  }
};
Blockly.Blocks['powerFormRecipient__accessCodeLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessCodeLocked",
          "text": ""
        }
      ],
      "colour": 225,
      "tooltip": "When **true**, the `accessCode` property is locked and cannot be edited.",
      "helpUrl": "",
      "previousStatement": "powerFormRecipientAttribute",
      "nextStatement":     "powerFormRecipientAttribute",    
    });
  }
};
Blockly.Blocks['powerFormRecipient__accessCodeRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessCodeRequired",
          "text": ""
        }
      ],
      "colour": 225,
      "tooltip": "When **true**, the recipient must enter the `accessCode` to access the PowerForm.",
      "helpUrl": "",
      "previousStatement": "powerFormRecipientAttribute",
      "nextStatement":     "powerFormRecipientAttribute",    
    });
  }
};
Blockly.Blocks['powerFormRecipient__email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "email",
          "text": ""
        }
      ],
      "colour": 225,
      "tooltip": "The email address of the recipient.\n\n**Note**: For self-service documents where you do not know who the recipients are in advance, you can leave this property blank.",
      "helpUrl": "",
      "previousStatement": "powerFormRecipientAttribute",
      "nextStatement":     "powerFormRecipientAttribute",    
    });
  }
};
Blockly.Blocks['powerFormRecipient__emailLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "email locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "emailLocked",
          "text": ""
        }
      ],
      "colour": 225,
      "tooltip": "When **true**, the recipient's email address is locked and cannot be edited.",
      "helpUrl": "",
      "previousStatement": "powerFormRecipientAttribute",
      "nextStatement":     "powerFormRecipientAttribute",    
    });
  }
};
Blockly.Blocks['powerFormRecipient__idCheckConfigurationName'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "idCheckConfigurationName",
          "text": ""
        }
      ],
      "colour": 225,
      "tooltip": "The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.\n- `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.\n- `ID Check $`: The  recipient must answer detailed security questions. \n\n**Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.",
      "helpUrl": "",
      "previousStatement": "powerFormRecipientAttribute",
      "nextStatement":     "powerFormRecipientAttribute",    
    });
  }
};
Blockly.Blocks['powerFormRecipient__idCheckRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "idCheckRequired",
          "text": ""
        }
      ],
      "colour": 225,
      "tooltip": "Indicates if authentication is configured for the account. Valid values are:\n\n- `always`: Authentication checks are performed on every envelope. \n- `never`: Authentication checks are not performed on any envelopes. \n- `optional:` Authentication is configurable per envelope.",
      "helpUrl": "",
      "previousStatement": "powerFormRecipientAttribute",
      "nextStatement":     "powerFormRecipientAttribute",    
    });
  }
};
Blockly.Blocks['powerFormRecipient__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 225,
      "tooltip": "The name of the PowerForm recipient.\n\n**Note**: For self-service documents where you do not know who the recipients are in advance, you can leave this property blank.",
      "helpUrl": "",
      "previousStatement": "powerFormRecipientAttribute",
      "nextStatement":     "powerFormRecipientAttribute",    
    });
  }
};
Blockly.Blocks['powerFormRecipient__recipientType'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientType",
          "text": ""
        }
      ],
      "colour": 225,
      "tooltip": "The recipient type, as specified by the following values:\n- `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.\n- `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.\n- `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.\n- `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.\n- `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.\n- `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.\n- `seal`: Electronic seal recipients represent legal entities.\n- `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.\n- `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.",
      "helpUrl": "",
      "previousStatement": "powerFormRecipientAttribute",
      "nextStatement":     "powerFormRecipientAttribute",    
    });
  }
};
Blockly.Blocks['powerFormRecipient__roleName'] = {
  init: function() {
    this.jsonInit({
      "message0": "role name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "roleName",
          "text": ""
        }
      ],
      "colour": 225,
      "tooltip": "The role associated with the recipient (for example, `Member`).\n\nThis property is required when you are working with template recipients and PowerForm recipients.",
      "helpUrl": "",
      "previousStatement": "powerFormRecipientAttribute",
      "nextStatement":     "powerFormRecipientAttribute",    
    });
  }
};
Blockly.Blocks['powerFormRecipient__routingOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "routingOrder",
          "text": ""
        }
      ],
      "colour": 225,
      "tooltip": "Specifies the routing order of the recipient in the envelope. ",
      "helpUrl": "",
      "previousStatement": "powerFormRecipientAttribute",
      "nextStatement":     "powerFormRecipientAttribute",    
    });
  }
};
Blockly.Blocks['powerFormRecipient__templateRequiresIdLookup'] = {
  init: function() {
    this.jsonInit({
      "message0": "template requires id lookup: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequiresIdLookup",
          "text": ""
        }
      ],
      "colour": 225,
      "tooltip": "When **true**, the template used to create the PowerForm requires ID lookup for the recipient.",
      "helpUrl": "",
      "previousStatement": "powerFormRecipientAttribute",
      "nextStatement":     "powerFormRecipientAttribute",    
    });
  }
};
Blockly.Blocks['powerFormRecipient__userNameLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "user name locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userNameLocked",
          "text": ""
        }
      ],
      "colour": 225,
      "tooltip": "When **true**, the `userName` property for the recipient is locked and cannot be edited.",
      "helpUrl": "",
      "previousStatement": "powerFormRecipientAttribute",
      "nextStatement":     "powerFormRecipientAttribute",    
    });
  }
};

// radio
Blockly.Blocks['radio'] = {
  init: function() {
    this.jsonInit({
      "message0": "radio %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "radioAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "One of the selectable radio buttons\nin the `radios` property\nof a [`radioGroup`](https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/radioGroup) tab.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// radioGroup__radio Attributes
Blockly.Blocks['radio__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "Specifies the page number on which the tab is located.\nMust be 1 for supplemental documents.\n",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "When set to **true**, the signer is required to fill out this tab.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__selected'] = {
  init: function() {
    this.jsonInit({
      "message0": "selected: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "selected",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "When set to **true**, the radio button is selected.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__selectedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "selected metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `selected` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "The status of the item.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 228,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};
Blockly.Blocks['radio__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 228,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioAttribute",
      "nextStatement":     "radioAttribute",    
    });
  }
};

// radioGroup
Blockly.Blocks['radioGroup'] = {
  init: function() {
    this.jsonInit({
      "message0": "radio group %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "radioGroupAttribute"
        }
      ],
      "colour": 231,
      "tooltip": "This group tab is used to place radio buttons on a document.\nThe `radios` property\ncontains a list of\n[`radio`](https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/radio)\nobjects  associated with the group. Only one radio button can\nbe selected in a group.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__radioGroup Attributes
Blockly.Blocks['radioGroup__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 231,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 231,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 231,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 231,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 231,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 231,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__groupName'] = {
  init: function() {
    this.jsonInit({
      "message0": "group name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "groupName",
          "text": ""
        }
      ],
      "colour": 231,
      "tooltip": "The name of the group. The search_text provided in the call automatically performs a wild card search on group_name.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__groupNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "group name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 231,
      "tooltip": "Metadata that indicates whether the `groupName` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 231,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 231,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 231,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 231,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__requireAll'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireAll",
          "text": ""
        }
      ],
      "colour": 231,
      "tooltip": "When set to **true** and shared is true, information must be entered in this field to complete the envelope. ",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__requireAllMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 231,
      "tooltip": "Metadata that indicates whether the `requireAll` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__requireInitialOnSharedChange'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireInitialOnSharedChange",
          "text": ""
        }
      ],
      "colour": 231,
      "tooltip": "Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__requireInitialOnSharedChangeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 231,
      "tooltip": "Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__shared'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "shared",
          "text": ""
        }
      ],
      "colour": 231,
      "tooltip": "When set to **true**, this custom tab is shared.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__sharedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 231,
      "tooltip": "Metadata that indicates whether the `shared` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 231,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 231,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 231,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 231,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 231,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 231,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 231,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};
Blockly.Blocks['radioGroup__tooltipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 231,
      "tooltip": "Metadata that indicates whether the `tooltip` property is editable.",
      "helpUrl": "",
      "previousStatement": "radioGroupAttribute",
      "nextStatement":     "radioGroupAttribute",    
    });
  }
};

// recipientAdditionalNotification
Blockly.Blocks['recipientAdditionalNotification'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient additional notification %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientAdditionalNotificationAttribute"
        }
      ],
      "colour": 234,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// agent__recipientAdditionalNotification Attributes
Blockly.Blocks['recipientAdditionalNotification__secondaryDeliveryMethod'] = {
  init: function() {
    this.jsonInit({
      "message0": "secondary delivery method: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "secondaryDeliveryMethod",
          "text": ""
        }
      ],
      "colour": 234,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "recipientAdditionalNotificationAttribute",
      "nextStatement":     "recipientAdditionalNotificationAttribute",    
    });
  }
};

// recipientAttachment
Blockly.Blocks['recipientAttachment'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient attachment %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientAttachmentAttribute"
        }
      ],
      "colour": 237,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// agent__recipientAttachment Attributes
Blockly.Blocks['recipientAttachment__attachmentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "attachment id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "attachmentId",
          "text": ""
        }
      ],
      "colour": 237,
      "tooltip": "The unique identifier for the attachment.",
      "helpUrl": "",
      "previousStatement": "recipientAttachmentAttribute",
      "nextStatement":     "recipientAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['recipientAttachment__attachmentType'] = {
  init: function() {
    this.jsonInit({
      "message0": "attachment type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "attachmentType",
          "text": ""
        }
      ],
      "colour": 237,
      "tooltip": "Specifies the type of the attachment for the recipient. Possible values are:\n\n- `.htm`\n- `.xml`",
      "helpUrl": "",
      "previousStatement": "recipientAttachmentAttribute",
      "nextStatement":     "recipientAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['recipientAttachment__data'] = {
  init: function() {
    this.jsonInit({
      "message0": "data: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "data",
          "text": ""
        }
      ],
      "colour": 237,
      "tooltip": "A Base64-encoded representation of the attachment that is used to upload and download the file. File attachments may be up to 50 MB in size.",
      "helpUrl": "",
      "previousStatement": "recipientAttachmentAttribute",
      "nextStatement":     "recipientAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['recipientAttachment__label'] = {
  init: function() {
    this.jsonInit({
      "message0": "label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "label",
          "text": ""
        }
      ],
      "colour": 237,
      "tooltip": "An optional label for the attachment.",
      "helpUrl": "",
      "previousStatement": "recipientAttachmentAttribute",
      "nextStatement":     "recipientAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['recipientAttachment__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 237,
      "tooltip": "The name of the attachment.",
      "helpUrl": "",
      "previousStatement": "recipientAttachmentAttribute",
      "nextStatement":     "recipientAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['recipientAttachment__remoteUrl'] = {
  init: function() {
    this.jsonInit({
      "message0": "remote url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "remoteUrl",
          "text": ""
        }
      ],
      "colour": 237,
      "tooltip": "The URL of a previously staged chunked upload. Using a chunked upload enables you to stage a large, chunkable temp file. You then use the `remoteUrl` property to reference the chunked upload as the content in attachment and document-related requests. The `remoteUrl` property cannot be used for downloads.",
      "helpUrl": "",
      "previousStatement": "recipientAttachmentAttribute",
      "nextStatement":     "recipientAttachmentAttribute",    
    });
  }
};

// recipientEmailNotification
Blockly.Blocks['recipientEmailNotification'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient email notification %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientEmailNotificationAttribute"
        }
      ],
      "colour": 240,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// agent__recipientEmailNotification Attributes
Blockly.Blocks['recipientEmailNotification__emailBody'] = {
  init: function() {
    this.jsonInit({
      "message0": "email body: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "emailBody",
          "text": ""
        }
      ],
      "colour": 240,
      "tooltip": "The body of the email message.",
      "helpUrl": "",
      "previousStatement": "recipientEmailNotificationAttribute",
      "nextStatement":     "recipientEmailNotificationAttribute",    
    });
  }
};
Blockly.Blocks['recipientEmailNotification__emailBodyMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "email body metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 240,
      "tooltip": "Metadata that indicates whether the `emailBody` property can be edited.",
      "helpUrl": "",
      "previousStatement": "recipientEmailNotificationAttribute",
      "nextStatement":     "recipientEmailNotificationAttribute",    
    });
  }
};
Blockly.Blocks['recipientEmailNotification__emailSubject'] = {
  init: function() {
    this.jsonInit({
      "message0": "email subject: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "emailSubject",
          "text": ""
        }
      ],
      "colour": 240,
      "tooltip": "The subject line for the email notification.",
      "helpUrl": "",
      "previousStatement": "recipientEmailNotificationAttribute",
      "nextStatement":     "recipientEmailNotificationAttribute",    
    });
  }
};
Blockly.Blocks['recipientEmailNotification__emailSubjectMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "email subject metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 240,
      "tooltip": "Metadata that indicates whether the `emailSubject` property can be edited.",
      "helpUrl": "",
      "previousStatement": "recipientEmailNotificationAttribute",
      "nextStatement":     "recipientEmailNotificationAttribute",    
    });
  }
};
Blockly.Blocks['recipientEmailNotification__supportedLanguage'] = {
  init: function() {
    this.jsonInit({
      "message0": "supported language: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "supportedLanguage",
          "text": ""
        }
      ],
      "colour": 240,
      "tooltip": "The language to use for the standard email format and signing view for a recipient.\n\nFor example, in the recipient's email notification, this setting affects elements such as the standard introductory text describing the request to sign. It also determines the language used for buttons and tabs in both the email notification and the signing experience.\n\n**Note**: This setting affects only DocuSign standard text. Any custom text that you enter for the `emailBody` and `emailSubject` of the notification is not translated, and appears exactly as you enter it.\n\n To retrieve the possible values, use the [Accounts::listSupportedLanguages][ListLang] method.\n\n[ListLang]: /esign/restapi/Accounts/Accounts/listSupportedLanguages/",
      "helpUrl": "",
      "previousStatement": "recipientEmailNotificationAttribute",
      "nextStatement":     "recipientEmailNotificationAttribute",    
    });
  }
};
Blockly.Blocks['recipientEmailNotification__supportedLanguageMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "supported language metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 240,
      "tooltip": "Metadata that indicates whether the `supportedLanguage` property can be edited.",
      "helpUrl": "",
      "previousStatement": "recipientEmailNotificationAttribute",
      "nextStatement":     "recipientEmailNotificationAttribute",    
    });
  }
};

// recipientEvent
Blockly.Blocks['recipientEvent'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient event %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientEventAttribute"
        }
      ],
      "colour": 243,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// eventNotification__recipientEvent Attributes
Blockly.Blocks['recipientEvent__includeDocuments'] = {
  init: function() {
    this.jsonInit({
      "message0": "include documents: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "includeDocuments",
          "text": ""
        }
      ],
      "colour": 243,
      "tooltip": "reserved",
      "helpUrl": "",
      "previousStatement": "recipientEventAttribute",
      "nextStatement":     "recipientEventAttribute",    
    });
  }
};
Blockly.Blocks['recipientEvent__recipientEventStatusCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient event status code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientEventStatusCode",
          "text": ""
        }
      ],
      "colour": 243,
      "tooltip": "Send a webhook notification for the following recipient statuses: Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.",
      "helpUrl": "",
      "previousStatement": "recipientEventAttribute",
      "nextStatement":     "recipientEventAttribute",    
    });
  }
};

// recipientIdentityInputOption
Blockly.Blocks['recipientIdentityInputOption'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient identity input option %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientIdentityInputOptionAttribute"
        }
      ],
      "colour": 246,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// recipientIdentityVerification__recipientIdentityInputOption Attributes
Blockly.Blocks['recipientIdentityInputOption__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 246,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "recipientIdentityInputOptionAttribute",
      "nextStatement":     "recipientIdentityInputOptionAttribute",    
    });
  }
};
Blockly.Blocks['recipientIdentityInputOption__valueType'] = {
  init: function() {
    this.jsonInit({
      "message0": "value type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "valueType",
          "text": ""
        }
      ],
      "colour": 246,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "recipientIdentityInputOptionAttribute",
      "nextStatement":     "recipientIdentityInputOptionAttribute",    
    });
  }
};

// recipientIdentityPhoneNumber
Blockly.Blocks['recipientIdentityPhoneNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient identity phone number %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientIdentityPhoneNumberAttribute"
        }
      ],
      "colour": 249,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// recipientIdentityInputOption__recipientIdentityPhoneNumber Attributes
Blockly.Blocks['recipientIdentityPhoneNumber__countryCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "country code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "countryCode",
          "text": ""
        }
      ],
      "colour": 249,
      "tooltip": "The three-letter code for the user's country.",
      "helpUrl": "",
      "previousStatement": "recipientIdentityPhoneNumberAttribute",
      "nextStatement":     "recipientIdentityPhoneNumberAttribute",    
    });
  }
};
Blockly.Blocks['recipientIdentityPhoneNumber__extension'] = {
  init: function() {
    this.jsonInit({
      "message0": "extension: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "extension",
          "text": ""
        }
      ],
      "colour": 249,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "recipientIdentityPhoneNumberAttribute",
      "nextStatement":     "recipientIdentityPhoneNumberAttribute",    
    });
  }
};
Blockly.Blocks['recipientIdentityPhoneNumber__number'] = {
  init: function() {
    this.jsonInit({
      "message0": "number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "number",
          "text": ""
        }
      ],
      "colour": 249,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "recipientIdentityPhoneNumberAttribute",
      "nextStatement":     "recipientIdentityPhoneNumberAttribute",    
    });
  }
};

// recipientIdentityVerification
Blockly.Blocks['recipientIdentityVerification'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient identity verification %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientIdentityVerificationAttribute"
        }
      ],
      "colour": 252,
      "tooltip": "Specifies ID Verification applied on an envelope by workflow ID. See the [list](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications/list) method in the [IdentityVerifications](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications) resource for more information on how to retrieve workflow IDs available for an account. This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods. ",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// agent__recipientIdentityVerification Attributes
Blockly.Blocks['recipientIdentityVerification__workflowId'] = {
  init: function() {
    this.jsonInit({
      "message0": "workflow id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "workflowId",
          "text": ""
        }
      ],
      "colour": 252,
      "tooltip": "ID of the Identity Verification worklow used to verify recipients' identity. </br> This ID must match one of the [workflowId](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications/list#accountIdentityVerificationWorkflow) available to your account.",
      "helpUrl": "",
      "previousStatement": "recipientIdentityVerificationAttribute",
      "nextStatement":     "recipientIdentityVerificationAttribute",    
    });
  }
};

// recipientPhoneAuthentication
Blockly.Blocks['recipientPhoneAuthentication'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient phone authentication %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientPhoneAuthenticationAttribute"
        }
      ],
      "colour": 255,
      "tooltip": "A complex type that contains the elements:\n\n* `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.\n* `senderProvidedNumbers`: A list of phone numbers that the recipient can use.\n* `recordVoicePrint`: Reserved for DocuSign.\n* `validateRecipProvidedNumber`: Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// agent__recipientPhoneAuthentication Attributes
Blockly.Blocks['recipientPhoneAuthentication__recipMayProvideNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "recip may provide number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipMayProvideNumber",
          "text": ""
        }
      ],
      "colour": 255,
      "tooltip": "Boolean. When set to **true**, the recipient can supply a phone number their choice.",
      "helpUrl": "",
      "previousStatement": "recipientPhoneAuthenticationAttribute",
      "nextStatement":     "recipientPhoneAuthenticationAttribute",    
    });
  }
};
Blockly.Blocks['recipientPhoneAuthentication__recipMayProvideNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recip may provide number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 255,
      "tooltip": "Metadata that indicates whether the `recipMayProvideNumber` property can be edited.",
      "helpUrl": "",
      "previousStatement": "recipientPhoneAuthenticationAttribute",
      "nextStatement":     "recipientPhoneAuthenticationAttribute",    
    });
  }
};
Blockly.Blocks['recipientPhoneAuthentication__recordVoicePrint'] = {
  init: function() {
    this.jsonInit({
      "message0": "record voice print: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recordVoicePrint",
          "text": ""
        }
      ],
      "colour": 255,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "recipientPhoneAuthenticationAttribute",
      "nextStatement":     "recipientPhoneAuthenticationAttribute",    
    });
  }
};
Blockly.Blocks['recipientPhoneAuthentication__recordVoicePrintMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "record voice print metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 255,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "recipientPhoneAuthenticationAttribute",
      "nextStatement":     "recipientPhoneAuthenticationAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['recipientPhoneAuthentication__senderProvidedNumbers'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender provided numbers %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "senderProvidedNumber",
          "check": "recipientPhoneAuthentication_senderProvidedNumbersAttribute"
        }
      ],
      "colour": 255,
      "tooltip": "An array containing a list of phone numbers that the recipient can use for SMS text authentication. ",
      "helpUrl": "",
      "previousStatement": "recipientPhoneAuthenticationAttribute",
      "nextStatement":     "recipientPhoneAuthenticationAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['recipientPhoneAuthentication_senderProvidedNumbers__senderProvidedNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender provided number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderProvidedNumber",
          "text": ""
        }
      ],
      "colour": 255,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "recipientPhoneAuthentication_senderProvidedNumbersAttribute",
      "nextStatement":     "recipientPhoneAuthentication_senderProvidedNumbersAttribute",    
    });
  }
};


Blockly.Blocks['recipientPhoneAuthentication__senderProvidedNumbersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender provided numbers metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 255,
      "tooltip": "Metadata that indicates whether the `senderProvidedNumbers` property can be edited.",
      "helpUrl": "",
      "previousStatement": "recipientPhoneAuthenticationAttribute",
      "nextStatement":     "recipientPhoneAuthenticationAttribute",    
    });
  }
};
Blockly.Blocks['recipientPhoneAuthentication__validateRecipProvidedNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "validate recip provided number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validateRecipProvidedNumber",
          "text": ""
        }
      ],
      "colour": 255,
      "tooltip": " Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "recipientPhoneAuthenticationAttribute",
      "nextStatement":     "recipientPhoneAuthenticationAttribute",    
    });
  }
};
Blockly.Blocks['recipientPhoneAuthentication__validateRecipProvidedNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validate recip provided number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 255,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "recipientPhoneAuthenticationAttribute",
      "nextStatement":     "recipientPhoneAuthenticationAttribute",    
    });
  }
};

// recipientPhoneNumber
Blockly.Blocks['recipientPhoneNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient phone number %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientPhoneNumberAttribute"
        }
      ],
      "colour": 258,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// recipientAdditionalNotification__recipientPhoneNumber Attributes
Blockly.Blocks['recipientPhoneNumber__countryCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "country code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "countryCode",
          "text": ""
        }
      ],
      "colour": 258,
      "tooltip": "The three-letter code for the user's country.",
      "helpUrl": "",
      "previousStatement": "recipientPhoneNumberAttribute",
      "nextStatement":     "recipientPhoneNumberAttribute",    
    });
  }
};
Blockly.Blocks['recipientPhoneNumber__countryCodeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "country code metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 258,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "recipientPhoneNumberAttribute",
      "nextStatement":     "recipientPhoneNumberAttribute",    
    });
  }
};
Blockly.Blocks['recipientPhoneNumber__number'] = {
  init: function() {
    this.jsonInit({
      "message0": "number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "number",
          "text": ""
        }
      ],
      "colour": 258,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "recipientPhoneNumberAttribute",
      "nextStatement":     "recipientPhoneNumberAttribute",    
    });
  }
};
Blockly.Blocks['recipientPhoneNumber__numberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 258,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "recipientPhoneNumberAttribute",
      "nextStatement":     "recipientPhoneNumberAttribute",    
    });
  }
};

// recipientProofFile
Blockly.Blocks['recipientProofFile'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient proof file %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientProofFileAttribute"
        }
      ],
      "colour": 261,
      "tooltip": "The proof file of the recipient. [ID Evidence](https://developers.docusign.com/idevidence-api) uses proof files to store the identification data that recipients submit when verifying their ID with [ID Verification](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications)",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// carbonCopy__recipientProofFile Attributes
Blockly.Blocks['recipientProofFile__isInProofFile'] = {
  init: function() {
    this.jsonInit({
      "message0": "is in proof file: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "isInProofFile",
          "text": ""
        }
      ],
      "colour": 261,
      "tooltip": "Indicates whether a proof file is available for this recipient.",
      "helpUrl": "",
      "previousStatement": "recipientProofFileAttribute",
      "nextStatement":     "recipientProofFileAttribute",    
    });
  }
};

// recipientSignatureInformation
Blockly.Blocks['recipientSignatureInformation'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient signature information %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientSignatureInformationAttribute"
        }
      ],
      "colour": 264,
      "tooltip": "Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.\n\nUsed only with recipient types In Person Signers and Signers.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// inPersonSigner__recipientSignatureInformation Attributes
Blockly.Blocks['recipientSignatureInformation__fontStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "font style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontStyle",
          "text": ""
        }
      ],
      "colour": 264,
      "tooltip": "The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.\n\n- `\"1_DocuSign\"`\n- `\"2_DocuSign\"`\n- `\"3_DocuSign\"`\n- `\"4_DocuSign\"`\n- `\"5_DocuSign\"`\n- `\"6_DocuSign\"`\n- `\"7_DocuSign\"`\n- `\"8_DocuSign\"`\n- `\"Mistral\"`\n- `\"Rage Italic\"`\n",
      "helpUrl": "",
      "previousStatement": "recipientSignatureInformationAttribute",
      "nextStatement":     "recipientSignatureInformationAttribute",    
    });
  }
};
Blockly.Blocks['recipientSignatureInformation__signatureInitials'] = {
  init: function() {
    this.jsonInit({
      "message0": "signature initials: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signatureInitials",
          "text": ""
        }
      ],
      "colour": 264,
      "tooltip": "Specifies the user's signature in initials format.",
      "helpUrl": "",
      "previousStatement": "recipientSignatureInformationAttribute",
      "nextStatement":     "recipientSignatureInformationAttribute",    
    });
  }
};
Blockly.Blocks['recipientSignatureInformation__signatureName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signature name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signatureName",
          "text": ""
        }
      ],
      "colour": 264,
      "tooltip": "Specifies the user's signature name.",
      "helpUrl": "",
      "previousStatement": "recipientSignatureInformationAttribute",
      "nextStatement":     "recipientSignatureInformationAttribute",    
    });
  }
};

// recipientSignatureProvider
Blockly.Blocks['recipientSignatureProvider'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient signature provider %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientSignatureProviderAttribute"
        }
      ],
      "colour": 267,
      "tooltip": "An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// inPersonSigner__recipientSignatureProvider Attributes
Blockly.Blocks['recipientSignatureProvider__sealDocumentsWithTabsOnly'] = {
  init: function() {
    this.jsonInit({
      "message0": "seal documents with tabs only: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sealDocumentsWithTabsOnly",
          "text": ""
        }
      ],
      "colour": 267,
      "tooltip": "By default, electronic seals apply on all documents in an envelope. If any of the documents has a `signHere` tab, then a visual representation of the electronic seal will show up in the final document. If not, the electronic seal will be visible in the metadata but not in the content of the document.\n\nTo apply electronic seals on specific documents only, you must enable the  `sealDocumentsWithTabsOnly` parameter. In this case, Electronic Seal applies only on documents that have `signHere` tabs set for the Electronic Seal recipient. Other documents won't be sealed. ",
      "helpUrl": "",
      "previousStatement": "recipientSignatureProviderAttribute",
      "nextStatement":     "recipientSignatureProviderAttribute",    
    });
  }
};
Blockly.Blocks['recipientSignatureProvider__sealName'] = {
  init: function() {
    this.jsonInit({
      "message0": "seal name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sealName",
          "text": ""
        }
      ],
      "colour": 267,
      "tooltip": "Indicates the name of the electronic seal to apply on documents.\n",
      "helpUrl": "",
      "previousStatement": "recipientSignatureProviderAttribute",
      "nextStatement":     "recipientSignatureProviderAttribute",    
    });
  }
};
Blockly.Blocks['recipientSignatureProvider__signatureProviderName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signature provider name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signatureProviderName",
          "text": ""
        }
      ],
      "colour": 267,
      "tooltip": "The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use. For details, see [the current provider list](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures). You can also retrieve the list by using the [AccountSignatureProviders::List](https://developers.docusign.com/esign-rest-api/reference/Accounts/AccountSignatureProviders/list/) method.\n\nExample: `universalsignaturepen_default`\n\n",
      "helpUrl": "",
      "previousStatement": "recipientSignatureProviderAttribute",
      "nextStatement":     "recipientSignatureProviderAttribute",    
    });
  }
};

// recipientSignatureProviderOptions
Blockly.Blocks['recipientSignatureProviderOptions'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient signature provider options %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientSignatureProviderOptionsAttribute"
        }
      ],
      "colour": 270,
      "tooltip": "Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// recipientSignatureProvider__recipientSignatureProviderOptions Attributes
Blockly.Blocks['recipientSignatureProviderOptions__cpfNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "cpf number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "cpfNumber",
          "text": ""
        }
      ],
      "colour": 270,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "recipientSignatureProviderOptionsAttribute",
      "nextStatement":     "recipientSignatureProviderOptionsAttribute",    
    });
  }
};
Blockly.Blocks['recipientSignatureProviderOptions__cpfNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "cpf number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 270,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "recipientSignatureProviderOptionsAttribute",
      "nextStatement":     "recipientSignatureProviderOptionsAttribute",    
    });
  }
};
Blockly.Blocks['recipientSignatureProviderOptions__oneTimePassword'] = {
  init: function() {
    this.jsonInit({
      "message0": "one time password: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "oneTimePassword",
          "text": ""
        }
      ],
      "colour": 270,
      "tooltip": "A pre-shared secret that the signer must enter to complete the signing process. Eg last six digits of the signer's government ID or Social Security number. Or a newly created pre-shared secret for the transaction. Note: some signature providers may require an exact (case-sensitive) match if alphabetic characters are included in the field.",
      "helpUrl": "",
      "previousStatement": "recipientSignatureProviderOptionsAttribute",
      "nextStatement":     "recipientSignatureProviderOptionsAttribute",    
    });
  }
};
Blockly.Blocks['recipientSignatureProviderOptions__oneTimePasswordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "one time password metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 270,
      "tooltip": "Metadata that indicates whether the `oneTimePassword` property is editable.",
      "helpUrl": "",
      "previousStatement": "recipientSignatureProviderOptionsAttribute",
      "nextStatement":     "recipientSignatureProviderOptionsAttribute",    
    });
  }
};
Blockly.Blocks['recipientSignatureProviderOptions__signerRole'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer role: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signerRole",
          "text": ""
        }
      ],
      "colour": 270,
      "tooltip": "The role or capacity of the signing recipient. Examples: Manager, Approver, etc.",
      "helpUrl": "",
      "previousStatement": "recipientSignatureProviderOptionsAttribute",
      "nextStatement":     "recipientSignatureProviderOptionsAttribute",    
    });
  }
};
Blockly.Blocks['recipientSignatureProviderOptions__signerRoleMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer role metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 270,
      "tooltip": "Metadata that indicates whether the `signerRole` property is editable.",
      "helpUrl": "",
      "previousStatement": "recipientSignatureProviderOptionsAttribute",
      "nextStatement":     "recipientSignatureProviderOptionsAttribute",    
    });
  }
};
Blockly.Blocks['recipientSignatureProviderOptions__sms'] = {
  init: function() {
    this.jsonInit({
      "message0": "sms: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sms",
          "text": ""
        }
      ],
      "colour": 270,
      "tooltip": "The mobile phone number used to send the recipient an access code for the signing ceremony. Format: a string starting with +, then the country code followed by the full mobile phone number without any spaces or special characters. Omit leading zeroes before a city code. Examples: +14155551234, +97235551234, +33505551234.",
      "helpUrl": "",
      "previousStatement": "recipientSignatureProviderOptionsAttribute",
      "nextStatement":     "recipientSignatureProviderOptionsAttribute",    
    });
  }
};
Blockly.Blocks['recipientSignatureProviderOptions__smsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "sms metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 270,
      "tooltip": "Metadata that indicates whether the `sms` property is editable.",
      "helpUrl": "",
      "previousStatement": "recipientSignatureProviderOptionsAttribute",
      "nextStatement":     "recipientSignatureProviderOptionsAttribute",    
    });
  }
};

// recipientSMSAuthentication
Blockly.Blocks['recipientSMSAuthentication'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient sms authentication %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "recipientSMSAuthenticationAttribute"
        }
      ],
      "colour": 273,
      "tooltip": "Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// agent__recipientSMSAuthentication Attributes
// Item which is an array of Scalar
Blockly.Blocks['recipientSMSAuthentication__senderProvidedNumbers'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender provided numbers %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "senderProvidedNumber",
          "check": "recipientSMSAuthentication_senderProvidedNumbersAttribute"
        }
      ],
      "colour": 273,
      "tooltip": "An array containing a list of phone numbers that the recipient can use for SMS text authentication. ",
      "helpUrl": "",
      "previousStatement": "recipientSMSAuthenticationAttribute",
      "nextStatement":     "recipientSMSAuthenticationAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['recipientSMSAuthentication_senderProvidedNumbers__senderProvidedNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender provided number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderProvidedNumber",
          "text": ""
        }
      ],
      "colour": 273,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "recipientSMSAuthentication_senderProvidedNumbersAttribute",
      "nextStatement":     "recipientSMSAuthentication_senderProvidedNumbersAttribute",    
    });
  }
};



// createEnvelope__recipientViewRequest Attributes
Blockly.Blocks['recipientViewRequest__assertionId'] = {
  init: function() {
    this.jsonInit({
      "message0": "assertion id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "assertionId",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "A unique identifier of the authentication event executed by the client application.",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
Blockly.Blocks['recipientViewRequest__authenticationInstant'] = {
  init: function() {
    this.jsonInit({
      "message0": "authentication instant: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "authenticationInstant",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "A sender-generated value that indicates the date and time that the signer was authenticated.",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
Blockly.Blocks['recipientViewRequest__authenticationMethod'] = {
  init: function() {
    this.jsonInit({
      "message0": "authentication method: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "authenticationMethod",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "Required. Choose a value that most closely matches the technique your application used to authenticate the recipient / signer. \n\nChoose a value from this list: \n* Biometric \n* Email\n* HTTPBasicAuth\n* Kerberos\n* KnowledgeBasedAuth\n* None\n* PaperDocuments\n* Password\n* RSASecureID\n* SingleSignOn_CASiteminder\n* SingleSignOn_InfoCard\n* SingleSignOn_MicrosoftActiveDirectory\n* SingleSignOn_Other\n* SingleSignOn_Passport\n* SingleSignOn_SAML\n* Smartcard\n* SSLMutualAuth\n* X509Certificate\n\nThis information is included in the Certificate of Completion.",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
Blockly.Blocks['recipientViewRequest__clientUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "client user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "clientUserId",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "A sender-created value. If provided, the recipient is treated as an embedded (captive) recipient or signer.\n\nUse your application's client ID (user ID) for the recipient. Doing so enables the details of your application's authentication of the recipient to be connected to the recipient's signature if the signature is disputed or repudiated.\n\nMaximum length: 100 characters.",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
Blockly.Blocks['recipientViewRequest__email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "email",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "(Required) Specifies the email of the recipient. You can use either `email` and `userName` or `userId` to identify the recipient.",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['recipientViewRequest__frameAncestors'] = {
  init: function() {
    this.jsonInit({
      "message0": "frame ancestors %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "frameAncestor",
          "check": "recipientViewRequest_frameAncestorsAttribute"
        }
      ],
      "colour": 3,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['recipientViewRequest_frameAncestors__frameAncestor'] = {
  init: function() {
    this.jsonInit({
      "message0": "frame ancestor: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "frameAncestor",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "recipientViewRequest_frameAncestorsAttribute",
      "nextStatement":     "recipientViewRequest_frameAncestorsAttribute",    
    });
  }
};


// Item which is an array of Scalar
Blockly.Blocks['recipientViewRequest__messageOrigins'] = {
  init: function() {
    this.jsonInit({
      "message0": "message origins %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "messageOrigin",
          "check": "recipientViewRequest_messageOriginsAttribute"
        }
      ],
      "colour": 3,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['recipientViewRequest_messageOrigins__messageOrigin'] = {
  init: function() {
    this.jsonInit({
      "message0": "message origin: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "messageOrigin",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "recipientViewRequest_messageOriginsAttribute",
      "nextStatement":     "recipientViewRequest_messageOriginsAttribute",    
    });
  }
};


Blockly.Blocks['recipientViewRequest__pingFrequency'] = {
  init: function() {
    this.jsonInit({
      "message0": "ping frequency: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pingFrequency",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "Only used if `pingUrl` is specified. This is the interval, in seconds, between pings on the `pingUrl`.  The default is `300` seconds. Valid values are 60-1200 seconds.",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
Blockly.Blocks['recipientViewRequest__pingUrl'] = {
  init: function() {
    this.jsonInit({
      "message0": "ping url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pingUrl",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "The client URL that the DocuSign Signing experience should ping to indicate to the client that Signing is active. An HTTP GET call is executed against the client. The response from the client is ignored. The intent is for the client to reset its session timer when the request is received.",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
Blockly.Blocks['recipientViewRequest__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
Blockly.Blocks['recipientViewRequest__returnUrl'] = {
  init: function() {
    this.jsonInit({
      "message0": "return url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "returnUrl",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "(Optional) The URL to which the user should be redirected\nafter the signing session has ended.\nDocuSign redirects to the URL\nand includes an `event` query parameter\nthat can be used by your application.\n\nMaximum Length: 500 characters. If the `returnUrl` exceeds this limit, the user is redirected to a truncated URL.\n\nPossible `event` parameter values include: \n\n* `access_code_failed`: Recipient used incorrect access code.\n* `cancel`: Recipient canceled the signing operation,\n  possibly by using the **Finish Later** option.\n* `decline`: Recipient declined to sign.\n* `exception`: A system error occurred during the signing process.\n* `fax_pending`: Recipient has a fax pending.\n* `id_check_failed`: Recipient failed an ID check.\n* `session_timeout`: The session timed out. An account can control this timeout by using the **Signer Session Timeout** option.\n* `signing_complete`: The recipient completed the signing ceremony.\n* `ttl_expired`: The Time To Live token for the envelope has expired.\n  After being successfully invoked, these tokens expire\n  after 5 minutes or if the envelope is voided.\n* `viewing_complete`: The recipient completed viewing an envelope\n  that is in a read-only/terminal state,\n  such as completed, declined, or voided.\n\nEnsure that you include `https://` in the URL to prevent the redirect from failing on certain browsers.\n",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
Blockly.Blocks['recipientViewRequest__securityDomain'] = {
  init: function() {
    this.jsonInit({
      "message0": "security domain: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "securityDomain",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "The domain in which the user authenticated.",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
Blockly.Blocks['recipientViewRequest__userId'] = {
  init: function() {
    this.jsonInit({
      "message0": "user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userId",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "The user ID of the recipient. You can use either the user ID or email and user name to identify the recipient. \n\nIf `userId` is used and a `clientUserId` is provided, the value in the `userId` property must match a `recipientId` (which you can retrieve with a GET recipients call) for the envelope. \n\nIf a `userId` is used and a `clientUserId` is not provided, the `userId` must match the user ID of the authenticating user.",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
Blockly.Blocks['recipientViewRequest__userName'] = {
  init: function() {
    this.jsonInit({
      "message0": "user name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userName",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "The username of the recipient. You can use either `email` and `userName` or `userId` to identify the recipient.",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
Blockly.Blocks['recipientViewRequest__xFrameOptions'] = {
  init: function() {
    this.jsonInit({
      "message0": "x frame options: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xFrameOptions",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "Specifies whether a browser should be allowed to render a page in a frame or IFrame. Setting this property ensures that your content is not embedded into unauthorized pages or frames.\n\nValid values are:\n\n- `deny`: The page cannot be displayed in a frame.\n- `same_origin`: The page can only be displayed in a frame on the same origin as the page itself.\n- `allow_from`: The page can only be displayed in a frame on the origin specified by the `xFrameOptionsAllowFromUrl` property.",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};
Blockly.Blocks['recipientViewRequest__xFrameOptionsAllowFromUrl'] = {
  init: function() {
    this.jsonInit({
      "message0": "x frame options allow from url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xFrameOptionsAllowFromUrl",
          "text": ""
        }
      ],
      "colour": 3,
      "tooltip": "When the value of `xFrameOptions` is `allow_from`, this property specifies the origin on which the page is allowed to display in a frame. If the value of `xFrameOptions` is `allow_from`, you must include a value for this property.",
      "helpUrl": "",
      "previousStatement": "recipientViewRequestAttribute",
      "nextStatement":     "recipientViewRequestAttribute",    
    });
  }
};

// reminders
Blockly.Blocks['reminders'] = {
  init: function() {
    this.jsonInit({
      "message0": "reminders %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "remindersAttribute"
        }
      ],
      "colour": 276,
      "tooltip": "A complex element that specifies reminder settings for the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// notification__reminders Attributes
Blockly.Blocks['reminders__reminderDelay'] = {
  init: function() {
    this.jsonInit({
      "message0": "reminder delay: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "reminderDelay",
          "text": ""
        }
      ],
      "colour": 276,
      "tooltip": "An integer specifying the number of days after the recipient receives the envelope that reminder emails are sent to the recipient.",
      "helpUrl": "",
      "previousStatement": "remindersAttribute",
      "nextStatement":     "remindersAttribute",    
    });
  }
};
Blockly.Blocks['reminders__reminderEnabled'] = {
  init: function() {
    this.jsonInit({
      "message0": "reminder enabled: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "reminderEnabled",
          "text": ""
        }
      ],
      "colour": 276,
      "tooltip": "When set to **true**, the envelope expires and is no longer available for signing after the specified number of days. When **false**, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.",
      "helpUrl": "",
      "previousStatement": "remindersAttribute",
      "nextStatement":     "remindersAttribute",    
    });
  }
};
Blockly.Blocks['reminders__reminderFrequency'] = {
  init: function() {
    this.jsonInit({
      "message0": "reminder frequency: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "reminderFrequency",
          "text": ""
        }
      ],
      "colour": 276,
      "tooltip": "An integer specifying the interval in days between reminder emails.",
      "helpUrl": "",
      "previousStatement": "remindersAttribute",
      "nextStatement":     "remindersAttribute",    
    });
  }
};

// sealSign
Blockly.Blocks['sealSign'] = {
  init: function() {
    this.jsonInit({
      "message0": "seal sign %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "sealSignAttribute"
        }
      ],
      "colour": 279,
      "tooltip": "Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.\n\nExample: \n\n```json\n\"recipients\": {\n      \"seals\": [\n        {\n          \"recipientId\": \"1\",\n          \"routingOrder\" : 1,\n          \"recipientSignatureProviders\": [\n            {\n              \"sealName\": \"52e9d968-xxxx-xxxx-xxxx-4682bc45c106\"\n            }\n      	]\n    	}\n  	]\n	},\n    .\n    .\n    .\n```\nFor more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipients__sealSign Attributes
Blockly.Blocks['sealSign__accessCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessCode",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__accessCodeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__addAccessCodeToEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "add access code to email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "addAccessCodeToEmail",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__allowSystemOverrideForLockedRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow system override for locked recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowSystemOverrideForLockedRecipient",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__clientUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "client user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "clientUserId",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__completedCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "completed count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "completedCount",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['sealSign__customFields'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom fields %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "customField",
          "check": "sealSign_customFieldsAttribute"
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['sealSign_customFields__customField'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom field: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customField",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "sealSign_customFieldsAttribute",
      "nextStatement":     "sealSign_customFieldsAttribute",    
    });
  }
};


Blockly.Blocks['sealSign__declinedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedDateTime",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__declinedReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedReason",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__deliveredDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivered date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveredDateTime",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__deliveryMethod'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveryMethod",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__deliveryMethodMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 279,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__designatorId'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorId",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__designatorIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorIdGuid",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__embeddedRecipientStartURL'] = {
  init: function() {
    this.jsonInit({
      "message0": "embedded recipient start url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "embeddedRecipientStartURL",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__faxNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "faxNumber",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__faxNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 279,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__idCheckConfigurationName'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "idCheckConfigurationName",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__idCheckConfigurationNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__inheritEmailNotificationConfiguration'] = {
  init: function() {
    this.jsonInit({
      "message0": "inherit email notification configuration: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "inheritEmailNotificationConfiguration",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__lockedRecipientPhoneAuthEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient phone auth editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientPhoneAuthEditable",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__lockedRecipientSmsEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient sms editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientSmsEditable",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__note'] = {
  init: function() {
    this.jsonInit({
      "message0": "note: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "note",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__noteMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "note metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "(Required) The `recipientId` used when the envelope or template was created. \n\nThis is a local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__recipientType'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientType",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "The recipient type, as specified by the following values:\n- `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.\n- `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.\n- `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.\n- `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.\n- `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.\n- `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.\n- `seal`: Electronic seal recipients represent legal entities.\n- `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.\n- `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__recipientTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 279,
      "tooltip": "Metadata that indicates whether the `recipientType` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__requireIdLookup'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireIdLookup",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__requireIdLookupMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__roleName'] = {
  init: function() {
    this.jsonInit({
      "message0": "role name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "roleName",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__routingOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "routingOrder",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "(Optional, default: 1) \nSpecifies the routing order of the electronic seal in the envelope.\nThe routing order assigned to your electronic seal cannot be shared with another recipient.\nIt is recommended that you set a routing order for your electronic seals.\n",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__routingOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 279,
      "tooltip": "Metadata that indicates whether the `routingOrder` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__sentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentDateTime",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__signedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "signed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signedDateTime",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "The recipient's status. Read only. \n\nPossible values:\n\n- `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.\n- `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.\n- `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).\n- `declined`: The recipient declined to sign the document(s) in the envelope.\n- `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.\n- `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.\n- `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.\n- `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__statusCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "status code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "statusCode",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "The code associated with the recipient's status. Read only.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__suppressEmails'] = {
  init: function() {
    this.jsonInit({
      "message0": "suppress emails: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "suppressEmails",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__totalTabCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "total tab count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "totalTabCount",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};
Blockly.Blocks['sealSign__userId'] = {
  init: function() {
    this.jsonInit({
      "message0": "user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userId",
          "text": ""
        }
      ],
      "colour": 279,
      "tooltip": "Not applicable.",
      "helpUrl": "",
      "previousStatement": "sealSignAttribute",
      "nextStatement":     "sealSignAttribute",    
    });
  }
};

// serverTemplate
Blockly.Blocks['serverTemplate'] = {
  init: function() {
    this.jsonInit({
      "message0": "server template %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "serverTemplateAttribute"
        }
      ],
      "colour": 282,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// compositeTemplate__serverTemplate Attributes
Blockly.Blocks['serverTemplate__sequence'] = {
  init: function() {
    this.jsonInit({
      "message0": "sequence: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sequence",
          "text": ""
        }
      ],
      "colour": 282,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "serverTemplateAttribute",
      "nextStatement":     "serverTemplateAttribute",    
    });
  }
};
Blockly.Blocks['serverTemplate__templateId'] = {
  init: function() {
    this.jsonInit({
      "message0": "template id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateId",
          "text": ""
        }
      ],
      "colour": 282,
      "tooltip": "The unique identifier of the template. If this is not provided, DocuSign will generate a value. ",
      "helpUrl": "",
      "previousStatement": "serverTemplateAttribute",
      "nextStatement":     "serverTemplateAttribute",    
    });
  }
};

// signHere
Blockly.Blocks['signHere'] = {
  init: function() {
    this.jsonInit({
      "message0": "sign here %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "signHereAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "A tab that allows the recipient to sign a document. May be\noptional.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__signHere Attributes
Blockly.Blocks['signHere__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "Not applicable to Sign Here tab.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__isSealSignTab'] = {
  init: function() {
    this.jsonInit({
      "message0": "is seal sign tab: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "isSealSignTab",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "When set to **true**,  the tab contains a visual representation for an electronic seal in a document.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__optional'] = {
  init: function() {
    this.jsonInit({
      "message0": "optional: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "optional",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "When set to **true**, the recipient does not need to complete this tab to complete the signing process.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__optionalMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "optional metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `optional` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "Specifies the page number on which the tab is located.\nMust be 1 for supplemental documents.\n",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__scaleValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "scale value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "scaleValue",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "Scales the size of the tab. This field accepts values from 0.5 to 2.0, where  0.5 is half the normal size, 1.0 is normal size, and 2.0 is twice the normal size.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__scaleValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "scale value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `scaleValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__stampType'] = {
  init: function() {
    this.jsonInit({
      "message0": "stamp type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "stampType",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "The type of stamp. Valid values are:\n\n- `signature`: A signature image. This is the default value.\n- `stamp`: A stamp image.\n- null",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__stampTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "stamp type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `stampType` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).\n",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['signHere__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "signHere_tabGroupLabelsAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['signHere_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "signHere_tabGroupLabelsAttribute",
      "nextStatement":     "signHere_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['signHere__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "Not applicable to Sign Here tab.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (+1, -7)\n",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 285,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (+1, -7)\n",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};
Blockly.Blocks['signHere__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 285,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "signHereAttribute",
      "nextStatement":     "signHereAttribute",    
    });
  }
};

// signatureType
Blockly.Blocks['signatureType'] = {
  init: function() {
    this.jsonInit({
      "message0": "signature type %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "signatureTypeAttribute"
        }
      ],
      "colour": 288,
      "tooltip": "This object contains information about the type of signature.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// envelopeDocument__signatureType Attributes
Blockly.Blocks['signatureType__isDefault'] = {
  init: function() {
    this.jsonInit({
      "message0": "is default: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "isDefault",
          "text": ""
        }
      ],
      "colour": 288,
      "tooltip": "When **true**, the signature type is the default type.",
      "helpUrl": "",
      "previousStatement": "signatureTypeAttribute",
      "nextStatement":     "signatureTypeAttribute",    
    });
  }
};
Blockly.Blocks['signatureType__type'] = {
  init: function() {
    this.jsonInit({
      "message0": "type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "type",
          "text": ""
        }
      ],
      "colour": 288,
      "tooltip": "The type of signature. Valid values are:\n\n- `electronic`: Indicates an **electronic** signature that is used by common law countries such as the United States, United Kingdom, and Australia. This is the default signature type that DocuSign uses.\n- `universal`: Indicates a **digital** signature that is accepted by both common law and civil law countries. To use digital signatures, you must use the [DocuSign Signature Appliance](https://developers.docusign.com/dsa-api).\n\nFor more information, see [Standards Based Signatures](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).",
      "helpUrl": "",
      "previousStatement": "signatureTypeAttribute",
      "nextStatement":     "signatureTypeAttribute",    
    });
  }
};

// signer
Blockly.Blocks['signer'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "signerAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipients__signer Attributes
Blockly.Blocks['signer__accessCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessCode",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. \n\nMaximum Length: 50 characters and it must conform to the account's access code format setting.\n\nIf blank, but the signer `accessCode` property is set in the envelope, then that value is used.\n\nIf blank and the signer `accessCode` property is not set, then the access code is not required.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__accessCodeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Metadata that indicates whether the `accessCode` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__addAccessCodeToEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "add access code to email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "addAccessCodeToEmail",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__additionalNotificationsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "additional notifications metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__agentCanEditEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "agent can edit email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "agentCanEditEmail",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Optional element. When set to **true**, the agent recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__agentCanEditName'] = {
  init: function() {
    this.jsonInit({
      "message0": "agent can edit name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "agentCanEditName",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Optional. When set to **true**, the agent recipient associated with this recipient can change the recipient's pre-populated name. This element is only active if enabled for the account.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__allowSystemOverrideForLockedRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow system override for locked recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowSystemOverrideForLockedRecipient",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__autoNavigation'] = {
  init: function() {
    this.jsonInit({
      "message0": "auto navigation: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "autoNavigation",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "When set to **true**, autonavigation is set for the recipient.\n",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__bulkRecipientsUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "bulk recipients uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bulkRecipientsUri",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__canSignOffline'] = {
  init: function() {
    this.jsonInit({
      "message0": "can sign offline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "canSignOffline",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "When set to **true**, specifies that the signer can perform the signing ceremony offline.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__clientUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "client user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "clientUserId",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Specifies whether the recipient is embedded or remote. \n\nIf the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.\n\nNote: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. \n\nMaximum length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__completedCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "completed count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "completedCount",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__creationReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "creation reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "creationReason",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "The reason why the item was created.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['signer__customFields'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom fields %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "customField",
          "check": "signer_customFieldsAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['signer_customFields__customField'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom field: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customField",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "signer_customFieldsAttribute",
      "nextStatement":     "signer_customFieldsAttribute",    
    });
  }
};


Blockly.Blocks['signer__declinedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedDateTime",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "The date and time the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__declinedReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedReason",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "The reason the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__defaultRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "default recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "defaultRecipient",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__deliveredDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivered date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveredDateTime",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "The date and time that the envelope was delivered to the recipient. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__deliveryMethod'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveryMethod",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__deliveryMethodMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__designatorId'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorId",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__designatorIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorIdGuid",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "email",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "The recipient's email address. The system sends notifications about the documents to sign to this address. Maximum length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__emailMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "email metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Metadata that indicates whether the `email` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__embeddedRecipientStartURL'] = {
  init: function() {
    this.jsonInit({
      "message0": "embedded recipient start url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "embeddedRecipientStartURL",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. \n\nIf set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.\n\nIt is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.\n\nIf the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` ",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['signer__excludedDocuments'] = {
  init: function() {
    this.jsonInit({
      "message0": "excluded documents %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "excludedDocument",
          "check": "signer_excludedDocumentsAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.\n\nWhen enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['signer_excludedDocuments__excludedDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "excluded document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "excludedDocument",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "signer_excludedDocumentsAttribute",
      "nextStatement":     "signer_excludedDocumentsAttribute",    
    });
  }
};


Blockly.Blocks['signer__faxNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "faxNumber",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__faxNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__firstName'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "firstName",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "The recipient's first name. Maximum Length: 50 characters.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__firstNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Metadata that indicates whether the `firstame` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__fullName'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fullName",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__fullNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__idCheckConfigurationName'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "idCheckConfigurationName",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.\n- `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.\n- `ID Check $`: The  recipient must answer detailed security questions. \n\n**Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__idCheckConfigurationNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__inheritEmailNotificationConfiguration'] = {
  init: function() {
    this.jsonInit({
      "message0": "inherit email notification configuration: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "inheritEmailNotificationConfiguration",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. ",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__isBulkRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "is bulk recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "isBulkRecipient",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Reserved for DocuSign.\n",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__isBulkRecipientMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "is bulk recipient metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__lastName'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lastName",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "The recipient's last name.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__lastNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Metadata that indicates whether the `lastName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__lockedRecipientPhoneAuthEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient phone auth editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientPhoneAuthEditable",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__lockedRecipientSmsEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient sms editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientSmsEditable",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "The full legal name of the recipient. Maximum Length: 100 characters.\n\n**Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__note'] = {
  init: function() {
    this.jsonInit({
      "message0": "note: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "note",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "A note sent to the recipient in the signing email.\nThis note is unique to this recipient.\nIn the user interface,\nit appears near the upper left corner\nof the document\non the signing screen.\n\nMaximum Length: 1000 characters.\n",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__noteMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "note metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Metadata that indicates whether the `note` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__recipientSuppliesTabs'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient supplies tabs: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientSuppliesTabs",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "When set to **true**, specifies that the recipient creates the tabs.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__recipientType'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientType",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "The recipient type, as specified by the following values:\n- `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.\n- `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.\n- `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.\n- `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.\n- `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.\n- `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.\n- `seal`: Electronic seal recipients represent legal entities.\n- `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.\n- `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__recipientTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Metadata that indicates whether the `recipientType` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__requireIdLookup'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireIdLookup",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. ",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__requireIdLookupMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Metadata that indicates whether the `requireIdLookup` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__requireSignOnPaper'] = {
  init: function() {
    this.jsonInit({
      "message0": "require sign on paper: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireSignOnPaper",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__requireSignerCertificate'] = {
  init: function() {
    this.jsonInit({
      "message0": "require signer certificate: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireSignerCertificate",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.\n\nThis parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the `recipientSignatureProviders` parameter for other types of digital certificates. \n\nSet this parameter to `safe` to use a SAFE-BioPharma certificate.\n\nThe signer must be enrolled in the SAFE program to sign with a SAFE certificate.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__requireUploadSignature'] = {
  init: function() {
    this.jsonInit({
      "message0": "require upload signature: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireUploadSignature",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "When set to **true**, the signer is required to upload a new signature, even if they have a pre-adopted signature in their personal DocuSign account.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__roleName'] = {
  init: function() {
    this.jsonInit({
      "message0": "role name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "roleName",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__routingOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "routingOrder",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Specifies the routing order of the recipient in the envelope. ",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__routingOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Metadata that indicates whether the `routingOrder` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__sentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentDateTime",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "The UTC DateTime when the envelope was sent. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__signInEachLocation'] = {
  init: function() {
    this.jsonInit({
      "message0": "sign in each location: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signInEachLocation",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once).",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__signInEachLocationMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "sign in each location metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Metadata that indicates whether the `signInEachLocation` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__signedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "signed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signedDateTime",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__signingGroupId'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupId",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\n**Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. ",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__signingGroupIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 291,
      "tooltip": "Metadata that indicates whether the `signingGroupId` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__signingGroupName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupName",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Optional. The name of the signing group. \n\nMaximum Length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Specifies the status of the recipient at the time of the request. Read only. Possible values are:\n\n- `created`: The recipient is in a draft state. This is only associated with draft envelopes (envelopes with a created status).\n- `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.\n- `delivered`: The recipient has viewed the documents in an envelope through the DocuSign signing web site. This is not an email delivery of the documents in an envelope.\n- `signed`; The recipient has completed (performed all required interactions, such as signing or entering data) all required tags in an envelope. This is a temporary state during processing, after which the recipient is automatically moved to completed.\n- `declined`: The recipient declined to sign the documents in the envelope.\n- `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.\n- `faxpending`: The recipient has finished signing and the system is waiting a fax attachment by the recipient before completing their signing step.\n- `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used by the DocuSign webapp (also known as the DocuSign console) to inform senders about the auto-responded email.\n",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__statusCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "status code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "statusCode",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__suppressEmails'] = {
  init: function() {
    this.jsonInit({
      "message0": "suppress emails: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "suppressEmails",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__totalTabCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "total tab count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "totalTabCount",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "The total number of tabs in the documents. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};
Blockly.Blocks['signer__userId'] = {
  init: function() {
    this.jsonInit({
      "message0": "user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userId",
          "text": ""
        }
      ],
      "colour": 291,
      "tooltip": "The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.\n",
      "helpUrl": "",
      "previousStatement": "signerAttribute",
      "nextStatement":     "signerAttribute",    
    });
  }
};

// signerAttachment
Blockly.Blocks['signerAttachment'] = {
  init: function() {
    this.jsonInit({
      "message0": "signer attachment %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "signerAttachmentAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "A tab that allows the recipient to attach supporting\ndocuments to an envelope.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__signerAttachment Attributes
Blockly.Blocks['signerAttachment__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__optional'] = {
  init: function() {
    this.jsonInit({
      "message0": "optional: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "optional",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "When set to **true**, the recipient does not need to complete this tab to complete the signing process.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__optionalMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "optional metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `optional` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "The page number on which the tab is located. For supplemental documents, this value must be `1`.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__scaleValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "scale value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "scaleValue",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__scaleValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "scale value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `scaleValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).\n",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['signerAttachment__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "signerAttachment_tabGroupLabelsAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['signerAttachment_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "signerAttachment_tabGroupLabelsAttribute",
      "nextStatement":     "signerAttachment_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['signerAttachment__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (+0, -24)\n",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 294,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (+0, -24)\n",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};
Blockly.Blocks['signerAttachment__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 294,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "signerAttachmentAttribute",
      "nextStatement":     "signerAttachmentAttribute",    
    });
  }
};

// smartContractInformation
Blockly.Blocks['smartContractInformation'] = {
  init: function() {
    this.jsonInit({
      "message0": "smart contract information %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "smartContractInformationAttribute"
        }
      ],
      "colour": 297,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// approve__smartContractInformation Attributes
Blockly.Blocks['smartContractInformation__code'] = {
  init: function() {
    this.jsonInit({
      "message0": "code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "code",
          "text": ""
        }
      ],
      "colour": 297,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartContractInformationAttribute",
      "nextStatement":     "smartContractInformationAttribute",    
    });
  }
};
Blockly.Blocks['smartContractInformation__uri'] = {
  init: function() {
    this.jsonInit({
      "message0": "uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "uri",
          "text": ""
        }
      ],
      "colour": 297,
      "tooltip": "A URI containing the user ID.",
      "helpUrl": "",
      "previousStatement": "smartContractInformationAttribute",
      "nextStatement":     "smartContractInformationAttribute",    
    });
  }
};

// smartSection
Blockly.Blocks['smartSection'] = {
  init: function() {
    this.jsonInit({
      "message0": "smart section %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "smartSectionAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__smartSection Attributes
Blockly.Blocks['smartSection__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__caseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "caseSensitive",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "When **true**, the `startAnchor` and `endAnchor` for the Smart Section must match both the case and the content of the strings in the HTML.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__endAnchor'] = {
  init: function() {
    this.jsonInit({
      "message0": "end anchor: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "endAnchor",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "Specifies the end of the area in the HTML where the display settings will be applied. If you do not specify an end anchor, the end of the document will be used by default.\n\n**Note**: A start anchor, an end anchor, or both are required.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__endPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "end position %1 page number: %2 %3 x position: %4 %5 y position: %6",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_input",
          "name": "pageNumber",
        },
        {
          "type": "input_dummy"
        },        
        {
          "type": "field_input",
          "name": "xPosition",
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "field_input",
          "name": "yPosition",
        },
      ],
      "colour": 300,
      "tooltip": "The last index position in the result set. ",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__overlayType'] = {
  init: function() {
    this.jsonInit({
      "message0": "overlay type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "overlayType",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "The type of overlay to draw on the document. The following overlay types are supported:\n\n- `line`\n- `outline`\n",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__overlayTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "overlay type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `overlayType` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "The page number being accessed.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__removeEndAnchor'] = {
  init: function() {
    this.jsonInit({
      "message0": "remove end anchor: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "removeEndAnchor",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "When **true**, removes the end anchor string for the Smart Section from the HTML, preventing it from displaying.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__removeStartAnchor'] = {
  init: function() {
    this.jsonInit({
      "message0": "remove start anchor: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "removeStartAnchor",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "When **true**, removes the start anchor string for the Smart Section from the HTML, preventing it from displaying.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__shared'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "shared",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "When **true**, the tab is shared.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__sharedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `shared` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__startAnchor'] = {
  init: function() {
    this.jsonInit({
      "message0": "start anchor: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "startAnchor",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "Specifies the beginning of the area in the HTML where the display settings will be applied. If you do not specify a start anchor, the beginning of the document will be used by default.\n\n**Note**: A start anchor, an end anchor, or both are required.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__startPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "start position %1 page number: %2 %3 x position: %4 %5 y position: %6",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_input",
          "name": "pageNumber",
        },
        {
          "type": "input_dummy"
        },        
        {
          "type": "field_input",
          "name": "xPosition",
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "field_input",
          "name": "yPosition",
        },
      ],
      "colour": 300,
      "tooltip": "The starting index position of the current result set.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['smartSection__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "smartSection_tabGroupLabelsAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['smartSection_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartSection_tabGroupLabelsAttribute",
      "nextStatement":     "smartSection_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['smartSection__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 300,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};
Blockly.Blocks['smartSection__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 300,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "smartSectionAttribute",
      "nextStatement":     "smartSectionAttribute",    
    });
  }
};

// smartSectionCollapsibleDisplaySettings
Blockly.Blocks['smartSectionCollapsibleDisplaySettings'] = {
  init: function() {
    this.jsonInit({
      "message0": "smart section collapsible display settings %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "smartSectionCollapsibleDisplaySettingsAttribute"
        }
      ],
      "colour": 303,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// smartSectionDisplaySettings__smartSectionCollapsibleDisplaySettings Attributes
Blockly.Blocks['smartSectionCollapsibleDisplaySettings__arrowClosed'] = {
  init: function() {
    this.jsonInit({
      "message0": "arrow closed: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "arrowClosed",
          "text": ""
        }
      ],
      "colour": 303,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartSectionCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "smartSectionCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionCollapsibleDisplaySettings__arrowColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "arrow color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "arrowColor",
          "text": ""
        }
      ],
      "colour": 303,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartSectionCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "smartSectionCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionCollapsibleDisplaySettings__arrowLocation'] = {
  init: function() {
    this.jsonInit({
      "message0": "arrow location: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "arrowLocation",
          "text": ""
        }
      ],
      "colour": 303,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartSectionCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "smartSectionCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionCollapsibleDisplaySettings__arrowOpen'] = {
  init: function() {
    this.jsonInit({
      "message0": "arrow open: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "arrowOpen",
          "text": ""
        }
      ],
      "colour": 303,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartSectionCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "smartSectionCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionCollapsibleDisplaySettings__arrowSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "arrow size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "arrowSize",
          "text": ""
        }
      ],
      "colour": 303,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartSectionCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "smartSectionCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionCollapsibleDisplaySettings__arrowStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "arrow style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "arrowStyle",
          "text": ""
        }
      ],
      "colour": 303,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartSectionCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "smartSectionCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionCollapsibleDisplaySettings__containerStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "container style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "containerStyle",
          "text": ""
        }
      ],
      "colour": 303,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartSectionCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "smartSectionCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionCollapsibleDisplaySettings__labelStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "label style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "labelStyle",
          "text": ""
        }
      ],
      "colour": 303,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartSectionCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "smartSectionCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionCollapsibleDisplaySettings__onlyArrowIsClickable'] = {
  init: function() {
    this.jsonInit({
      "message0": "only arrow is clickable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "onlyArrowIsClickable",
          "text": ""
        }
      ],
      "colour": 303,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartSectionCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "smartSectionCollapsibleDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionCollapsibleDisplaySettings__outerLabelAndArrowStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "outer label and arrow style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "outerLabelAndArrowStyle",
          "text": ""
        }
      ],
      "colour": 303,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "smartSectionCollapsibleDisplaySettingsAttribute",
      "nextStatement":     "smartSectionCollapsibleDisplaySettingsAttribute",    
    });
  }
};

// smartSectionDisplaySettings
Blockly.Blocks['smartSectionDisplaySettings'] = {
  init: function() {
    this.jsonInit({
      "message0": "smart section display settings %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "smartSectionDisplaySettingsAttribute"
        }
      ],
      "colour": 306,
      "tooltip": "These properties define how a Smart Section displays. A Smart Section is a type of display section.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// smartSection__smartSectionDisplaySettings Attributes
Blockly.Blocks['smartSectionDisplaySettings__cellStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "cell style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "cellStyle",
          "text": ""
        }
      ],
      "colour": 306,
      "tooltip": "Specifies the valid CSS-formatted styles to use on responsive table cells. Only valid in display sections of `responsive_table` or `responsive_table_single_column` types.",
      "helpUrl": "",
      "previousStatement": "smartSectionDisplaySettingsAttribute",
      "nextStatement":     "smartSectionDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionDisplaySettings__display'] = {
  init: function() {
    this.jsonInit({
      "message0": "display: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "display",
          "text": ""
        }
      ],
      "colour": 306,
      "tooltip": "Indicates the display type. Must be one of the following enum values:\n\n- **inline**: Leaves the HTML where it is in the document. This allows for adding a label or presenting on a separate page.\n- **collapsible**: The HTML in the section may be expanded or collapsed. By default, the section is expanded.\n- **collapsed**: The HTML in the section may be expanded or collapsed. By default, the section is collapsed.\n- **responsive_table**: Converts the section into a responsive table. Note that this style is applied only on HTML tables that fall within the `startAnchor` and `endAnchor` positions.\n- **responsive_table_single_column**: Converts the section into a responsive, single-column table. Note that this style is applied only on HTML tables that fall within the `startAnchor` and `endAnchor` positions. The table is converted to a single column in which each column becomes a row and is stacked.\n- **print_only**: Prevents this portion of the HTML from displaying in the responsive signing view.",
      "helpUrl": "",
      "previousStatement": "smartSectionDisplaySettingsAttribute",
      "nextStatement":     "smartSectionDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionDisplaySettings__displayLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "display label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "displayLabel",
          "text": ""
        }
      ],
      "colour": 306,
      "tooltip": "The label for the display section.",
      "helpUrl": "",
      "previousStatement": "smartSectionDisplaySettingsAttribute",
      "nextStatement":     "smartSectionDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionDisplaySettings__displayOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "display order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "displayOrder",
          "text": ""
        }
      ],
      "colour": 306,
      "tooltip": "The position on the page where the display section appears.",
      "helpUrl": "",
      "previousStatement": "smartSectionDisplaySettingsAttribute",
      "nextStatement":     "smartSectionDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionDisplaySettings__displayPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "display page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "displayPageNumber",
          "text": ""
        }
      ],
      "colour": 306,
      "tooltip": "The number of the page on which the display section appears.",
      "helpUrl": "",
      "previousStatement": "smartSectionDisplaySettingsAttribute",
      "nextStatement":     "smartSectionDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionDisplaySettings__hideLabelWhenOpened'] = {
  init: function() {
    this.jsonInit({
      "message0": "hide label when opened: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "hideLabelWhenOpened",
          "text": ""
        }
      ],
      "colour": 306,
      "tooltip": "When **true**, the `displayLabel` is hidden when the display section is expanded and the display section is no longer collapsible. This property is valid only when the value of the `display` property is `collapsed`.",
      "helpUrl": "",
      "previousStatement": "smartSectionDisplaySettingsAttribute",
      "nextStatement":     "smartSectionDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionDisplaySettings__inlineOuterStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "inline outer style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "inlineOuterStyle",
          "text": ""
        }
      ],
      "colour": 306,
      "tooltip": "Specifies the valid CSS-formatted styles to use on inline display sections. This property is valid only when the value of the `display` property is `inline`.",
      "helpUrl": "",
      "previousStatement": "smartSectionDisplaySettingsAttribute",
      "nextStatement":     "smartSectionDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionDisplaySettings__labelWhenOpened'] = {
  init: function() {
    this.jsonInit({
      "message0": "label when opened: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "labelWhenOpened",
          "text": ""
        }
      ],
      "colour": 306,
      "tooltip": "The label for the display section when it is expanded from a collapsed state. This label displays only on the first opening and is only valid with the value of the `display` property is `collapsed`.",
      "helpUrl": "",
      "previousStatement": "smartSectionDisplaySettingsAttribute",
      "nextStatement":     "smartSectionDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionDisplaySettings__preLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "pre label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "preLabel",
          "text": ""
        }
      ],
      "colour": 306,
      "tooltip": "Enables you to add descriptive text that appears before a collapsed section or continue button.",
      "helpUrl": "",
      "previousStatement": "smartSectionDisplaySettingsAttribute",
      "nextStatement":     "smartSectionDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionDisplaySettings__scrollToTopWhenOpened'] = {
  init: function() {
    this.jsonInit({
      "message0": "scroll to top when opened: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "scrollToTopWhenOpened",
          "text": ""
        }
      ],
      "colour": 306,
      "tooltip": "When **true** and the section is expanded, the position of the section close is scrolled to the top of the screen. This property is only valid when the value of the `display` property is `collapsed`.",
      "helpUrl": "",
      "previousStatement": "smartSectionDisplaySettingsAttribute",
      "nextStatement":     "smartSectionDisplaySettingsAttribute",    
    });
  }
};
Blockly.Blocks['smartSectionDisplaySettings__tableStyle'] = {
  init: function() {
    this.jsonInit({
      "message0": "table style: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tableStyle",
          "text": ""
        }
      ],
      "colour": 306,
      "tooltip": "Specifies the valid CSS-formatted styles to use on responsive tables. This property is valid only when the value of the `display` property is `responsive_table` or `responsive_table_single_column`.",
      "helpUrl": "",
      "previousStatement": "smartSectionDisplaySettingsAttribute",
      "nextStatement":     "smartSectionDisplaySettingsAttribute",    
    });
  }
};

// socialAuthentication
Blockly.Blocks['socialAuthentication'] = {
  init: function() {
    this.jsonInit({
      "message0": "social authentication %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "socialAuthenticationAttribute"
        }
      ],
      "colour": 309,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// agent__socialAuthentication Attributes
Blockly.Blocks['socialAuthentication__authentication'] = {
  init: function() {
    this.jsonInit({
      "message0": "authentication: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "authentication",
          "text": ""
        }
      ],
      "colour": 309,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "socialAuthenticationAttribute",
      "nextStatement":     "socialAuthenticationAttribute",    
    });
  }
};

// ssn
Blockly.Blocks['ssn'] = {
  init: function() {
    this.jsonInit({
      "message0": "ssn %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "ssnAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "A one-line field that allows the recipient to enter a Social\nSecurity Number. The SSN can be typed with or without\ndashes. It uses the same parameters as a Text tab, with the\nvalidation message and pattern set for SSN information.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__ssn Attributes
Blockly.Blocks['ssn__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__concealValueOnDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "concealValueOnDocument",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.\n\nWhen an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.\n\nThis setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__concealValueOnDocumentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `concealValueOnDocument` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__disableAutoSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "disableAutoSize",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__disableAutoSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `disableAutoSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__maxLength'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "maxLength",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "An optional value that describes the maximum length of the property when the property is a string.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__maxLengthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `maxLength` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__originalValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "originalValue",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The initial value of the tab when it was sent to the recipient. ",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__originalValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `originalValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The page number on which the tab is located. For supplemental documents, this value must be `1`.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__requireAll'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireAll",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "When set to **true** and shared is true, information must be entered in this field to complete the envelope. ",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__requireAllMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `requireAll` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__requireInitialOnSharedChange'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireInitialOnSharedChange",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__requireInitialOnSharedChangeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "When set to **true**, the signer is required to fill out this tab.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__senderRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderRequired",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "When set to **true**, the sender must populate the tab before an envelope can be sent using the template. \n\nThis value tab can only be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired` value of true cannot be deleted from an envelope.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__senderRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `senderRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__shared'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "shared",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "When set to **true**, this custom tab is shared.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__sharedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `shared` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).\n",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['ssn__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "ssn_tabGroupLabelsAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['ssn_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "ssn_tabGroupLabelsAttribute",
      "nextStatement":     "ssn_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['ssn__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__validationMessage'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationMessage",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The message displayed if the custom tab fails input validation (either custom of embedded).",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__validationMessageMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `validationMessage` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__validationPattern'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation pattern: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationPattern",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "A regular expression used to validate input for the tab.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__validationPatternMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation pattern metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `validationPattern` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 312,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};
Blockly.Blocks['ssn__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 312,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "ssnAttribute",
      "nextStatement":     "ssnAttribute",    
    });
  }
};

// ssn4InformationInput
Blockly.Blocks['ssn4InformationInput'] = {
  init: function() {
    this.jsonInit({
      "message0": "ssn4 information input %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "ssn4InformationInputAttribute"
        }
      ],
      "colour": 315,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// idCheckInformationInput__ssn4InformationInput Attributes
Blockly.Blocks['ssn4InformationInput__displayLevelCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "display level code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "displayLevelCode",
          "text": ""
        }
      ],
      "colour": 315,
      "tooltip": "Specifies the display level for the recipient. Valid values are:\n* `ReadOnly`\n* `Editable`\n* `DoNotDisplay`",
      "helpUrl": "",
      "previousStatement": "ssn4InformationInputAttribute",
      "nextStatement":     "ssn4InformationInputAttribute",    
    });
  }
};
Blockly.Blocks['ssn4InformationInput__receiveInResponse'] = {
  init: function() {
    this.jsonInit({
      "message0": "receive in response: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "receiveInResponse",
          "text": ""
        }
      ],
      "colour": 315,
      "tooltip": "A Boolean value that specifies whether the information must be returned in the response.",
      "helpUrl": "",
      "previousStatement": "ssn4InformationInputAttribute",
      "nextStatement":     "ssn4InformationInputAttribute",    
    });
  }
};
Blockly.Blocks['ssn4InformationInput__ssn4'] = {
  init: function() {
    this.jsonInit({
      "message0": "ssn4: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "ssn4",
          "text": ""
        }
      ],
      "colour": 315,
      "tooltip": "The last four digits of the recipient's Social Security Number (SSN).",
      "helpUrl": "",
      "previousStatement": "ssn4InformationInputAttribute",
      "nextStatement":     "ssn4InformationInputAttribute",    
    });
  }
};

// ssn9InformationInput
Blockly.Blocks['ssn9InformationInput'] = {
  init: function() {
    this.jsonInit({
      "message0": "ssn9 information input %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "ssn9InformationInputAttribute"
        }
      ],
      "colour": 318,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// idCheckInformationInput__ssn9InformationInput Attributes
Blockly.Blocks['ssn9InformationInput__displayLevelCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "display level code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "displayLevelCode",
          "text": ""
        }
      ],
      "colour": 318,
      "tooltip": "Specifies the display level for the recipient. Valid values are:\n* `ReadOnly`\n* `Editable`\n* `DoNotDisplay`",
      "helpUrl": "",
      "previousStatement": "ssn9InformationInputAttribute",
      "nextStatement":     "ssn9InformationInputAttribute",    
    });
  }
};
Blockly.Blocks['ssn9InformationInput__ssn9'] = {
  init: function() {
    this.jsonInit({
      "message0": "ssn9: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "ssn9",
          "text": ""
        }
      ],
      "colour": 318,
      "tooltip": "The recipient's full Social Security Number (SSN).",
      "helpUrl": "",
      "previousStatement": "ssn9InformationInputAttribute",
      "nextStatement":     "ssn9InformationInputAttribute",    
    });
  }
};

// stamp
Blockly.Blocks['stamp'] = {
  init: function() {
    this.jsonInit({
      "message0": "stamp %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "stampAttribute"
        }
      ],
      "colour": 321,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// signHere__stamp Attributes
Blockly.Blocks['stamp__adoptedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "adopted date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "adoptedDateTime",
          "text": ""
        }
      ],
      "colour": 321,
      "tooltip": "The UTC date and time when the user adopted the signature.",
      "helpUrl": "",
      "previousStatement": "stampAttribute",
      "nextStatement":     "stampAttribute",    
    });
  }
};
Blockly.Blocks['stamp__createdDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "created date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "createdDateTime",
          "text": ""
        }
      ],
      "colour": 321,
      "tooltip": "The UTC DateTime when the item was created.",
      "helpUrl": "",
      "previousStatement": "stampAttribute",
      "nextStatement":     "stampAttribute",    
    });
  }
};
Blockly.Blocks['stamp__customField'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom field: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customField",
          "text": ""
        }
      ],
      "colour": 321,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "stampAttribute",
      "nextStatement":     "stampAttribute",    
    });
  }
};
Blockly.Blocks['stamp__disallowUserResizeStamp'] = {
  init: function() {
    this.jsonInit({
      "message0": "disallow user resize stamp: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "disallowUserResizeStamp",
          "text": ""
        }
      ],
      "colour": 321,
      "tooltip": "When set to **true**, users may not resize the stamp.",
      "helpUrl": "",
      "previousStatement": "stampAttribute",
      "nextStatement":     "stampAttribute",    
    });
  }
};
Blockly.Blocks['stamp__externalID'] = {
  init: function() {
    this.jsonInit({
      "message0": "external id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "externalID",
          "text": ""
        }
      ],
      "colour": 321,
      "tooltip": "Optionally specify an external identifier for the user's signature.",
      "helpUrl": "",
      "previousStatement": "stampAttribute",
      "nextStatement":     "stampAttribute",    
    });
  }
};
Blockly.Blocks['stamp__imageBase64'] = {
  init: function() {
    this.jsonInit({
      "message0": "image base64: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "imageBase64",
          "text": ""
        }
      ],
      "colour": 321,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "stampAttribute",
      "nextStatement":     "stampAttribute",    
    });
  }
};
Blockly.Blocks['stamp__imageType'] = {
  init: function() {
    this.jsonInit({
      "message0": "image type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "imageType",
          "text": ""
        }
      ],
      "colour": 321,
      "tooltip": "Specificies the type of image. Valid values are:\n\n- `signature_image`\n- `initials_image`",
      "helpUrl": "",
      "previousStatement": "stampAttribute",
      "nextStatement":     "stampAttribute",    
    });
  }
};
Blockly.Blocks['stamp__lastModifiedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "last modified date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lastModifiedDateTime",
          "text": ""
        }
      ],
      "colour": 321,
      "tooltip": "The date and time that the item was last modified.",
      "helpUrl": "",
      "previousStatement": "stampAttribute",
      "nextStatement":     "stampAttribute",    
    });
  }
};
Blockly.Blocks['stamp__phoneticName'] = {
  init: function() {
    this.jsonInit({
      "message0": "phonetic name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "phoneticName",
          "text": ""
        }
      ],
      "colour": 321,
      "tooltip": "The phonetic spelling of the `signatureName`.",
      "helpUrl": "",
      "previousStatement": "stampAttribute",
      "nextStatement":     "stampAttribute",    
    });
  }
};
Blockly.Blocks['stamp__signatureName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signature name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signatureName",
          "text": ""
        }
      ],
      "colour": 321,
      "tooltip": "Specifies the user's signature name.",
      "helpUrl": "",
      "previousStatement": "stampAttribute",
      "nextStatement":     "stampAttribute",    
    });
  }
};
Blockly.Blocks['stamp__stampFormat'] = {
  init: function() {
    this.jsonInit({
      "message0": "stamp format: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "stampFormat",
          "text": ""
        }
      ],
      "colour": 321,
      "tooltip": "The format of a stamp. Valid values are:\n\n- `NameHanko`: The stamp represents only the signer's name.\n- `NameDateHanko`: The stamp represents the signer's name and the date. ",
      "helpUrl": "",
      "previousStatement": "stampAttribute",
      "nextStatement":     "stampAttribute",    
    });
  }
};
Blockly.Blocks['stamp__stampImageUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "stamp image uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "stampImageUri",
          "text": ""
        }
      ],
      "colour": 321,
      "tooltip": "The URI for retrieving the image of the user's stamp.",
      "helpUrl": "",
      "previousStatement": "stampAttribute",
      "nextStatement":     "stampAttribute",    
    });
  }
};
Blockly.Blocks['stamp__stampSizeMM'] = {
  init: function() {
    this.jsonInit({
      "message0": "stamp size mm: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "stampSizeMM",
          "text": ""
        }
      ],
      "colour": 321,
      "tooltip": "The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents.",
      "helpUrl": "",
      "previousStatement": "stampAttribute",
      "nextStatement":     "stampAttribute",    
    });
  }
};
Blockly.Blocks['stamp__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 321,
      "tooltip": "The status of the item.",
      "helpUrl": "",
      "previousStatement": "stampAttribute",
      "nextStatement":     "stampAttribute",    
    });
  }
};

// tabGroup
Blockly.Blocks['tabGroup'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "tabGroupAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__tabGroup Attributes
Blockly.Blocks['tabGroup__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__groupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "groupLabel",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "A unique identifier for a tab group. To assign a tab to the `tabGroup`, you assign the `TabGroupLabel` to the `tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__groupLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "group label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `groupLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__groupRule'] = {
  init: function() {
    this.jsonInit({
      "message0": "group rule: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "groupRule",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "Specifies how `maximumAllowed` and `minimumRequired`\nare interpreted when selecting tabs in a `tabGroup`.\n\nPossible values are:\n\n- `SelectAtLeast`\n- `SelectAtMost`\n- `SelectExactly`\n- `SelectARange`\n\n",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__groupRuleMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "group rule metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `groupRule` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__maximumAllowed'] = {
  init: function() {
    this.jsonInit({
      "message0": "maximum allowed: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "maximumAllowed",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "The maximum number of tabs within the `tabGroup` that should be checked, populated, or signed. This property is used for validation.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__maximumAllowedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "maximum allowed metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `maximumAllowed` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__minimumRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "minimum required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "minimumRequired",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "The minimum number of of tabs within the `tabGroup` that should be checked, populated, or signed. This property is used for validation.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__minimumRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "minimum required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `minimumRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "The page number being accessed.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['tabGroup__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "tabGroup_tabGroupLabelsAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['tabGroup_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "tabGroup_tabGroupLabelsAttribute",
      "nextStatement":     "tabGroup_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['tabGroup__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__tabScope'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab scope: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabScope",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "The scope of the tab group. Possible values are:\n\n- `document`\n- `envelope` (default)",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__tabScopeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab scope metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `tabScope` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__validationMessage'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationMessage",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "The message displayed if the custom tab fails input validation (either custom of embedded).",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__validationMessageMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `validationMessage` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 324,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};
Blockly.Blocks['tabGroup__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 324,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "tabGroupAttribute",
      "nextStatement":     "tabGroupAttribute",    
    });
  }
};

// templateRole
Blockly.Blocks['templateRole'] = {
  init: function() {
    this.jsonInit({
      "message0": "template role %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "templateRoleAttribute"
        }
      ],
      "colour": 327,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// envelopeDefinition__templateRole Attributes
Blockly.Blocks['templateRole__accessCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessCode",
          "text": ""
        }
      ],
      "colour": 327,
      "tooltip": "If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. \n\nMaximum Length: 50 characters and it must conform to the account's access code format setting.\n\nIf blank, but the signer `accessCode` property is set in the envelope, then that value is used.\n\nIf blank and the signer `accessCode` property is not set, then the access code is not required.",
      "helpUrl": "",
      "previousStatement": "templateRoleAttribute",
      "nextStatement":     "templateRoleAttribute",    
    });
  }
};
Blockly.Blocks['templateRole__clientUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "client user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "clientUserId",
          "text": ""
        }
      ],
      "colour": 327,
      "tooltip": "Specifies whether the recipient is embedded or remote. \n\nIf the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.\n\nNote: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. \n\nMaximum length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "templateRoleAttribute",
      "nextStatement":     "templateRoleAttribute",    
    });
  }
};
Blockly.Blocks['templateRole__defaultRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "default recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "defaultRecipient",
          "text": ""
        }
      ],
      "colour": 327,
      "tooltip": "When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.",
      "helpUrl": "",
      "previousStatement": "templateRoleAttribute",
      "nextStatement":     "templateRoleAttribute",    
    });
  }
};
Blockly.Blocks['templateRole__email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "email",
          "text": ""
        }
      ],
      "colour": 327,
      "tooltip": "Specifies the email associated with a role name.",
      "helpUrl": "",
      "previousStatement": "templateRoleAttribute",
      "nextStatement":     "templateRoleAttribute",    
    });
  }
};
Blockly.Blocks['templateRole__embeddedRecipientStartURL'] = {
  init: function() {
    this.jsonInit({
      "message0": "embedded recipient start url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "embeddedRecipientStartURL",
          "text": ""
        }
      ],
      "colour": 327,
      "tooltip": "Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. \n\nIf set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.\n\nIt is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.\n\nIf the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` ",
      "helpUrl": "",
      "previousStatement": "templateRoleAttribute",
      "nextStatement":     "templateRoleAttribute",    
    });
  }
};
Blockly.Blocks['templateRole__inPersonSignerName'] = {
  init: function() {
    this.jsonInit({
      "message0": "in person signer name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "inPersonSignerName",
          "text": ""
        }
      ],
      "colour": 327,
      "tooltip": "Specifies the full legal name of the signer in person signer template roles.\n\nMaximum Length: 100 characters.",
      "helpUrl": "",
      "previousStatement": "templateRoleAttribute",
      "nextStatement":     "templateRoleAttribute",    
    });
  }
};
Blockly.Blocks['templateRole__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 327,
      "tooltip": "Specifies the recipient's name.",
      "helpUrl": "",
      "previousStatement": "templateRoleAttribute",
      "nextStatement":     "templateRoleAttribute",    
    });
  }
};
Blockly.Blocks['templateRole__roleName'] = {
  init: function() {
    this.jsonInit({
      "message0": "role name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "roleName",
          "text": ""
        }
      ],
      "colour": 327,
      "tooltip": "Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.",
      "helpUrl": "",
      "previousStatement": "templateRoleAttribute",
      "nextStatement":     "templateRoleAttribute",    
    });
  }
};
Blockly.Blocks['templateRole__routingOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "routingOrder",
          "text": ""
        }
      ],
      "colour": 327,
      "tooltip": "Specifies the routing order of the recipient in the envelope. ",
      "helpUrl": "",
      "previousStatement": "templateRoleAttribute",
      "nextStatement":     "templateRoleAttribute",    
    });
  }
};
Blockly.Blocks['templateRole__signingGroupId'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupId",
          "text": ""
        }
      ],
      "colour": 327,
      "tooltip": "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\n**Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. ",
      "helpUrl": "",
      "previousStatement": "templateRoleAttribute",
      "nextStatement":     "templateRoleAttribute",    
    });
  }
};

// text
Blockly.Blocks['text'] = {
  init: function() {
    this.jsonInit({
      "message0": "text %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "textAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "A tab that allows the recipient to enter any type of text.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__text Attributes
Blockly.Blocks['text__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__concealValueOnDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "concealValueOnDocument",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.\n\nWhen an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.\n\nThis setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__concealValueOnDocumentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `concealValueOnDocument` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__disableAutoSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "disableAutoSize",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__disableAutoSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `disableAutoSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__formula'] = {
  init: function() {
    this.jsonInit({
      "message0": "formula: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formula",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "Contains the formula\nfor calculating the value of\nthis tab.\n\nUse a tab's `tabLabel`,\nenclosed in brackets,\nto refer to it.\n\nFor example,\nyou want to present the total cost\nof two items, tax included.\n\nThe cost of each item is stored\nin number tabs labeled Item1 and Item2.\nThe tax rate is in a number tab\nlabeled TaxRate.\n\nThe formula string for this property\nwould be:\n`([Item1] + [Item2]) * (1 + [TaxRate])`\n\nSee [Calculated Fields][calculatedfields]\nin the DocuSign Support Center\nto learn more about formulas.\n\nMaximum Length: 2000 characters\n\n[calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields\n",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__formulaMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "formula metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata indicating if the sender can edit the `formula` property.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__isPaymentAmount'] = {
  init: function() {
    this.jsonInit({
      "message0": "is payment amount: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "isPaymentAmount",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true**, sets this as a payment tab. Can only be used with Text, Number, Formula, or List tabs. The value of the tab must be a number. ",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__isPaymentAmountMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "is payment amount metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `isPaymentAmount` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__maxLength'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "maxLength",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "An optional value that describes the maximum length of the property when the property is a string.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__maxLengthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `maxLength` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__originalValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "originalValue",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The initial value of the tab when it was sent to the recipient. ",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__originalValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `originalValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The page number on which the tab is located. For supplemental documents, this value must be `1`.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__requireAll'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireAll",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true** and shared is true, information must be entered in this field to complete the envelope. ",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__requireAllMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `requireAll` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__requireInitialOnSharedChange'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireInitialOnSharedChange",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__requireInitialOnSharedChangeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true**, the signer is required to fill out this tab.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__senderRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderRequired",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true**, the sender must populate the tab before an envelope can be sent using the template. \n\nThis value tab can only be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired` value of true cannot be deleted from an envelope.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__senderRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `senderRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__shared'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "shared",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true**, this custom tab is shared.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__sharedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `shared` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['text__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "text_tabGroupLabelsAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['text_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "text_tabGroupLabelsAttribute",
      "nextStatement":     "text_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['text__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__validationMessage'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationMessage",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The message displayed if the custom tab fails input validation (either custom of embedded).",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__validationMessageMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `validationMessage` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__validationPattern'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation pattern: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationPattern",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "A regular expression used to validate input for the tab.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__validationPatternMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation pattern metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `validationPattern` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 330,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};
Blockly.Blocks['text__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 330,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "textAttribute",
      "nextStatement":     "textAttribute",    
    });
  }
};

// textCustomField
Blockly.Blocks['textCustomField'] = {
  init: function() {
    this.jsonInit({
      "message0": "text custom field %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "textCustomFieldAttribute"
        }
      ],
      "colour": 333,
      "tooltip": "This object represents a free text custom field where envelope creators and senders can enter custom data.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// AccountCustomFields__textCustomField Attributes
Blockly.Blocks['textCustomField__configurationType'] = {
  init: function() {
    this.jsonInit({
      "message0": "configuration type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "configurationType",
          "text": ""
        }
      ],
      "colour": 333,
      "tooltip": "If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.",
      "helpUrl": "",
      "previousStatement": "textCustomFieldAttribute",
      "nextStatement":     "textCustomFieldAttribute",    
    });
  }
};
Blockly.Blocks['textCustomField__fieldId'] = {
  init: function() {
    this.jsonInit({
      "message0": "field id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fieldId",
          "text": ""
        }
      ],
      "colour": 333,
      "tooltip": "The id of the custom field.",
      "helpUrl": "",
      "previousStatement": "textCustomFieldAttribute",
      "nextStatement":     "textCustomFieldAttribute",    
    });
  }
};
Blockly.Blocks['textCustomField__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 333,
      "tooltip": "The name of the custom field.",
      "helpUrl": "",
      "previousStatement": "textCustomFieldAttribute",
      "nextStatement":     "textCustomFieldAttribute",    
    });
  }
};
Blockly.Blocks['textCustomField__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 333,
      "tooltip": "When set to **true**, senders are required to enter or select information for the field before they can send the envelope.",
      "helpUrl": "",
      "previousStatement": "textCustomFieldAttribute",
      "nextStatement":     "textCustomFieldAttribute",    
    });
  }
};
Blockly.Blocks['textCustomField__show'] = {
  init: function() {
    this.jsonInit({
      "message0": "show: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "show",
          "text": ""
        }
      ],
      "colour": 333,
      "tooltip": "When set to **true**, the field displays in the **Envelope Custom Fields** section when a user creates or sends an envelope.",
      "helpUrl": "",
      "previousStatement": "textCustomFieldAttribute",
      "nextStatement":     "textCustomFieldAttribute",    
    });
  }
};
Blockly.Blocks['textCustomField__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 333,
      "tooltip": "The value of the custom field. The user who creates or sends the envelope provides this value. Maximum length: 100 characters.",
      "helpUrl": "",
      "previousStatement": "textCustomFieldAttribute",
      "nextStatement":     "textCustomFieldAttribute",    
    });
  }
};

// title
Blockly.Blocks['title'] = {
  init: function() {
    this.jsonInit({
      "message0": "title %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "titleAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "A tab that displays the recipient's title.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__title Attributes
Blockly.Blocks['title__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__concealValueOnDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "concealValueOnDocument",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.\n\nWhen an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.\n\nThis setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__concealValueOnDocumentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `concealValueOnDocument` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__disableAutoSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "disableAutoSize",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__disableAutoSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `disableAutoSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__maxLength'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "maxLength",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "An optional value that describes the maximum length of the property when the property is a string.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__maxLengthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `maxLength` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__originalValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "originalValue",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The initial value of the tab when it was sent to the recipient. ",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__originalValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `originalValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The page number on which the tab is located. For supplemental documents, this value must be `1`.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "When set to **true**, the signer is required to fill out this tab.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).\n",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['title__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "title_tabGroupLabelsAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['title_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "title_tabGroupLabelsAttribute",
      "nextStatement":     "title_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['title__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 336,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};
Blockly.Blocks['title__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 336,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "titleAttribute",
      "nextStatement":     "titleAttribute",    
    });
  }
};

// userInfo
Blockly.Blocks['userInfo'] = {
  init: function() {
    this.jsonInit({
      "message0": "user info %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "userInfoAttribute"
        }
      ],
      "colour": 339,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// agent__userInfo Attributes
Blockly.Blocks['userInfo__accountId'] = {
  init: function() {
    this.jsonInit({
      "message0": "account id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accountId",
          "text": ""
        }
      ],
      "colour": 339,
      "tooltip": "The external account number (int) or account ID GUID.",
      "helpUrl": "",
      "previousStatement": "userInfoAttribute",
      "nextStatement":     "userInfoAttribute",    
    });
  }
};
Blockly.Blocks['userInfo__accountName'] = {
  init: function() {
    this.jsonInit({
      "message0": "account name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accountName",
          "text": ""
        }
      ],
      "colour": 339,
      "tooltip": "The name on the account.",
      "helpUrl": "",
      "previousStatement": "userInfoAttribute",
      "nextStatement":     "userInfoAttribute",    
    });
  }
};
Blockly.Blocks['userInfo__activationAccessCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "activation access code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "activationAccessCode",
          "text": ""
        }
      ],
      "colour": 339,
      "tooltip": "Access code provided to the user to activate the account.",
      "helpUrl": "",
      "previousStatement": "userInfoAttribute",
      "nextStatement":     "userInfoAttribute",    
    });
  }
};
Blockly.Blocks['userInfo__email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "email",
          "text": ""
        }
      ],
      "colour": 339,
      "tooltip": "The user's email address.",
      "helpUrl": "",
      "previousStatement": "userInfoAttribute",
      "nextStatement":     "userInfoAttribute",    
    });
  }
};
Blockly.Blocks['userInfo__loginStatus'] = {
  init: function() {
    this.jsonInit({
      "message0": "login status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "loginStatus",
          "text": ""
        }
      ],
      "colour": 339,
      "tooltip": "Boolean value that indicates whether the user is currently logged in or not.",
      "helpUrl": "",
      "previousStatement": "userInfoAttribute",
      "nextStatement":     "userInfoAttribute",    
    });
  }
};
Blockly.Blocks['userInfo__membershipId'] = {
  init: function() {
    this.jsonInit({
      "message0": "membership id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "membershipId",
          "text": ""
        }
      ],
      "colour": 339,
      "tooltip": "The user's membership ID.",
      "helpUrl": "",
      "previousStatement": "userInfoAttribute",
      "nextStatement":     "userInfoAttribute",    
    });
  }
};
Blockly.Blocks['userInfo__sendActivationEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "send activation email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sendActivationEmail",
          "text": ""
        }
      ],
      "colour": 339,
      "tooltip": "When set to **true**, specifies that an activation email be sent to the user.",
      "helpUrl": "",
      "previousStatement": "userInfoAttribute",
      "nextStatement":     "userInfoAttribute",    
    });
  }
};
Blockly.Blocks['userInfo__uri'] = {
  init: function() {
    this.jsonInit({
      "message0": "uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "uri",
          "text": ""
        }
      ],
      "colour": 339,
      "tooltip": "A URI containing the user ID.",
      "helpUrl": "",
      "previousStatement": "userInfoAttribute",
      "nextStatement":     "userInfoAttribute",    
    });
  }
};
Blockly.Blocks['userInfo__userId'] = {
  init: function() {
    this.jsonInit({
      "message0": "user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userId",
          "text": ""
        }
      ],
      "colour": 339,
      "tooltip": "The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.\n",
      "helpUrl": "",
      "previousStatement": "userInfoAttribute",
      "nextStatement":     "userInfoAttribute",    
    });
  }
};
Blockly.Blocks['userInfo__userName'] = {
  init: function() {
    this.jsonInit({
      "message0": "user name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userName",
          "text": ""
        }
      ],
      "colour": 339,
      "tooltip": "The name of the user.",
      "helpUrl": "",
      "previousStatement": "userInfoAttribute",
      "nextStatement":     "userInfoAttribute",    
    });
  }
};
Blockly.Blocks['userInfo__userStatus'] = {
  init: function() {
    this.jsonInit({
      "message0": "user status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userStatus",
          "text": ""
        }
      ],
      "colour": 339,
      "tooltip": "Status of the user's account. One of:\n\n- `ActivationRequired`\n- `ActivationSent`\n- `Active`\n- `Closed`\n- `Disabled`\n",
      "helpUrl": "",
      "previousStatement": "userInfoAttribute",
      "nextStatement":     "userInfoAttribute",    
    });
  }
};
Blockly.Blocks['userInfo__userType'] = {
  init: function() {
    this.jsonInit({
      "message0": "user type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userType",
          "text": ""
        }
      ],
      "colour": 339,
      "tooltip": "The type of user, for example `CompanyUser`.",
      "helpUrl": "",
      "previousStatement": "userInfoAttribute",
      "nextStatement":     "userInfoAttribute",    
    });
  }
};

// view
Blockly.Blocks['view'] = {
  init: function() {
    this.jsonInit({
      "message0": "view %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "viewAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "This tab is used with the Approve tab to handle supplemental documents.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__view Attributes
Blockly.Blocks['view__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__buttonText'] = {
  init: function() {
    this.jsonInit({
      "message0": "button text: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "buttonText",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The text to display on the button.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__buttonTextMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "button text metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `buttonText` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The page number on which the tab is located. For supplemental documents, this value must be `1`.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The unique id for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "When set to **true**, the recipient must click the **View** button for the supporting document prior to completing the signing process.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__requiredRead'] = {
  init: function() {
    this.jsonInit({
      "message0": "required read: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requiredRead",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "When set to **true**, the recipient must read through the document.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['view__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "view_tabGroupLabelsAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['view_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "view_tabGroupLabelsAttribute",
      "nextStatement":     "view_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['view__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\n",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 342,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\n",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};
Blockly.Blocks['view__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 342,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "viewAttribute",
      "nextStatement":     "viewAttribute",    
    });
  }
};

// witness
Blockly.Blocks['witness'] = {
  init: function() {
    this.jsonInit({
      "message0": "witness %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "witnessAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipients__witness Attributes
Blockly.Blocks['witness__accessCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "accessCode",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. \n\nMaximum Length: 50 characters and it must conform to the account's access code format setting.\n\nIf blank, but the signer `accessCode` property is set in the envelope, then that value is used.\n\nIf blank and the signer `accessCode` property is not set, then the access code is not required.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__accessCodeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "access code metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Metadata that indicates whether the `accessCode` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__addAccessCodeToEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "add access code to email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "addAccessCodeToEmail",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__additionalNotificationsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "additional notifications metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__agentCanEditEmail'] = {
  init: function() {
    this.jsonInit({
      "message0": "agent can edit email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "agentCanEditEmail",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__agentCanEditName'] = {
  init: function() {
    this.jsonInit({
      "message0": "agent can edit name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "agentCanEditName",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated name. This element is only active if enabled for the account.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__allowSystemOverrideForLockedRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "allow system override for locked recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "allowSystemOverrideForLockedRecipient",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__autoNavigation'] = {
  init: function() {
    this.jsonInit({
      "message0": "auto navigation: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "autoNavigation",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "When set to **true**, autonavigation is set for the recipient.\n",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__bulkRecipientsUri'] = {
  init: function() {
    this.jsonInit({
      "message0": "bulk recipients uri: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bulkRecipientsUri",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__canSignOffline'] = {
  init: function() {
    this.jsonInit({
      "message0": "can sign offline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "canSignOffline",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "When set to **true**, specifies that the signer can perform the signing ceremony offline.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__clientUserId'] = {
  init: function() {
    this.jsonInit({
      "message0": "client user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "clientUserId",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Specifies whether the recipient is embedded or remote. \n\nIf the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.\n\nNote: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. \n\nMaximum length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__completedCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "completed count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "completedCount",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__creationReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "creation reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "creationReason",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The reason why the recipient was created (for example, `sender`). Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['witness__customFields'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom fields %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "customField",
          "check": "witness_customFieldsAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['witness_customFields__customField'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom field: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customField",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "witness_customFieldsAttribute",
      "nextStatement":     "witness_customFieldsAttribute",    
    });
  }
};


Blockly.Blocks['witness__declinedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedDateTime",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The date and time the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__declinedReason'] = {
  init: function() {
    this.jsonInit({
      "message0": "declined reason: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "declinedReason",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The reason the recipient declined the document. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__defaultRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "default recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "defaultRecipient",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__deliveredDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivered date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveredDateTime",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The date and time that the envelope was delivered to the recipient. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__deliveryMethod'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "deliveryMethod",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__deliveryMethodMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "delivery method metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__designatorId'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorId",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__designatorIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "designator id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "designatorIdGuid",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__email'] = {
  init: function() {
    this.jsonInit({
      "message0": "email: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "email",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The recipient's email address.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__emailMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "email metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Metadata that indicates whether the `email` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__embeddedRecipientStartURL'] = {
  init: function() {
    this.jsonInit({
      "message0": "embedded recipient start url: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "embeddedRecipientStartURL",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. \n\nIf set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.\n\nIt is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.\n\nIf the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` ",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['witness__excludedDocuments'] = {
  init: function() {
    this.jsonInit({
      "message0": "excluded documents %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "excludedDocument",
          "check": "witness_excludedDocumentsAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.\n\nWhen enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['witness_excludedDocuments__excludedDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "excluded document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "excludedDocument",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "witness_excludedDocumentsAttribute",
      "nextStatement":     "witness_excludedDocumentsAttribute",    
    });
  }
};


Blockly.Blocks['witness__faxNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "faxNumber",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__faxNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "fax number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__firstName'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "firstName",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The recipient's first name. Maximum Length: 50 characters.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__firstNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "first name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Metadata that indicates whether the `firstame` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__fullName'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fullName",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__fullNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "full name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__idCheckConfigurationName'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "idCheckConfigurationName",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.\n- `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.\n- `ID Check $`: The  recipient must answer detailed security questions. \n\n**Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__idCheckConfigurationNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "id check configuration name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Metadata that indicates whether the `idCheckConfigurationName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__inheritEmailNotificationConfiguration'] = {
  init: function() {
    this.jsonInit({
      "message0": "inherit email notification configuration: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "inheritEmailNotificationConfiguration",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. ",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__isBulkRecipient'] = {
  init: function() {
    this.jsonInit({
      "message0": "is bulk recipient: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "isBulkRecipient",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Reserved for DocuSign.\n",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__isBulkRecipientMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "is bulk recipient metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__lastName'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lastName",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The recipient's last name.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__lastNameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "last name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Metadata that indicates whether the `lastName` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__lockedRecipientPhoneAuthEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient phone auth editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientPhoneAuthEditable",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__lockedRecipientSmsEditable'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked recipient sms editable: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "lockedRecipientSmsEditable",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The full legal name of the recipient. Maximum Length: 100 characters.\n\n**Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__note'] = {
  init: function() {
    this.jsonInit({
      "message0": "note: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "note",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "A note sent to the recipient in the signing email.\nThis note is unique to this recipient.\nIn the user interface,\nit appears near the upper left corner\nof the document\non the signing screen.\n\nMaximum Length: 1000 characters.\n",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__noteMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "note metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Metadata that indicates whether the `note` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__recipientSuppliesTabs'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient supplies tabs: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientSuppliesTabs",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "When set to **true**, specifies that the recipient creates the tabs.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__recipientType'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientType",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The recipient type, as specified by the following values:\n- `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.\n- `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.\n- `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.\n- `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.\n- `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.\n- `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.\n- `seal`: Electronic seal recipients represent legal entities.\n- `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.\n- `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__recipientTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Metadata that indicates whether the `recipientType` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__requireIdLookup'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireIdLookup",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. ",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__requireIdLookupMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require id lookup metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Metadata that indicates whether the `requireIdLookup` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__requireSignOnPaper'] = {
  init: function() {
    this.jsonInit({
      "message0": "require sign on paper: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireSignOnPaper",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__requireSignerCertificate'] = {
  init: function() {
    this.jsonInit({
      "message0": "require signer certificate: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireSignerCertificate",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.\n\nThis parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the `recipientSignatureProviders` parameter for other types of digital certificates. \n\nSet this parameter to `safe` to use a SAFE-BioPharma certificate.\n\nThe signer must be enrolled in the SAFE program to sign with a SAFE certificate.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__requireUploadSignature'] = {
  init: function() {
    this.jsonInit({
      "message0": "require upload signature: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireUploadSignature",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "When set to **true**, the signer is required to upload a new signature, even if they have a pre-adopted signature in their personal DocuSign account.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__roleName'] = {
  init: function() {
    this.jsonInit({
      "message0": "role name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "roleName",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__routingOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "routingOrder",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Specifies the routing order of the recipient in the envelope. ",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__routingOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "routing order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Metadata that indicates whether the `routingOrder` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__sentDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "sent date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "sentDateTime",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The UTC DateTime when the envelope was sent. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__signInEachLocation'] = {
  init: function() {
    this.jsonInit({
      "message0": "sign in each location: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signInEachLocation",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once).",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__signInEachLocationMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "sign in each location metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Metadata that indicates whether the `signInEachLocation` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__signedDateTime'] = {
  init: function() {
    this.jsonInit({
      "message0": "signed date time: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signedDateTime",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__signingGroupId'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupId",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\n**Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. ",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__signingGroupIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 345,
      "tooltip": "Metadata that indicates whether the `signingGroupId` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__signingGroupName'] = {
  init: function() {
    this.jsonInit({
      "message0": "signing group name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "signingGroupName",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "Optional. The name of the signing group. \n\nMaximum Length: 100 characters. ",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The recipient's status. Read only. \n\nPossible values:\n\n- `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.\n- `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.\n- `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).\n- `declined`: The recipient declined to sign the document(s) in the envelope.\n- `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.\n- `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.\n- `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.\n- `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__statusCode'] = {
  init: function() {
    this.jsonInit({
      "message0": "status code: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "statusCode",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The code associated with the recipient's status. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__suppressEmails'] = {
  init: function() {
    this.jsonInit({
      "message0": "suppress emails: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "suppressEmails",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__totalTabCount'] = {
  init: function() {
    this.jsonInit({
      "message0": "total tab count: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "totalTabCount",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The total number of tabs in the documents. Read only.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__userId'] = {
  init: function() {
    this.jsonInit({
      "message0": "user id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "userId",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.\n",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__witnessFor'] = {
  init: function() {
    this.jsonInit({
      "message0": "witness for: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "witnessFor",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The person or party for whom the recipient is a witness.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};
Blockly.Blocks['witness__witnessForGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "witness for guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "witnessForGuid",
          "text": ""
        }
      ],
      "colour": 345,
      "tooltip": "The GUID of the person or party for whom the recipient is a witness.",
      "helpUrl": "",
      "previousStatement": "witnessAttribute",
      "nextStatement":     "witnessAttribute",    
    });
  }
};

// zip
Blockly.Blocks['zip'] = {
  init: function() {
    this.jsonInit({
      "message0": "zip %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "zipAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "A tab that allows the recipient to enter a ZIP code. The ZIP\ncode can be five digits or nine digits in the ZIP+4 format.\nThe zip code can be typed with or without dashes. It uses\nthe same parameters as a Text tab, with the validation\nmessage and pattern set for ZIP code information.\n",
      "helpUrl": "",
      "previousStatement": "createEnvelopeAttribute",
      "nextStatement": "createEnvelopeAttribute",
    });
  }
};
// EnvelopeRecipientTabs__zip Attributes
Blockly.Blocks['zip__anchorAllowWhiteSpaceInCharacters'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorAllowWhiteSpaceInCharacters",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorAllowWhiteSpaceInCharactersMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor allow white space in characters metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorCaseSensitive'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorCaseSensitive",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.\n\nFor example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorCaseSensitiveMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor case sensitive metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `anchorCaseSensitive` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorHorizontalAlignment'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorHorizontalAlignment",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :\n\n- `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.\n- `right`: Aligns the tabâ€™s left side with the last character of the matching anchor word.\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorHorizontalAlignmentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor horizontal alignment metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorIgnoreIfNotPresent'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorIgnoreIfNotPresent",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true**, this tab is ignored if the `anchorString` is not found in the document.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorIgnoreIfNotPresentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor ignore if not present metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorMatchWholeWord'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorMatchWholeWord",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.\n\nFor example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.\n\nThis functionality uses the following rules:\n\n- Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:\n\n  $~><|^+=\n\n  For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`\n\n- Strings embedded in other strings are ignored during the matching process.\n\n- In words that have dashes, the parts separated by dashes are treated as distinct words.\n\n  Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.\n\n- Letters with accent marks are treated as distinct characters from their unaccented counterparts.\n\n- For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.\n\n  Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.\n\n- Unlike punctuation, numbers are not ignored when finding anchor words.\n\n  Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).\n\n\n**Note**: You can only specify the value of this property in POST requests.\n\n[AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace\n",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorMatchWholeWordMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor match whole word metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `anchorMatchWholeWord` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorString'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorString",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "Specifies the string to find in the document and use as the basis for tab placement.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorStringMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor string metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `anchorString` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorTabProcessorVersion'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorTabProcessorVersion",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorTabProcessorVersionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor tab processor version metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Reserved for DocuSign.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorUnits'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorUnits",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "Specifies units of the\n`anchorXOffset` and\n`anchorYOffset`.\nValid units are:\n\n- `pixels`\n- `inches`\n- `mms`\n- `cms`\n",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorUnitsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor units metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `anchorUnits` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorXOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorXOffset",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorXOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor x offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `anchorXOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorYOffset'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "anchorYOffset",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.\n",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__anchorYOffsetMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "anchor y offset metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `anchorYOffset` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__bold'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "bold",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true**, the information in the tab is bold.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__boldMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "bold metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `bold` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__concealValueOnDocument'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "concealValueOnDocument",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.\n\nWhen an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.\n\nThis setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__concealValueOnDocumentMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conceal value on document metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `concealValueOnDocument` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__conditionalParentLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentLabel",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__conditionalParentLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `conditionalParentLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__conditionalParentValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "conditionalParentValue",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "For conditional fields, this is the value of the parent tab that controls the tab's visibility.\n\nIf the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.\n",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__conditionalParentValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "conditional parent value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `conditionalParentValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__customTabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "customTabId",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__customTabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "custom tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `customTabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__disableAutoSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "disableAutoSize",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__disableAutoSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "disable auto size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `disableAutoSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__documentId'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "documentId",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__documentIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "document id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `documentId` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__font'] = {
  init: function() {
    this.jsonInit({
      "message0": "font: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "font",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The font to be used for the tab value. Supported fonts include:\n\n- Default\n- Arial\n- ArialNarrow\n- Calibri\n- CourierNew\n- Garamond\n- Georgia\n- Helvetica\n- LucidaConsole\n- MSGothic\n- MSMincho\n- OCR-A\n- Tahoma\n- TimesNewRoman\n- Trebuchet\n- Verdana\n",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__fontColor'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontColor",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The font color to use for the information in the tab. Possible values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n- Gold\n- Green\n- NavyBlue\n- Purple\n- White\n",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__fontColorMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font color metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `fontColor` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__fontMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `font` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__fontSize'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "fontSize",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The font size used for the information in the tab. Possible values are:\n\n- Size7\n- Size8\n- Size9\n- Size10\n- Size11\n- Size12\n- Size14\n- Size16\n- Size18\n- Size20\n- Size22\n- Size24\n- Size26\n- Size28\n- Size36\n- Size48\n- Size72",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__fontSizeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "font size metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `fontSize` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__formOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formOrder",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__formOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `formOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__formPageLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageLabel",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__formPageLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `formPageLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__formPageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "formPageNumber",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "An integer specifying the order in which to present the guided form pages.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__formPageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "form page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `fromPageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__height'] = {
  init: function() {
    this.jsonInit({
      "message0": "height: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "height",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The height of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__heightMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "height metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `height` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__italic'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "italic",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true**, the information in the tab is italic.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__italicMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "italic metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `italic` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__locked'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "locked",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true**, the signer cannot change the data of the custom tab.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__lockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `locked` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__maxLength'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "maxLength",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "An optional value that describes the maximum length of the property when the property is a string.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__maxLengthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "max length metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `maxLength` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__mergeFieldXml'] = {
  init: function() {
    this.jsonInit({
      "message0": "merge field xml: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "mergeFieldXml",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__name'] = {
  init: function() {
    this.jsonInit({
      "message0": "name: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "name",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The name of the tab. For example, `Sign Here` or `Initial Here`.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__nameMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "name metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `name` property is editable. Read only.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__originalValue'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "originalValue",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The initial value of the tab when it was sent to the recipient. ",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__originalValueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "original value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `originalValue` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__pageNumber'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "pageNumber",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The page number on which the tab is located. For supplemental documents, this value must be `1`.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__pageNumberMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "page number metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `pageNumber` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__recipientId'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientId",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__recipientIdGuid'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "recipientIdGuid",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__recipientIdGuidMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id guid metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `recipientIdGuid` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__recipientIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "recipient id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `recipientId` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__requireAll'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireAll",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true** and shared is true, information must be entered in this field to complete the envelope. ",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__requireAllMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require all metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `requireAll` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__requireInitialOnSharedChange'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "requireInitialOnSharedChange",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__requireInitialOnSharedChangeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "require initial on shared change metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `requireInitialOnSharedChange` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__required'] = {
  init: function() {
    this.jsonInit({
      "message0": "required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "required",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true**, the signer is required to fill out this tab.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__requiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `required` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__senderRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "senderRequired",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true**, the sender must populate the tab before an envelope can be sent using the template. \n\nThis value tab can only be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired` value of true cannot be deleted from an envelope.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__senderRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "sender required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `senderRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__shared'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "shared",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true**, this custom tab is shared.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__sharedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "shared metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `shared` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__status'] = {
  init: function() {
    this.jsonInit({
      "message0": "status: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "status",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The status of the tab. Possible values are:\n\n- `active`: The tab is active, but the recipient has not yet interacted with it.\n- `signed`: The recipient signed the tab.\n- `declined`: The recipient declined the envelope.\n- `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).\n",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__statusMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "status metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `status` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
// Item which is an array of Scalar
Blockly.Blocks['zip__tabGroupLabels'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels %1 %2",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "tabGroupLabel",
          "check": "zip_tabGroupLabelsAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
// the scalar items (we're assuming string)
Blockly.Blocks['zip_tabGroupLabels__tabGroupLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabGroupLabel",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "",
      "helpUrl": "",
      "previousStatement": "zip_tabGroupLabelsAttribute",
      "nextStatement":     "zip_tabGroupLabelsAttribute",    
    });
  }
};


Blockly.Blocks['zip__tabGroupLabelsMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab group labels metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `tabGroupLabels` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__tabId'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabId",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The unique identifier for the tab.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__tabIdMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab id metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `tabId` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__tabLabel'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabLabel",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The label associated with the tab. This value may be an empty string.\nIf no value is provided, the tab type is used as the value.\n\nMaximum Length: 500 characters.\n",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__tabLabelMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab label metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `tabLabel` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__tabOrder'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabOrder",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "A positive integer that sets the order the tab is navigated to during signing.\n\nTabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__tabOrderMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab order metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `tabOrder` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__tabType'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tabType",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "Indicates the type of tab (for example, `signHere` or `initialHere`).",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__tabTypeMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tab type metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `tabType` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__templateLocked'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateLocked",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. ",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__templateLockedMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template locked metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `templateLocked` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__templateRequired'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "templateRequired",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__templateRequiredMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "template required metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `templateRequired` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__toolTipMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "tool tip metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `toolTip` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__tooltip'] = {
  init: function() {
    this.jsonInit({
      "message0": "tooltip: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "tooltip",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The text of a tooltip that appears when a user hovers over a form field or tab.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__underline'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "underline",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true**, the information in the tab is underlined.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__underlineMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "underline metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `underline` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__useDash4'] = {
  init: function() {
    this.jsonInit({
      "message0": "use dash4: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "useDash4",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "When set to **true**, ZIP+4 format is used.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__useDash4Metadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "use dash4 metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `useDash4` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__validationMessage'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationMessage",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The message displayed if the custom tab fails input validation (either custom of embedded).",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__validationMessageMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation message metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `validationMessage` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__validationPattern'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation pattern: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "validationPattern",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "A regular expression used to validate input for the tab.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__validationPatternMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "validation pattern metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `validationPattern` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__value'] = {
  init: function() {
    this.jsonInit({
      "message0": "value: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "value",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "Specifies the value of the tab. ",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__valueMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "value metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `value` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__width'] = {
  init: function() {
    this.jsonInit({
      "message0": "width: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "width",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "The width of the tab in pixels.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__widthMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "width metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `width` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__xPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "xPosition",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "This property indicates the horizontal offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__xPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "x position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `xPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__yPosition'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position: %1",
      "args0": [
        {
          "type": "field_input",
          "name": "yPosition",
          "text": ""
        }
      ],
      "colour": 348,
      "tooltip": "This property indicates the vertical offset of the object on the page.\nDocuSign uses 72 DPI when determining position.\nRequired. May be zero.\n\nTo improve the tab's position on the document,\nDocuSign recommends\nadjusting `xPosition`\nand `yPosition`\ncoordinates\nby (-3, -2)\n",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};
Blockly.Blocks['zip__yPositionMetadata'] = {
  init: function() {
    this.jsonInit({
      "message0": "y position metadata %1 rights: %2 %3 options: %4",
      "args0": [
        {
          "type": "input_dummy"
        },
        {
          "type": "field_dropdown",
          "name": "rights",
          "options": [
            [
              "editable",
              "editable"
            ],
            [
              "read_only",
              "read_only"
            ]
          ]
        },
        {
          "type": "input_dummy"
        },
        {
          "type": "input_statement",
          "name": "attributes",
          "check": "propertyMetadataAttribute"
        }
      ],
      "colour": 348,
      "tooltip": "Metadata that indicates whether the `yPosition` property is editable.",
      "helpUrl": "",
      "previousStatement": "zipAttribute",
      "nextStatement":     "zipAttribute",    
    });
  }
};


}
